%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 028 — .eps
%%Creator: Adobe Illustrator(R) 24.1
%%For: Lynn Lynn
%%CreationDate: 8/20/2022
%%BoundingBox: 0 0 600 356
%%HiResBoundingBox: 0 0 600 356
%%CropBox: 0 0 600 356
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.1.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.1.2 x408 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="ï»¿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164360, 2020/02/13-01:07:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">028</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator 24.1 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2022-08-20T12:58:34+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2022-08-20T12:58:35+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2022-08-20T12:58:35+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>152</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAmAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A855mNbsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqP0CwtNQ1ux&#xA;sby4Fpa3UyRTXJpSNXanI12298lAAkAtGpyShjlKI4iBdd6d+cPy48weWbiYTp9ZtIqcrqHcKG+z&#xA;6igkpX7vfJ5MMouHoe1cWoAraR6H9HexXKnZuxV2KuxVNZvLWqR6RHqyhJrNgDL6Thnh5E8fVT7S&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:67284bb6-a28a-ab48-9c95-1594c8172e01</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:67284bb6-a28a-ab48-9c95-1594c8172e01</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:9fada376-8188-48ae-b0dd-26c01890f1ca</stRef:instanceID>
            <stRef:documentID>xmp.did:ae240013-c52e-6e4f-9c6d-89e5c62b9702</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ae240013-c52e-6e4f-9c6d-89e5c62b9702</stEvt:instanceID>
                  <stEvt:when>2022-08-12T11:49:44+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:67284bb6-a28a-ab48-9c95-1594c8172e01</stEvt:instanceID>
                  <stEvt:when>2022-08-20T12:58:35+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <illustrator:CreatorSubTool>Adobe Illustrator</illustrator:CreatorSubTool>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>600.000000</stDim:w>
            <stDim:h>356.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -356 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 356 li
600 356 li
600 0 li
cp
clp
600 356 mo
0 356 li
0 9.09495e-13 li
600 9.09495e-13 li
600 356 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.0705882 .0862745 .160784 rgb
f
140.492 76.0454 mo
137.373 77.0327 li
146.412 68.9771 li
148.487 68.9771 li
140.492 76.0454 li
cp
125.252 60.3018 mo
151.432 60.3018 li
153.233 62.1025 li
136.438 77.0713 li
136.438 64.1602 li
136.438 64.146 136.436 64.1323 136.434 64.1187 cv
136.446 64.0283 136.417 63.9355 136.351 63.8691 cv
134.374 61.8921 li
134.318 61.8364 134.243 61.8052 134.164 61.8052 cv
123.749 61.8052 li
125.252 60.3018 li
cp
142.216 44.9102 mo
142.138 44.9102 142.062 44.9414 142.006 44.9971 cv
135.98 51.0239 li
130.949 51.0239 li
127.506 47.5811 li
134.164 47.5811 li
134.243 47.5811 134.318 47.5498 134.374 47.4941 cv
136.351 45.5176 li
136.369 45.4985 136.384 45.4771 136.397 45.4541 cv
136.4 45.4487 136.403 45.4438 136.406 45.4385 cv
136.417 45.4155 136.427 45.3916 136.432 45.3657 cv
136.432 45.3647 136.432 45.3633 136.432 45.3623 cv
136.436 45.3442 136.438 45.3262 136.438 45.3071 cv
136.438 32.396 li
150.479 44.9102 li
142.216 44.9102 li
cp
115.506 47.5811 mo
119.821 47.5811 li
123.264 51.0239 li
118.949 51.0239 li
115.506 47.5811 li
cp
122.442 47.5811 mo
124.885 47.5811 li
128.328 51.0239 li
125.885 51.0239 li
122.442 47.5811 li
cp
148.487 40.4912 mo
146.412 40.4912 li
137.374 32.4355 li
140.493 33.4229 li
148.487 40.4912 li
cp
165.213 54.7339 mo
165.213 54.7192 165.211 54.7051 165.209 54.6909 cv
165.207 54.6753 165.204 54.6606 165.199 54.646 cv
165.198 54.6401 165.198 54.6338 165.196 54.6284 cv
165.192 54.6201 165.187 54.6138 165.183 54.6064 cv
165.177 54.5928 165.169 54.5796 165.161 54.5669 cv
165.152 54.5542 165.142 54.5425 165.131 54.5317 cv
165.126 54.5254 165.122 54.5181 165.116 54.5122 cv
149.467 40.5664 li
149.467 40.5659 149.467 40.5659 149.467 40.5659 cv
149.467 40.5659 149.467 40.5654 149.467 40.5654 cv
140.838 32.937 li
140.808 32.9097 140.771 32.8892 140.731 32.8765 cv
136.23 31.4517 li
136.229 31.4546 li
136.162 31.4331 136.087 31.4336 136.02 31.4639 cv
135.913 31.5117 135.845 31.6177 135.845 31.7344 cv
135.845 45.0107 li
113.91 45.0107 li
112.868 45.0107 li
112.748 45.0107 112.639 45.083 112.593 45.1938 cv
112.547 45.3047 112.573 45.4321 112.658 45.5171 cv
112.685 45.5439 li
112.658 45.5708 li
118.617 51.5303 li
118.672 51.5859 118.748 51.6172 118.827 51.6172 cv
136.103 51.6172 li
136.182 51.6172 136.257 51.5859 136.313 51.5303 cv
142.339 45.5034 li
151.145 45.5034 li
161.501 54.7339 li
160.175 55.916 li
151.565 48.0449 li
151.511 47.9946 151.439 47.9673 151.365 47.9673 cv
145.494 47.9673 li
145.494 47.0776 li
144.901 47.0776 li
144.901 49.4497 li
145.494 49.4497 li
145.494 48.5601 li
151.25 48.5601 li
159.729 56.313 li
153.677 61.7075 li
151.765 59.7954 li
151.709 59.7397 151.634 59.7085 151.555 59.7085 cv
125.129 59.7085 li
125.051 59.7085 124.975 59.7397 124.919 59.7954 cv
122.942 61.7725 li
122.975 61.8052 li
113.218 61.8052 li
113.218 51.4155 li
114.974 49.6597 li
114.555 49.2402 li
112.712 51.083 li
112.656 51.1387 112.625 51.2139 112.625 51.293 cv
112.625 62.1021 li
112.625 64.0791 li
112.625 64.1602 li
112.625 64.3242 112.758 64.457 112.921 64.457 cv
122.204 64.457 li
123.57 63.0903 li
126.089 63.0903 li
127.456 64.457 li
135.845 64.457 li
135.845 77.7329 li
135.845 77.7354 135.846 77.7378 135.846 77.7402 cv
135.846 77.7661 135.849 77.792 135.857 77.8174 cv
135.857 77.8179 li
135.857 77.8198 135.857 77.8213 135.858 77.8232 cv
135.861 77.834 135.868 77.8423 135.873 77.8521 cv
135.88 77.8682 135.887 77.8848 135.896 77.8994 cv
135.905 77.9121 135.917 77.9229 135.927 77.9341 cv
135.937 77.9443 135.945 77.9546 135.957 77.9634 cv
135.969 77.9736 135.983 77.9814 135.998 77.9893 cv
136.005 77.9937 136.012 78 136.02 78.0034 cv
136.025 78.0059 136.03 78.0068 136.036 78.0088 cv
136.045 78.0122 136.054 78.0151 136.064 78.0181 cv
136.085 78.0239 136.106 78.0273 136.128 78.0283 cv
136.132 78.0283 136.136 78.0303 136.141 78.0303 cv
136.17 78.0303 136.201 78.0259 136.23 78.0166 cv
140.731 76.5918 li
140.771 76.5791 140.807 76.5586 140.838 76.5313 cv
149.467 68.9023 li
149.467 68.9023 149.467 68.9023 149.467 68.9019 cv
149.467 68.9019 li
152.829 65.9058 li
152.904 64.5835 li
157.025 60.9053 li
158.355 60.981 li
165.116 54.9551 li
165.122 54.9497 165.126 54.9419 165.131 54.936 cv
165.142 54.9248 165.152 54.9136 165.161 54.9009 cv
165.169 54.8882 165.177 54.875 165.183 54.8613 cv
165.187 54.8535 165.192 54.8477 165.196 54.8394 cv
165.198 54.8335 165.198 54.8276 165.199 54.8218 cv
165.204 54.8066 165.207 54.792 165.209 54.7769 cv
165.211 54.7622 165.213 54.748 165.213 54.7339 cv
cp
.25098 .956863 1 rgb
f
301.39 39.9888 mo
300.947 39.5942 li
302.525 37.8232 li
302.968 38.2178 li
301.39 39.9888 li
cp
302.475 40.9556 mo
304.053 39.1846 li
304.496 39.5791 li
302.917 41.3506 li
302.475 40.9556 li
cp
304.002 42.3174 mo
305.58 40.5459 li
306.023 40.9409 li
304.445 42.7119 li
304.002 42.3174 li
cp
281.693 69.959 mo
282.135 69.564 li
283.714 71.3354 li
283.271 71.73 li
281.693 69.959 li
cp
284.799 70.3682 mo
283.22 68.5972 li
283.663 68.2026 li
285.242 69.9736 li
284.799 70.3682 li
cp
286.327 69.0068 mo
284.748 67.2358 li
285.19 66.8413 li
286.769 68.6123 li
286.327 69.0068 li
cp
287.854 67.6455 mo
286.275 65.874 li
286.718 65.4795 li
288.297 67.2505 li
287.854 67.6455 li
cp
289.382 66.2837 mo
287.803 64.5127 li
288.246 64.1182 li
289.825 65.8892 li
289.382 66.2837 li
cp
290.909 64.9224 mo
289.331 63.1514 li
289.773 62.7563 li
291.352 64.5278 li
290.909 64.9224 li
cp
292.437 63.5605 mo
290.858 61.7896 li
291.301 61.395 li
292.88 63.166 li
292.437 63.5605 li
cp
293.964 62.1992 mo
292.386 60.4282 li
292.829 60.0337 li
294.407 61.8047 li
293.964 62.1992 li
cp
295.492 60.8379 mo
293.914 59.0669 li
294.356 58.6719 li
295.935 60.4434 li
295.492 60.8379 li
cp
297.02 59.4761 mo
295.441 57.7051 li
295.884 57.3105 li
297.462 59.0815 li
297.02 59.4761 li
cp
298.547 58.1147 mo
296.969 56.3438 li
297.412 55.9492 li
298.99 57.7202 li
298.547 58.1147 li
cp
290.698 58.2959 mo
294.641 54.7764 li
290.698 51.2568 li
290.589 49.3511 li
275.926 36.2817 li
277.418 36.2817 li
277.418 36.2905 li
280.919 36.2905 li
290.635 44.9497 li
290.689 44.998 290.759 45.0249 290.832 45.0249 cv
294.021 45.0249 li
304.896 54.7168 li
302.729 56.6499 li
294.154 49.0078 li
294.238 48.8452 294.286 48.6611 294.286 48.4653 cv
294.286 47.8101 293.755 47.2793 293.1 47.2793 cv
292.445 47.2793 291.914 47.8101 291.914 48.4653 cv
291.914 49.1206 292.445 49.6519 293.1 49.6519 cv
293.344 49.6519 293.571 49.5776 293.76 49.4507 cv
302.283 57.0474 li
284.09 73.271 li
275.926 73.271 li
290.589 60.2017 li
290.698 58.2959 li
cp
296.735 68.8975 mo
297.163 65.1953 li
297.167 65.1519 297.162 65.1094 297.149 65.0698 cv
308.359 55.0732 li
314.655 55.0732 li
300.453 67.6631 li
300.39 67.7192 300.354 67.7998 300.354 67.8848 cv
300.354 70.5244 li
297.607 73.271 li
291.829 73.271 li
296.735 68.8975 li
cp
293.754 38.4497 mo
295.485 40.1812 li
295.541 40.2363 295.616 40.2676 295.695 40.2676 cv
298.57 40.2676 li
300.364 41.8672 li
300.358 41.8901 300.354 41.9141 300.354 41.939 cv
300.354 44.5869 li
300.354 44.6719 300.39 44.752 300.453 44.8086 cv
311.305 54.48 li
305.521 54.48 li
294.332 44.5068 li
294.277 44.4585 294.207 44.4316 294.134 44.4316 cv
290.945 44.4316 li
284.233 38.4497 li
293.754 38.4497 li
cp
281.801 36.2817 mo
291.586 36.2817 li
293.161 37.8569 li
283.568 37.8569 li
281.801 36.2817 li
cp
287.953 73.271 mo
296.515 65.6357 li
296.172 68.605 li
290.937 73.271 li
287.953 73.271 li
cp
303.079 36.2817 mo
307.901 40.5806 li
308.021 43.8843 li
308.024 43.9648 308.06 44.041 308.12 44.0947 cv
313.696 49.0649 li
313.751 49.1133 313.821 49.1401 313.894 49.1401 cv
317.499 49.1401 li
319.543 50.9619 li
321.186 50.9619 li
325.459 54.7764 li
321.186 58.5913 li
319.543 58.5913 li
317.499 60.4126 li
313.894 60.4126 li
313.821 60.4126 313.751 60.4395 313.696 60.4878 cv
307.999 65.5659 li
307.938 65.6211 307.901 65.6997 307.899 65.7827 cv
307.848 69.0205 li
303.078 73.271 li
298.445 73.271 li
300.86 70.8564 li
300.916 70.8013 300.947 70.7256 300.947 70.647 cv
300.947 68.0181 li
315.549 55.0732 li
319.383 55.0732 li
319.512 55.5889 319.977 55.9712 320.532 55.9712 cv
321.188 55.9712 321.719 55.4404 321.719 54.7852 cv
321.719 54.1299 321.188 53.5991 320.532 53.5991 cv
319.983 53.5991 319.522 53.9731 319.388 54.48 cv
315.407 54.48 li
298.88 39.75 li
298.826 39.7012 298.755 39.6748 298.683 39.6748 cv
295.817 39.6748 li
292.425 36.2817 li
303.079 36.2817 li
cp
308.449 68.4839 mo
308.491 65.9224 li
314.007 61.0059 li
316.84 61.0059 li
308.449 68.4839 li
cp
316.84 48.5474 mo
314.007 48.5474 li
308.609 43.7363 li
308.515 41.127 li
316.84 48.5474 li
cp
327.485 54.7764 mo
327.485 54.7759 327.485 54.7759 327.485 54.7759 cv
327.485 54.7661 327.483 54.7563 327.482 54.7466 cv
327.481 54.7358 327.481 54.7251 327.479 54.7144 cv
327.479 54.7144 327.479 54.7139 327.479 54.7139 cv
327.478 54.7056 327.474 54.6978 327.471 54.6899 cv
327.471 54.688 327.47 54.686 327.469 54.6836 cv
327.466 54.6743 327.464 54.6646 327.46 54.6558 cv
327.46 54.6553 327.46 54.6553 327.46 54.6548 cv
327.455 54.646 327.449 54.6377 327.444 54.6289 cv
327.444 54.6279 327.443 54.627 327.443 54.626 cv
327.438 54.6182 327.435 54.6094 327.429 54.6021 cv
327.429 54.6016 li
327.422 54.5933 327.414 54.5859 327.407 54.5781 cv
327.4 54.5708 327.395 54.5625 327.388 54.5557 cv
320.781 48.623 li
320.747 48.5923 320.705 48.5737 320.661 48.5615 cv
311.657 40.5366 li
306.303 35.7632 li
306.249 35.7148 306.179 35.688 306.105 35.688 cv
303.191 35.688 li
303.189 35.688 303.188 35.689 303.187 35.689 cv
291.832 35.689 li
291.774 35.6309 li
291.716 35.689 li
275.147 35.689 li
275.112 35.689 275.079 35.6963 275.047 35.708 cv
275.014 35.6958 274.979 35.689 274.943 35.689 cv
272.029 35.689 li
271.906 35.689 271.796 35.7646 271.752 35.8799 cv
271.708 35.9946 271.74 36.125 271.832 36.2065 cv
284.996 47.9399 li
285.193 49.6553 li
290.931 54.7764 li
285.194 59.8975 li
284.996 61.6128 li
271.832 73.3462 li
271.74 73.4282 271.708 73.5581 271.752 73.6733 cv
271.796 73.7881 271.906 73.8643 272.029 73.8643 cv
274.943 73.8643 li
274.979 73.8643 275.014 73.8574 275.047 73.8452 cv
275.079 73.8564 275.112 73.8643 275.147 73.8643 cv
284.204 73.8643 li
287.175 73.8643 li
306.105 73.8643 li
306.178 73.8643 306.248 73.8374 306.303 73.7891 cv
311.869 68.8271 li
320.662 60.9912 li
320.706 60.979 320.747 60.9609 320.781 60.9302 cv
327.333 55.0459 li
327.387 54.998 li
327.434 54.9561 327.466 54.8999 327.479 54.8384 cv
327.481 54.8296 327.48 54.8208 327.482 54.812 cv
327.482 54.8081 327.482 54.8047 327.483 54.8008 cv
327.483 54.793 327.485 54.7852 327.485 54.7769 cv
327.485 54.7769 li
327.485 54.7769 327.485 54.7769 327.485 54.7764 cv
327.485 54.7764 li
327.485 54.7764 li
327.485 54.7764 li
cp
f
365.779 58.4775 mo
366.078 58.9907 li
372.958 54.9888 li
373.05 54.9355 373.105 54.8379 373.105 54.7324 cv
373.105 54.627 373.05 54.5293 372.958 54.4761 cv
372.958 54.4761 368.421 51.8364 366.076 50.4746 cv
365.777 50.9873 li
367.68 52.0923 371.023 54.0371 372.219 54.7324 cv
365.779 58.4775 li
cp
357.875 58.835 mo
359.321 54.8354 li
359.346 54.77 359.346 54.6987 359.321 54.6338 cv
359.321 54.6338 358.717 52.9609 357.872 50.6299 cv
357.314 50.832 li
358.038 52.8271 358.585 54.3403 358.728 54.7344 cv
357.317 58.6333 li
357.875 58.835 li
cp
370.379 67.8813 mo
370.379 69.958 li
368.186 71.2339 li
368.483 71.7466 li
370.824 70.3848 li
370.916 70.332 370.972 70.2344 370.972 70.1284 cv
370.972 68.0522 li
374.227 66.1587 li
373.929 65.646 li
370.526 67.625 li
370.435 67.6782 370.379 67.7759 370.379 67.8813 cv
cp
370.824 39.083 mo
368.483 37.7217 li
368.186 38.2344 li
370.379 39.5103 li
370.379 41.5864 li
370.379 41.6919 370.435 41.7896 370.526 41.8428 cv
373.929 43.8218 li
374.227 43.3091 li
370.972 41.416 li
370.972 39.3394 li
370.972 39.2339 370.916 39.1362 370.824 39.083 cv
cp
378.26 67.9375 mo
375.99 69.2573 li
375.99 65.1328 li
384.074 60.4316 li
383.775 59.9189 li
375.545 64.7061 li
375.454 64.7593 375.397 64.8569 375.397 64.9624 cv
375.397 69.6025 li
365.378 75.4302 li
365.568 77.0991 li
372.788 72.9004 li
374.198 73.2734 li
380.525 69.5933 li
378.26 67.9375 li
cp
381.31 66.1641 mo
380.53 66.6167 li
382.796 68.2725 li
383.574 67.8198 li
381.31 66.1641 li
cp
379.784 67.0508 mo
379.006 67.5034 li
381.271 69.1592 li
382.05 68.7065 li
379.784 67.0508 li
cp
391.753 55.2285 mo
395.962 58.3037 li
401.265 55.2285 li
391.753 55.2285 li
cp
401.265 54.2397 mo
395.962 51.1641 li
391.753 54.2397 li
401.265 54.2397 li
cp
380.53 42.8511 mo
381.309 43.3042 li
383.574 41.6484 li
382.796 41.1958 li
380.53 42.8511 li
cp
379.006 41.9644 mo
379.784 42.4175 li
382.05 40.7617 li
381.271 40.3091 li
379.006 41.9644 li
cp
361.316 54.8359 mo
357.119 66.438 li
371.45 58.1021 li
371.45 62.6782 li
372.426 62.1113 li
372.518 57.4819 li
373.69 56.7998 li
373.69 61.376 li
385.109 54.7339 li
373.69 48.0923 li
373.69 52.6665 li
372.518 51.9849 li
372.426 47.3569 li
371.45 46.7896 li
371.45 51.3643 li
357.118 43.0278 li
361.316 54.6338 li
361.34 54.6992 361.34 54.7705 361.316 54.8359 cv
cp
354.615 73.1563 mo
354.612 73.1582 354.608 73.1587 354.605 73.1606 cv
353.909 73.5654 li
356.319 66.9028 li
356.32 66.9023 li
360.722 54.7349 li
356.024 41.7485 li
353.909 35.9014 li
354.615 36.3115 li
354.615 36.3115 li
364.853 42.2661 li
365.334 44.085 li
368.196 45.7495 li
370.015 45.2681 li
372.412 46.6626 li
372.412 46.6626 li
373.331 47.1973 li
385.847 54.4771 li
385.938 54.5303 385.994 54.6284 385.994 54.7344 cv
385.994 54.771 385.987 54.8066 385.975 54.8398 cv
385.95 54.9023 385.906 54.9565 385.847 54.9912 cv
370.015 64.1997 li
368.196 63.7188 li
365.334 65.3833 li
364.853 67.2017 li
354.615 73.1563 li
cp
405.765 54.7344 mo
405.765 54.771 405.758 54.8066 405.745 54.8398 cv
405.722 54.9023 405.677 54.9565 405.617 54.9912 cv
394.135 61.6704 li
394.14 61.6743 li
384.321 67.3857 li
382.056 65.73 li
383.896 64.6597 li
385.261 65.0205 li
388.122 63.356 li
388.483 61.9912 li
391.875 60.0186 li
393.611 61.2881 li
395.328 60.2896 li
390.448 56.7236 li
384.074 60.4316 li
383.775 59.9189 li
390.318 56.1138 li
390.419 56.0542 390.547 56.061 390.642 56.1304 cv
395.874 59.9546 li
404.876 54.7339 li
395.874 49.5137 li
390.642 53.3374 li
390.547 53.4072 390.42 53.4141 390.318 53.3545 cv
383.775 49.5493 li
375.545 44.7622 li
375.454 44.709 375.397 44.6113 375.397 44.5059 cv
375.397 39.8657 li
365.378 34.0376 li
365.568 32.3687 li
372.788 36.5679 li
374.198 36.1948 li
380.525 39.875 li
378.26 41.5308 li
375.99 40.2109 li
375.99 44.335 li
384.074 49.0366 li
390.448 52.7441 li
395.328 49.1782 li
393.611 48.1802 li
391.875 49.4492 li
388.483 47.4771 li
388.122 46.1118 li
385.261 44.4473 li
383.896 44.8086 li
382.056 43.7383 li
384.321 42.0825 li
394.14 47.7935 li
394.134 47.7979 li
405.617 54.4771 li
405.709 54.5303 405.766 54.6284 405.765 54.7344 cv
cp
f
482.023 54.7715 mo
482.022 54.7715 li
482.022 54.772 li
482.023 54.7715 li
cp
.0862745 .235294 .356863 rgb
f
461.772 55.0313 mo
461.08 55.7231 li
448.028 55.7231 li
447.337 55.0313 li
443.477 55.0313 li
448.666 65.4082 li
449.938 65.8369 li
451.365 68.7144 li
450.944 69.9644 li
452.062 72.1987 li
470.947 61.2134 li
471.291 59.9092 li
474.066 58.292 li
475.377 58.6372 li
481.576 55.0313 li
461.772 55.0313 li
cp
f
448.028 53.7461 mo
461.08 53.7461 li
461.772 54.4385 li
481.576 54.4385 li
475.375 50.8311 li
474.066 51.1763 li
471.291 49.5586 li
470.948 48.2563 li
452.062 37.271 li
450.944 39.5044 li
451.365 40.7534 li
449.938 43.6309 li
448.667 44.0596 li
443.477 54.4385 li
447.337 54.4385 li
448.028 53.7461 li
cp
f
469.386 66.353 mo
468.23 66.0474 li
468.153 66.0278 468.073 66.0381 468.005 66.0781 cv
461.599 69.8052 li
461.53 69.8447 461.481 69.9097 461.461 69.9858 cv
461.155 71.1401 li
459.173 72.2935 li
450.393 54.7339 li
459.172 37.1758 li
461.156 38.3296 li
461.461 39.4824 li
461.481 39.5586 461.53 39.6235 461.599 39.6631 cv
468.005 43.3901 li
468.051 43.4165 468.103 43.4302 468.154 43.4302 cv
468.18 43.4302 468.205 43.4268 468.23 43.4204 cv
469.384 43.1152 li
473.688 45.6182 li
473.688 47.9897 li
485.255 54.7178 li
485.224 54.7358 li
485.254 54.7529 li
473.688 61.48 li
473.688 63.8511 li
469.386 66.353 li
cp
468.894 67.8486 mo
462.699 71.4521 li
461.753 71.2021 li
462.003 70.2559 li
468.197 66.6523 li
469.144 66.9028 li
468.894 67.8486 li
cp
458.659 72.5923 mo
457.445 73.2983 li
455.259 68.9463 li
455.888 67.0498 li
458.659 72.5923 li
cp
450.532 32.1504 mo
456.932 35.8721 li
454.674 40.3672 li
454.639 40.4375 454.633 40.5186 454.657 40.5933 cv
455.507 43.1558 li
455.521 43.1509 li
449.8 54.5942 li
449.776 54.6367 449.764 54.6846 449.764 54.7349 cv
449.764 54.7896 449.779 54.8413 449.806 54.8857 cv
455.522 66.3193 li
455.507 66.314 li
454.657 68.8765 li
454.633 68.9507 454.639 69.0322 454.674 69.1025 cv
456.932 73.5972 li
450.532 77.3193 li
439.239 54.7349 li
450.532 32.1504 li
cp
455.888 42.4189 mo
455.259 40.5234 li
457.445 36.1714 li
458.658 36.877 li
455.888 42.4189 li
cp
461.753 38.2661 mo
462.699 38.0161 li
468.894 41.6191 li
469.144 42.5654 li
468.197 42.8154 li
462.003 39.2124 li
461.753 38.2661 li
cp
490.104 54.9873 mo
490.54 54.7339 li
490.1 54.4775 li
490.099 54.4775 li
485.008 51.5161 li
483.81 51.8477 li
477.36 48.1943 li
476.989 46.8525 li
469.782 42.6606 li
469.436 41.3491 li
469.415 41.2729 469.365 41.208 469.298 41.1685 cv
462.892 37.4414 li
462.823 37.4019 462.743 37.3911 462.666 37.4111 cv
461.354 37.7583 li
450.558 31.4785 li
450.513 31.4526 450.462 31.4404 450.41 31.4399 cv
450.345 31.4116 450.271 31.4048 450.2 31.4282 cv
449.134 31.7832 li
447.547 32.3115 li
447.473 32.3364 447.411 32.3901 447.376 32.4604 cv
445.198 36.8145 li
445.163 36.8848 445.157 36.9658 445.182 37.0405 cv
445.613 38.335 li
446.065 39.6934 li
446.069 39.7046 446.076 39.7139 446.082 39.7246 cv
438.643 54.6016 li
438.622 54.6426 438.611 54.6895 438.611 54.7358 cv
438.611 54.7817 438.622 54.8271 438.643 54.8682 cv
446.081 69.7441 li
446.076 69.7544 446.069 69.7637 446.065 69.7749 cv
445.613 71.1328 li
445.182 72.4272 li
445.157 72.502 445.163 72.5835 445.198 72.6538 cv
447.376 77.0073 li
447.411 77.0781 447.473 77.1313 447.547 77.1563 cv
449.134 77.6851 li
450.2 78.04 li
450.23 78.0503 450.263 78.0552 450.294 78.0552 cv
450.334 78.0552 450.374 78.0464 450.41 78.0308 cv
450.462 78.0303 450.513 78.0171 450.558 77.9907 cv
461.355 71.7104 li
462.666 72.0571 li
462.691 72.0635 462.717 72.0669 462.742 72.0669 cv
462.794 72.0669 462.846 72.0532 462.892 72.0269 cv
469.298 68.2993 li
469.365 68.2603 469.415 68.1948 469.436 68.1191 cv
469.781 66.8096 li
473.688 64.5376 li
473.688 64.5376 li
474.594 64.0103 li
476.989 62.6172 li
477.36 61.2739 li
483.81 57.6201 li
485.01 57.9521 li
490.099 54.9922 li
490.102 54.9907 490.103 54.9883 490.104 54.9873 cv
cp
.25098 .956863 1 rgb
f
443.329 72.6733 mo
443.699 71.5615 li
442.526 69.2168 li
439.188 71.1582 li
442.543 77.8672 li
442.625 78.0313 li
446.009 78.0313 li
443.329 72.6733 li
cp
f
441.696 41.9126 mo
442.262 40.7832 li
438.923 38.8413 li
438.358 39.9712 li
441.696 41.9126 li
cp
f
442.261 68.6851 mo
441.696 67.5557 li
438.357 69.4971 li
438.923 70.627 li
442.261 68.6851 li
cp
f
442.527 40.2515 mo
443.699 37.9072 li
443.329 36.7949 li
446.008 31.4385 li
442.625 31.4385 li
439.188 38.3101 li
442.527 40.2515 li
cp
f
441.431 67.0244 mo
435.285 54.7349 li
441.431 42.4443 li
438.093 40.5024 li
436.971 42.7471 li
437.666 44.835 li
434.755 50.6533 li
432.669 51.3486 li
431.043 54.6016 li
431.012 54.6655 li
431.012 54.8057 li
432.668 58.1191 li
434.755 58.8145 li
437.666 64.6333 li
436.97 66.7217 li
438.092 68.9658 li
441.431 67.0244 li
cp
f
475.981 54.7344 mo
475.981 54.6284 475.925 54.5308 475.834 54.478 cv
467.093 49.3936 li
466.781 47.7759 li
466.766 47.6914 466.714 47.6187 466.64 47.5752 cv
464.513 46.3384 li
464.438 46.2954 464.35 46.2866 464.269 46.314 cv
462.58 46.8872 li
462.471 46.9243 462.393 47.0225 462.381 47.1382 cv
462.369 47.2539 462.426 47.3657 462.526 47.4243 cv
466.678 49.8384 li
466.678 49.8384 li
475.095 54.7344 li
466.684 59.6274 li
466.682 59.6284 466.68 59.6284 466.678 59.6299 cv
462.526 62.0439 li
462.426 62.1025 462.369 62.2144 462.381 62.3301 cv
462.393 62.4453 462.471 62.5439 462.58 62.5811 cv
464.269 63.1543 li
464.299 63.1646 464.331 63.1699 464.363 63.1699 cv
464.415 63.1699 464.467 63.1563 464.513 63.1299 cv
466.64 61.8926 li
466.714 61.8496 466.766 61.7764 466.781 61.6924 cv
467.092 60.0757 li
475.834 54.9907 li
475.925 54.9375 475.981 54.8398 475.981 54.7344 cv
cp
f
479.466 48.3794 mo
483.033 50.4551 li
483.332 49.9424 li
479.765 47.8667 li
479.466 48.3794 li
cp
f
483.033 59.0127 mo
479.466 61.0889 li
479.765 61.6016 li
483.332 59.5254 li
483.033 59.0127 li
cp
f
60.563 46.7358 mo
47.6802 39.2427 li
60.8477 54.7354 li
47.6802 70.2275 li
60.561 62.7344 li
61.0239 60.9868 li
71.7729 54.7354 li
61.0239 48.4819 li
60.563 46.7358 li
cp
.0862745 .235294 .356863 rgb
f
65.7192 49.2686 mo
66.6768 49.8257 li
70.5034 47.5996 li
69.5459 47.043 li
65.7192 49.2686 li
cp
.25098 .956863 1 rgb
f
82.7686 54.7324 mo
71.0933 47.9429 li
67.2666 50.1689 li
75.1167 54.7349 li
67.2686 59.2988 li
71.0942 61.5239 li
81.6958 55.3579 li
81.6958 55.3579 li
81.7671 55.3164 li
81.7783 55.3096 li
82.7686 54.7324 li
cp
f
51.4736 70.6582 mo
50.9727 72.5508 li
36.2358 81.1123 li
38.9219 77.9517 li
41.0425 76.7183 li
51.4736 70.6582 li
cp
51.4736 38.8096 mo
38.9248 31.5195 li
36.2358 28.3555 li
50.9727 36.917 li
51.4736 38.8096 li
cp
65.1313 60.542 mo
62.4707 62.0894 li
62.0098 63.835 li
54.1606 68.3994 li
54.0542 68.4614 li
54.0532 68.4648 li
40.7954 76.1758 li
40.0762 76.5938 li
53.1558 61.2036 li
53.1694 61.1875 53.1792 61.1694 53.189 61.1514 cv
58.478 54.9277 li
58.5239 54.874 58.5488 54.8062 58.5488 54.7358 cv
58.5488 54.7339 li
58.5488 54.6636 58.5239 54.5957 58.478 54.542 cv
53.1929 48.3232 li
53.1821 48.3027 53.1714 48.2822 53.1558 48.2642 cv
40.0781 32.8765 li
54.0537 41.0054 li
54.0542 41.0073 li
62.0098 45.6343 li
62.4707 47.3789 li
65.1294 48.9258 li
68.9561 46.6997 li
53.1265 37.4941 li
53.8394 40.1943 li
52.2012 39.2417 li
51.5146 36.6465 li
51.4946 36.5703 51.4453 36.5054 51.377 36.4658 cv
35.04 26.9751 li
35.0337 26.9712 35.0269 26.9712 35.0205 26.9678 cv
34.9985 26.957 34.9761 26.9482 34.9521 26.9429 cv
34.9399 26.9404 34.9277 26.9404 34.9155 26.9395 cv
34.896 26.9375 34.877 26.937 34.8569 26.9395 cv
34.8433 26.9409 34.8301 26.9443 34.8164 26.9478 cv
34.8071 26.9502 34.7969 26.9502 34.7876 26.9536 cv
34.7793 26.957 34.7729 26.9624 34.7651 26.9663 cv
34.7524 26.9722 34.7407 26.979 34.729 26.9868 cv
34.7114 26.998 34.6968 27.0112 34.6826 27.0254 cv
34.6768 27.0313 34.6694 27.0347 34.6641 27.041 cv
34.6611 27.0444 34.6602 27.0488 34.6577 27.0522 cv
34.6436 27.0703 34.6333 27.0903 34.6235 27.1113 cv
34.6196 27.1206 34.6138 27.1284 34.6108 27.1382 cv
34.6021 27.1641 34.5981 27.1914 34.5967 27.2197 cv
34.5967 27.2246 34.5947 27.229 34.5947 27.2334 cv
34.5947 27.2339 34.5947 27.2344 34.5947 27.2349 cv
34.6582 32.9443 li
34.6592 33.0137 34.6841 33.0806 34.729 33.1333 cv
43.0483 42.9224 li
43.1025 42.9863 43.1812 43.0239 43.2646 43.0269 cv
45.5962 43.1025 li
50.2417 48.5684 li
50.2959 48.6323 50.3745 48.6699 50.458 48.6729 cv
52.7754 48.748 li
57.8638 54.7349 li
52.7769 60.7202 li
50.458 60.7954 li
50.3745 60.7979 50.2959 60.8359 50.2417 60.8999 cv
45.5962 66.3657 li
43.2646 66.4414 li
43.1812 66.4443 43.1025 66.4819 43.0483 66.5459 cv
34.729 76.335 li
34.6841 76.3877 34.6592 76.4546 34.6582 76.5234 cv
34.5947 82.2334 li
34.5947 82.2339 34.5947 82.2344 34.5947 82.2349 cv
34.5947 82.2393 34.5967 82.2437 34.5967 82.248 cv
34.5981 82.2764 34.6021 82.3042 34.6108 82.3301 cv
34.6138 82.3394 34.6196 82.3477 34.6235 82.3564 cv
34.6333 82.3774 34.6436 82.3975 34.6577 82.416 cv
34.6602 82.4194 34.6611 82.4233 34.6641 82.4268 cv
34.6753 82.4404 34.6885 82.4517 34.7017 82.4629 cv
34.7046 82.4653 34.7065 82.4683 34.7095 82.4702 cv
34.7314 82.4873 34.7554 82.5005 34.7803 82.5103 cv
34.7832 82.5112 34.7847 82.5132 34.7876 82.5142 cv
34.7905 82.5156 34.7944 82.5151 34.7979 82.5161 cv
34.8276 82.5264 34.8589 82.5327 34.8906 82.5332 cv
34.8911 82.5332 li
34.8911 82.5332 li
34.8916 82.5332 li
34.8921 82.5332 34.8926 82.5327 34.8931 82.5327 cv
34.916 82.5327 34.939 82.5293 34.9614 82.5239 cv
34.9688 82.522 34.9756 82.519 34.9829 82.5166 cv
34.999 82.5117 35.0142 82.5054 35.0293 82.4976 cv
35.0327 82.4956 35.0366 82.4951 35.04 82.4927 cv
51.377 73.002 li
51.4453 72.9624 51.4946 72.8975 51.5146 72.8213 cv
52.2007 70.228 li
53.8394 69.2754 li
53.1265 71.9746 li
68.957 62.7671 li
65.1313 60.542 li
cp
f
66.6787 59.6421 mo
65.7212 60.1987 li
69.5469 62.4238 li
70.5044 61.8672 li
66.6787 59.6421 li
cp
f
44.707 65.2686 mo
53.4971 54.9268 li
53.5913 54.8159 53.5913 54.6533 53.4971 54.543 cv
44.707 44.2007 li
44.2554 44.585 li
52.8818 54.7349 li
44.2554 64.8848 li
44.707 65.2686 li
cp
f
214.873 54.7344 mo
210.787 58.2153 li
213.125 58.2686 li
216.601 55.3086 li
217.274 54.7344 li
216.603 54.1606 li
213.125 51.1997 li
210.786 51.2524 li
214.873 54.7344 li
cp
207.215 61.2588 mo
209.551 61.312 li
212.446 58.8462 li
210.109 58.7935 li
207.215 61.2588 li
cp
209.551 48.1558 mo
207.214 48.2085 li
210.108 50.6748 li
212.447 50.6216 li
209.551 48.1558 li
cp
206.858 63.3257 mo
200.717 68.5586 li
207.71 68.5586 li
223.935 54.7349 li
207.711 40.9092 li
200.717 40.9092 li
206.857 46.1416 li
209.826 46.0747 li
219.993 54.7349 li
209.826 63.3931 li
206.858 63.3257 li
cp
197.269 37.9712 mo
200.021 40.3164 li
207.015 40.3164 li
204.263 37.9712 li
197.269 37.9712 li
cp
207.015 69.1519 mo
200.021 69.1519 li
197.269 71.4966 li
204.263 71.4966 li
207.015 69.1519 li
cp
206.646 62.7275 mo
209.614 62.7949 li
219.079 54.7344 li
218.49 54.231 li
209.614 46.6729 li
206.644 46.7397 li
195.658 37.3779 li
204.481 37.3779 li
204.564 37.4487 li
224.849 54.7349 li
204.481 72.0894 li
195.658 72.0894 li
206.646 62.7275 li
cp
232.261 61.4844 mo
234.068 61.5259 li
242.039 54.7339 li
234.068 47.9424 li
232.261 47.9839 li
219.217 36.8857 li
219.18 35.2559 li
215.048 31.7354 li
209.43 31.7354 li
218.624 39.5703 li
218.749 39.6768 218.764 39.8638 218.657 39.9888 cv
218.599 40.0576 218.516 40.0928 218.432 40.0928 cv
218.364 40.0928 218.295 40.0693 218.239 40.022 cv
213.045 35.5952 li
213.045 37.9487 li
221.89 45.4858 li
223.707 45.4263 li
233.685 53.9229 li
234.636 54.7349 li
233.683 55.5469 li
223.707 64.0415 li
221.89 63.9814 li
213.045 71.519 li
213.045 73.8726 li
218.239 69.4463 li
218.364 69.3398 218.551 69.355 218.657 69.4795 cv
218.764 69.604 218.749 69.7915 218.624 69.8975 cv
209.43 77.7329 li
215.048 77.7329 li
219.18 74.2119 li
219.217 72.582 li
232.261 61.4844 li
cp
212.452 74.3779 mo
208.515 77.7329 li
202 77.7329 li
228.99 54.7339 li
202 31.7354 li
208.515 31.7354 li
212.452 35.0898 li
212.452 38.0859 li
212.452 38.0898 212.453 38.0933 212.453 38.0972 cv
212.453 38.1074 212.455 38.1177 212.456 38.1284 cv
212.458 38.1377 212.459 38.1465 212.461 38.1553 cv
212.463 38.165 212.466 38.1738 212.47 38.1831 cv
212.473 38.1924 212.476 38.2012 212.48 38.21 cv
212.484 38.2183 212.488 38.2266 212.493 38.2344 cv
212.498 38.2432 212.503 38.2515 212.509 38.2598 cv
212.514 38.2666 212.52 38.2734 212.526 38.2803 cv
212.533 38.2886 212.541 38.2964 212.549 38.3037 cv
212.551 38.3062 212.553 38.3091 212.556 38.3115 cv
231.828 54.7339 li
212.556 71.1567 li
212.553 71.1592 212.551 71.1621 212.549 71.1646 cv
212.541 71.1719 212.533 71.1797 212.526 71.188 cv
212.52 71.1948 212.514 71.2012 212.509 71.2085 cv
212.503 71.2163 212.498 71.2251 212.493 71.2334 cv
212.488 71.2417 212.484 71.2495 212.48 71.2583 cv
212.476 71.2671 212.473 71.2759 212.47 71.2852 cv
212.466 71.2944 212.463 71.3032 212.461 71.3125 cv
212.459 71.3213 212.458 71.3306 212.456 71.3398 cv
212.455 71.3501 212.453 71.3608 212.453 71.3711 cv
212.453 71.375 212.452 71.3784 212.452 71.3823 cv
212.452 74.3779 li
cp
f
560.22 54.7339 mo
555.277 61.3013 li
555.751 61.6577 li
560.962 54.7339 li
555.751 47.8101 li
555.277 48.167 li
560.22 54.7339 li
cp
556.422 70.832 mo
555.947 70.4751 li
553.051 74.3242 li
553.524 74.6812 li
556.422 70.832 li
cp
556.422 38.6362 mo
553.524 34.7871 li
553.051 35.1436 li
555.947 38.9927 li
556.422 38.6362 li
cp
549.426 66.6865 mo
552.354 62.7969 li
552.065 60.7559 li
556.599 54.7339 li
552.065 48.7119 li
552.354 46.6709 li
549.426 42.7813 li
547.385 42.4937 li
541.322 34.4385 li
538.449 34.4385 li
553.726 54.7339 li
538.449 75.0293 li
541.322 75.0293 li
547.385 66.9746 li
549.426 66.6865 li
cp
532.172 54.4375 mo
526.049 54.4375 li
526.049 55.0308 li
532.172 55.0308 li
532.172 54.4375 li
cp
524.229 53.8442 mo
523.635 53.8442 li
523.635 55.6235 li
524.229 55.6235 li
524.229 53.8442 li
cp
522.771 53.8442 mo
522.178 53.8442 li
522.178 55.6235 li
522.771 55.6235 li
522.771 53.8442 li
cp
521.314 53.8442 mo
520.721 53.8442 li
520.721 55.6235 li
521.314 55.6235 li
521.314 53.8442 li
cp
519.857 53.8442 mo
519.264 53.8442 li
519.264 55.6235 li
519.857 55.6235 li
519.857 53.8442 li
cp
518.4 53.8442 mo
517.808 53.8442 li
517.808 55.6235 li
518.4 55.6235 li
518.4 53.8442 li
cp
535.505 54.7339 mo
533.621 56.6187 li
514.744 56.6187 li
512.859 54.7339 li
514.744 52.8496 li
533.621 52.8496 li
535.505 54.7339 li
cp
553.706 46.9561 mo
555.128 45.8857 li
554.771 45.4121 li
553.349 46.4824 li
553.706 46.9561 li
cp
552.83 45.792 mo
554.251 44.7222 li
553.895 44.248 li
552.473 45.3184 li
552.83 45.792 li
cp
553.019 43.084 mo
551.597 44.1543 li
551.953 44.6279 li
553.375 43.5581 li
553.019 43.084 li
cp
552.143 41.9199 mo
550.721 42.9902 li
551.077 43.4639 li
552.499 42.394 li
552.143 41.9199 li
cp
551.266 40.7559 mo
549.845 41.8262 li
550.201 42.2998 li
551.623 41.23 li
551.266 40.7559 li
cp
551.623 68.2383 mo
550.201 67.168 li
549.845 67.6416 li
551.266 68.7119 li
551.623 68.2383 li
cp
552.499 67.0742 mo
551.077 66.0039 li
550.721 66.4775 li
552.143 67.5479 li
552.499 67.0742 li
cp
553.375 65.9102 mo
551.953 64.8398 li
551.597 65.3135 li
553.019 66.3838 li
553.375 65.9102 li
cp
552.473 64.1499 mo
553.895 65.2197 li
554.251 64.7461 li
552.83 63.6758 li
552.473 64.1499 li
cp
553.349 62.9858 mo
554.771 64.0557 li
555.128 63.582 li
553.706 62.5117 li
553.349 62.9858 li
cp
546.605 47.1768 mo
539.316 47.1768 li
536.81 49.6836 li
530.566 49.6836 li
527.994 52.2563 li
533.866 52.2563 li
536.048 54.4375 li
538.43 54.4375 li
539.561 53.3071 li
545.188 53.3071 li
546.318 54.4375 li
549.688 54.4375 li
545.481 48.8472 li
545.955 48.4902 li
550.654 54.7339 li
545.955 60.9775 li
545.481 60.6211 li
549.688 55.0308 li
546.318 55.0308 li
545.188 56.1611 li
539.561 56.1611 li
538.43 55.0308 li
536.048 55.0308 li
533.866 57.2114 li
527.994 57.2114 li
530.566 59.7847 li
536.81 59.7847 li
539.316 62.2915 li
546.605 62.2915 li
552.294 54.7339 li
546.605 47.1768 li
cp
558.368 68.7622 mo
568.927 54.7339 li
558.368 40.7061 li
555.896 40.3569 li
551.424 34.4385 li
544.189 34.4385 li
547.483 38.8145 li
551.142 38.8145 li
559.496 49.9146 li
561.763 49.9146 li
561.855 49.9146 561.943 49.9585 561.999 50.0327 cv
565.403 54.5557 li
565.482 54.6611 565.482 54.8066 565.403 54.9121 cv
561.999 59.4351 li
561.943 59.5093 561.855 59.5532 561.763 59.5532 cv
559.496 59.5532 li
551.142 70.6533 li
545.358 70.6533 li
542.064 75.0293 li
551.424 75.0293 li
555.896 69.1108 li
558.368 68.7622 li
cp
559.942 58.9604 mo
561.614 58.9604 li
564.795 54.7339 li
561.614 50.5078 li
559.942 50.5078 li
563.124 54.7339 li
559.942 58.9604 li
cp
534.735 60.3774 mo
536.648 62.2915 li
538.478 62.2915 li
536.564 60.3774 li
534.735 60.3774 li
cp
536.564 49.0903 mo
538.479 47.1768 li
536.649 47.1768 li
534.735 49.0903 li
536.564 49.0903 li
cp
546.741 38.8145 mo
543.447 34.4385 li
542.064 34.4385 li
545.358 38.8145 li
546.741 38.8145 li
cp
530.321 49.0903 mo
533.896 49.0903 li
535.811 47.1768 li
527.278 47.1768 li
525.016 49.4395 li
516.883 49.4395 li
516.883 52.2563 li
527.155 52.2563 li
530.321 49.0903 li
cp
533.896 60.3774 mo
535.811 62.2915 li
527.278 62.2915 li
525.016 60.0283 li
516.883 60.0283 li
516.883 57.2114 li
527.155 57.2114 li
530.321 60.3774 li
533.896 60.3774 li
cp
f
460.655 235.714 mo
462.357 234.12 li
460.655 232.526 li
461.061 232.094 li
462.995 233.904 li
463.055 233.96 463.089 234.038 463.089 234.12 cv
463.089 234.202 463.055 234.281 462.995 234.337 cv
461.061 236.146 li
460.655 235.714 li
cp
463.176 237.869 mo
466.949 234.337 li
467.009 234.281 467.043 234.202 467.043 234.12 cv
467.043 234.038 467.009 233.96 466.949 233.904 cv
463.176 230.372 li
463.176 225.766 li
464.56 227.062 li
464.56 228.64 li
470.779 234.191 li
464.56 239.743 li
464.56 241.307 li
464.56 241.312 464.561 241.315 464.562 241.319 cv
463.176 242.616 li
463.176 237.869 li
cp
472.903 234.19 mo
472.903 234.108 472.869 234.03 472.81 233.974 cv
472.738 233.907 li
472.737 233.906 472.736 233.905 472.735 233.904 cv
469.513 230.887 li
463.176 224.953 li
463.176 222.374 li
463.176 222.292 463.142 222.214 463.081 222.158 cv
460.014 219.285 li
459.608 219.718 li
462.582 222.503 li
462.582 224.397 li
448.247 210.975 li
448.232 210.99 li
448.161 210.96 448.079 210.957 448.004 210.987 cv
447.896 211.032 447.825 211.137 447.822 211.253 cv
447.747 213.892 li
447.745 213.977 447.779 214.059 447.841 214.116 cv
451.05 217.12 li
451.105 217.173 451.179 217.2 451.252 217.2 cv
451.292 217.2 451.332 217.192 451.37 217.176 cv
451.479 217.129 451.549 217.021 451.549 216.903 cv
451.549 214.879 li
462.582 225.21 li
462.582 227.105 li
453.465 218.57 li
453.06 219.003 li
462.582 227.918 li
462.582 230.5 li
462.582 230.582 462.616 230.661 462.676 230.717 cv
466.313 234.12 li
462.676 237.523 li
462.616 237.58 462.582 237.658 462.582 237.74 cv
462.582 240.322 li
453.06 249.238 li
453.465 249.671 li
462.582 241.135 li
462.582 243.172 li
451.549 253.503 li
451.549 251.477 li
451.549 251.358 451.479 251.252 451.37 251.205 cv
451.262 251.157 451.136 251.18 451.05 251.261 cv
447.841 254.265 li
447.779 254.322 447.745 254.404 447.747 254.489 cv
447.822 257.128 li
447.825 257.244 447.896 257.349 448.004 257.394 cv
448.041 257.408 448.08 257.416 448.118 257.416 cv
448.157 257.416 448.196 257.407 448.232 257.392 cv
448.247 257.407 li
462.582 243.984 li
462.582 245.866 li
463.176 245.866 li
463.176 243.429 li
472.81 234.408 li
472.869 234.353 472.903 234.272 472.903 234.19 cv
cp
f
52.7153 252.104 mo
55.1929 250.535 li
56.5498 248.149 li
54.0723 249.719 li
52.7153 252.104 li
cp
58.0117 247.296 mo
56.6548 249.681 li
59.1318 248.112 li
60.4888 245.727 li
58.0117 247.296 li
cp
53.3789 218.469 mo
56.123 218.469 li
47.0757 213.206 li
48.4326 215.592 li
53.3789 218.469 li
cp
61.8457 245.037 mo
60.4888 247.423 li
69.5366 242.16 li
66.792 242.16 li
61.8457 245.037 li
cp
56.0308 224.871 mo
60.8462 222.071 li
59.6567 221.379 li
54.8408 224.179 li
56.0308 224.871 li
cp
42.1421 251.496 mo
42.1421 255.615 li
43.0527 255.085 li
43.0527 250.967 li
42.1421 251.496 li
cp
46.8804 241.833 mo
46.8804 240.307 li
42.8901 242.627 li
42.8901 244.153 li
46.8804 241.833 li
cp
51.2021 240.905 mo
56.2666 237.961 li
53.5894 236.404 li
48.5845 239.315 li
48.5845 240.905 li
51.2021 240.905 li
cp
42.8901 224.099 mo
42.8901 225.755 li
46.8804 228.075 li
46.8804 226.42 li
42.8901 224.099 li
cp
43.0527 213.331 mo
42.1421 212.801 li
42.1421 216.793 li
43.0527 217.322 li
43.0527 213.331 li
cp
51.3623 226.754 mo
59.4941 231.482 li
64.0889 228.811 li
62.8081 228.065 li
60.3438 228.065 li
60.2744 228.025 li
42.1421 217.479 li
42.1421 222.978 li
48.6338 226.754 li
51.3623 226.754 li
cp
57.7666 237.089 mo
55.0898 235.532 li
54.1797 236.062 li
56.8564 237.618 li
57.7666 237.089 li
cp
54.2578 223.84 mo
54.2729 223.826 54.2896 223.813 54.3076 223.803 cv
59.0669 221.036 li
56.0688 219.292 li
53.2988 219.292 li
43.6455 213.676 li
43.6455 217.667 li
54.2578 223.84 li
cp
62.8613 234.126 mo
51.2021 227.347 li
48.5845 227.347 li
48.5845 229.066 li
57.3955 234.191 li
55.6797 235.188 li
58.3569 236.745 li
62.8613 234.126 li
cp
66.8232 236.8 mo
71.3613 234.16 li
66.8232 231.521 li
65.8711 229.847 li
64.6484 229.136 li
64.6245 229.172 64.5928 229.204 64.5527 229.227 cv
60.084 231.825 li
63.6006 233.87 li
63.605 233.872 63.6084 233.876 63.6128 233.879 cv
63.6221 233.885 63.6313 233.891 63.6401 233.898 cv
63.647 233.904 63.6538 233.91 63.6602 233.917 cv
63.667 233.924 63.6738 233.931 63.6802 233.938 cv
63.687 233.946 63.6929 233.955 63.6982 233.964 cv
63.7017 233.969 63.7051 233.973 63.708 233.978 cv
63.71 233.98 63.7109 233.983 63.7124 233.987 cv
63.7173 233.996 63.7217 234.006 63.7256 234.016 cv
63.729 234.024 63.7324 234.033 63.7349 234.042 cv
63.7378 234.051 63.7397 234.06 63.7412 234.069 cv
63.7432 234.079 63.7451 234.088 63.7461 234.098 cv
63.7471 234.107 63.7471 234.116 63.7471 234.126 cv
63.7471 234.136 63.7471 234.146 63.7461 234.154 cv
63.7451 234.164 63.7432 234.174 63.7412 234.184 cv
63.7397 234.192 63.7378 234.201 63.7349 234.211 cv
63.7324 234.22 63.729 234.229 63.7256 234.237 cv
63.7217 234.247 63.7173 234.256 63.7124 234.266 cv
63.7109 234.269 63.71 234.272 63.708 234.275 cv
63.7061 234.278 63.7031 234.281 63.7012 234.284 cv
63.6909 234.3 63.6797 234.314 63.6665 234.329 cv
63.6626 234.333 63.6587 234.338 63.6548 234.342 cv
63.6387 234.356 63.6206 234.371 63.6006 234.383 cv
53.271 240.389 li
57.7544 242.995 li
57.8091 243.027 57.8496 243.074 57.874 243.128 cv
65.8691 238.477 li
66.8232 236.8 li
cp
50.4653 247.438 mo
57.3384 243.439 li
52.6812 240.731 li
51.3623 241.499 li
48.6338 241.499 li
42.1421 245.274 li
42.1421 250.81 li
47.9385 247.438 li
50.4653 247.438 li
cp
81.6836 234.191 mo
69.6196 241.206 li
66.915 241.206 li
43.6455 254.74 li
43.6455 250.621 li
48.0981 248.031 li
50.6255 248.031 li
74.0283 234.417 li
74.0488 234.404 74.0664 234.391 74.0825 234.375 cv
74.0864 234.371 74.0898 234.367 74.0938 234.363 cv
74.1069 234.349 74.1187 234.334 74.1289 234.318 cv
74.1309 234.314 74.1338 234.313 74.1357 234.31 cv
74.1377 234.306 74.1382 234.303 74.1401 234.3 cv
74.145 234.29 74.1489 234.28 74.1533 234.271 cv
74.1567 234.262 74.1602 234.254 74.1626 234.245 cv
74.1655 234.235 74.167 234.227 74.1689 234.218 cv
74.1709 234.208 74.1729 234.198 74.1738 234.188 cv
74.1748 234.179 74.1748 234.17 74.1748 234.16 cv
74.1748 234.151 74.1748 234.142 74.1738 234.132 cv
74.1729 234.122 74.1709 234.113 74.1689 234.104 cv
74.1675 234.094 74.1655 234.085 74.1626 234.075 cv
74.1602 234.066 74.1567 234.059 74.1533 234.05 cv
74.1494 234.04 74.145 234.03 74.1396 234.021 cv
74.1382 234.018 74.1372 234.014 74.1357 234.011 cv
74.1328 234.007 74.1294 234.003 74.1265 233.999 cv
74.1206 233.989 74.1143 233.98 74.1074 233.972 cv
74.1011 233.965 74.0947 233.958 74.0884 233.951 cv
74.0815 233.944 74.0747 233.938 74.0669 233.932 cv
74.0586 233.925 74.0503 233.919 74.041 233.913 cv
74.0366 233.91 74.0332 233.906 74.0283 233.903 cv
62.9678 227.473 li
60.5034 227.473 li
56.6206 225.214 li
61.4365 222.414 li
67.8105 226.121 li
68.8926 228.023 li
73.8389 230.9 li
76.0269 230.9 li
81.6836 234.191 li
cp
f
362.618 252.137 mo
362.671 252.174 362.73 252.191 362.79 252.191 cv
362.883 252.191 362.975 252.147 363.032 252.066 cv
375.705 234.191 li
363.032 216.316 li
362.548 216.659 li
374.978 234.191 li
362.548 251.724 li
362.453 251.856 362.485 252.042 362.618 252.137 cv
cp
397.168 230.771 mo
393.266 225.268 li
387.934 222.911 li
386.644 223.515 li
380.121 220.632 li
379.7 219.271 li
375.364 217.354 li
384.876 230.771 li
397.168 230.771 li
cp
397.984 230.899 mo
397.992 230.91 397.998 230.922 398.004 230.933 cv
398.007 230.939 398.011 230.945 398.014 230.951 cv
398.018 230.96 398.02 230.97 398.022 230.979 cv
398.025 230.988 398.029 230.997 398.031 231.007 cv
398.032 231.014 398.033 231.021 398.033 231.027 cv
398.035 231.04 398.037 231.053 398.037 231.065 cv
398.037 231.066 398.038 231.067 398.038 231.068 cv
398.038 231.075 398.036 231.082 398.036 231.089 cv
398.035 231.101 398.034 231.111 398.032 231.123 cv
398.03 231.133 398.027 231.142 398.024 231.151 cv
398.022 231.16 398.02 231.169 398.017 231.178 cv
398.013 231.188 398.008 231.196 398.003 231.205 cv
397.999 231.213 397.995 231.222 397.99 231.229 cv
397.984 231.237 397.978 231.245 397.972 231.253 cv
397.966 231.261 397.961 231.268 397.954 231.274 cv
397.946 231.282 397.937 231.29 397.928 231.298 cv
397.923 231.302 397.918 231.307 397.913 231.311 cv
397.912 231.311 397.911 231.311 397.91 231.312 cv
397.889 231.327 397.864 231.339 397.838 231.348 cv
397.832 231.35 397.826 231.352 397.82 231.353 cv
397.795 231.36 397.77 231.365 397.742 231.365 cv
397.741 231.365 397.741 231.365 397.741 231.365 cv
397.741 231.365 li
397.741 231.365 li
389.179 231.365 li
390.646 233.435 li
411.741 233.435 li
394.324 225.736 li
397.983 230.897 li
397.983 230.897 397.984 230.898 397.984 230.899 cv
cp
378.694 233.435 mo
386.037 233.435 li
374.306 216.887 li
361.061 211.032 li
371.33 225.518 li
373.081 225.518 li
373.081 225.518 377.133 231.232 378.694 233.435 cv
cp
388.451 231.365 mo
385.297 231.365 li
386.765 233.435 li
389.919 233.435 li
388.451 231.365 li
cp
390.646 234.947 mo
389.179 237.018 li
397.741 237.018 li
397.742 237.018 397.744 237.018 397.745 237.018 cv
397.756 237.018 397.768 237.02 397.779 237.021 cv
397.787 237.022 397.795 237.022 397.804 237.024 cv
397.812 237.025 397.82 237.029 397.829 237.032 cv
397.839 237.035 397.85 237.037 397.858 237.042 cv
397.865 237.044 397.871 237.048 397.877 237.052 cv
397.888 237.058 397.899 237.063 397.91 237.07 cv
397.911 237.071 397.912 237.071 397.913 237.072 cv
397.918 237.076 397.922 237.081 397.928 237.085 cv
397.937 237.092 397.946 237.1 397.954 237.108 cv
397.961 237.114 397.966 237.122 397.972 237.129 cv
397.978 237.137 397.984 237.145 397.99 237.153 cv
397.995 237.161 397.999 237.169 398.003 237.178 cv
398.008 237.187 398.013 237.195 398.017 237.204 cv
398.02 237.213 398.022 237.223 398.024 237.231 cv
398.027 237.24 398.03 237.25 398.032 237.26 cv
398.034 237.271 398.035 237.282 398.036 237.293 cv
398.036 237.3 398.038 237.307 398.038 237.313 cv
398.038 237.315 398.037 237.316 398.037 237.317 cv
398.037 237.33 398.035 237.342 398.033 237.354 cv
398.033 237.361 398.032 237.369 398.031 237.375 cv
398.029 237.385 398.025 237.395 398.022 237.404 cv
398.02 237.413 398.018 237.423 398.014 237.432 cv
398.011 237.438 398.007 237.443 398.004 237.449 cv
397.998 237.461 397.992 237.472 397.984 237.482 cv
397.984 237.483 397.983 237.484 397.983 237.485 cv
394.324 242.646 li
411.741 234.947 li
390.646 234.947 li
cp
378.694 234.947 mo
377.133 237.149 373.081 242.865 373.081 242.865 cv
371.33 242.865 li
361.061 257.35 li
374.306 251.495 li
386.037 234.947 li
378.694 234.947 li
cp
388.606 237.61 mo
388.605 237.61 388.605 237.61 388.604 237.61 cv
388.604 237.61 li
384.876 237.61 li
375.364 251.027 li
379.7 249.11 li
380.121 247.75 li
386.644 244.867 li
387.934 245.472 li
393.266 243.114 li
397.168 237.61 li
388.606 237.61 li
cp
388.452 237.018 mo
385.297 237.018 li
386.765 234.947 li
389.919 234.947 li
388.452 237.018 li
cp
f
221.982 244.582 mo
220.403 242.813 li
220.845 242.417 li
222.425 244.188 li
221.982 244.582 li
cp
220.625 245.794 mo
219.045 244.024 li
219.487 243.629 li
221.067 245.399 li
220.625 245.794 li
cp
219.267 247.006 mo
217.687 245.236 li
218.13 244.841 li
219.709 246.611 li
219.267 247.006 li
cp
217.909 248.218 mo
216.33 246.448 li
216.772 246.053 li
218.352 247.823 li
217.909 248.218 li
cp
216.552 249.43 mo
214.972 247.66 li
215.414 247.265 li
216.994 249.035 li
216.552 249.43 li
cp
215.194 250.642 mo
213.614 248.872 li
214.057 248.477 li
215.637 250.247 li
215.194 250.642 li
cp
213.836 251.854 mo
212.256 250.084 li
212.699 249.688 li
214.279 251.459 li
213.836 251.854 li
cp
212.479 253.065 mo
210.898 251.296 li
211.341 250.9 li
212.921 252.671 li
212.479 253.065 li
cp
209.983 252.113 mo
211.563 253.883 li
211.121 254.277 li
209.541 252.508 li
209.983 252.113 li
cp
211.121 214.104 mo
211.563 214.499 li
209.983 216.269 li
209.541 215.874 li
211.121 214.104 li
cp
212.479 215.315 mo
212.921 215.711 li
211.341 217.48 li
210.898 217.086 li
212.479 215.315 li
cp
213.836 216.527 mo
214.279 216.923 li
212.699 218.692 li
212.256 218.298 li
213.836 216.527 li
cp
215.194 217.739 mo
215.637 218.135 li
214.057 219.904 li
213.614 219.51 li
215.194 217.739 li
cp
216.552 218.951 mo
216.994 219.347 li
215.414 221.116 li
214.972 220.722 li
216.552 218.951 li
cp
217.909 220.163 mo
218.352 220.559 li
216.772 222.328 li
216.33 221.934 li
217.909 220.163 li
cp
219.267 221.375 mo
219.709 221.771 li
218.13 223.54 li
217.687 223.146 li
219.267 221.375 li
cp
220.625 222.587 mo
221.067 222.982 li
219.487 224.752 li
219.045 224.357 li
220.625 222.587 li
cp
221.982 223.799 mo
222.425 224.194 li
220.845 225.964 li
220.403 225.569 li
221.982 223.799 li
cp
198.427 257.552 mo
207.075 257.552 li
207.075 258.145 li
196.872 258.145 li
205.868 250.114 li
209.253 250.114 li
218.832 241.59 li
218.832 239.442 li
209.49 247.783 li
209.094 247.341 li
209.508 246.971 li
223.705 234.297 li
208.56 220.775 li
208.956 220.333 li
218.832 229.151 li
218.832 226.793 li
209.253 218.267 li
205.866 218.267 li
196.872 210.238 li
207.075 210.238 li
207.075 210.831 li
198.427 210.831 li
206.092 217.674 li
209.479 217.674 li
219.425 226.526 li
219.425 229.681 li
224.596 234.297 li
219.425 238.913 li
219.425 241.856 li
209.479 250.707 li
206.094 250.707 li
198.427 257.552 li
cp
227.563 239.507 mo
225.568 241.288 li
221.704 241.288 li
222.493 240.58 li
225.602 237.805 li
227.563 239.507 li
cp
228.02 229.263 mo
233.529 234.181 li
228.009 239.109 li
226.048 237.406 li
229.662 234.181 li
226.06 230.965 li
228.02 229.263 li
cp
225.614 230.566 mo
221.427 226.828 li
225.293 226.828 li
227.574 228.864 li
225.614 230.566 li
cp
227.508 234.136 mo
222.423 238.675 li
222.027 238.233 li
222.162 238.112 li
226.617 234.136 li
221.854 229.883 li
222.249 229.44 li
227.508 234.136 li
cp
213.666 254.605 mo
217.537 254.605 li
215.311 256.593 li
211.439 256.593 li
213.666 254.605 li
cp
217.63 251.066 mo
221.501 251.066 li
219.275 253.055 li
215.403 253.055 li
217.63 251.066 li
cp
221.74 247.397 mo
225.612 247.397 li
223.239 249.516 li
219.368 249.516 li
221.74 247.397 li
cp
215.403 215.327 mo
219.275 215.327 li
221.501 217.315 li
217.63 217.315 li
215.403 215.327 li
cp
217.537 213.776 mo
213.666 213.776 li
211.439 211.788 li
215.311 211.788 li
217.537 213.776 li
cp
223.239 218.866 mo
225.611 220.983 li
221.74 220.983 li
219.368 218.866 li
223.239 218.866 li
cp
241.141 234.258 mo
241.144 234.245 241.145 234.233 241.146 234.221 cv
241.146 234.214 241.147 234.208 241.148 234.201 cv
241.148 234.198 241.149 234.194 241.149 234.19 cv
241.149 234.187 241.148 234.184 241.148 234.18 cv
241.147 234.174 241.146 234.167 241.146 234.161 cv
241.145 234.148 241.144 234.136 241.141 234.124 cv
241.14 234.119 241.138 234.115 241.137 234.111 cv
241.135 234.106 241.134 234.102 241.132 234.097 cv
241.131 234.093 241.131 234.089 241.129 234.085 cv
241.129 234.083 241.127 234.082 241.126 234.08 cv
241.122 234.069 241.117 234.06 241.112 234.05 cv
241.108 234.043 241.105 234.037 241.101 234.031 cv
241.096 234.024 241.092 234.018 241.087 234.011 cv
241.084 234.006 241.08 234.003 241.076 233.998 cv
241.068 233.988 241.06 233.979 241.05 233.97 cv
233.105 226.878 li
231.145 226.878 li
229.132 225.083 li
229.132 223.331 li
226.586 221.059 li
226.586 221.059 li
216.201 211.788 li
216.201 211.788 li
214.966 210.686 li
214.548 210.313 li
214.548 210.313 li
214.463 210.237 li
208.811 210.237 li
209.391 210.755 li
209.391 210.755 li
214.114 214.972 li
214.513 215.327 li
214.513 215.327 li
216.739 217.315 li
216.739 217.315 li
217.589 218.073 li
227.729 227.125 li
235.645 234.19 li
221.429 246.88 li
221.429 246.88 li
218.477 249.516 li
218.477 249.516 li
217.667 250.238 li
214.513 253.055 li
214.513 253.055 li
212.775 254.605 li
212.775 254.605 li
210.548 256.593 li
210.548 256.593 li
210.088 257.004 li
209.391 257.626 li
209.391 257.626 li
208.811 258.145 li
214.463 258.145 li
214.548 258.068 li
214.548 258.068 li
229.132 245.051 li
229.132 243.299 li
231.145 241.503 li
233.105 241.503 li
241.05 234.412 li
241.06 234.403 241.068 234.393 241.076 234.383 cv
241.08 234.379 241.084 234.375 241.087 234.371 cv
241.092 234.364 241.096 234.357 241.101 234.351 cv
241.105 234.344 241.108 234.338 241.112 234.332 cv
241.117 234.321 241.122 234.312 241.126 234.302 cv
241.127 234.3 241.129 234.298 241.129 234.296 cv
241.131 234.293 241.131 234.289 241.132 234.285 cv
241.134 234.28 241.135 234.275 241.137 234.271 cv
241.138 234.266 241.14 234.262 241.141 234.258 cv
cp
f
282.722 215.158 mo
282.721 215.158 301.237 225.928 310.413 231.265 cv
318.4 229.633 li
282.722 215.158 li
cp
f
326.726 234.191 mo
317.457 237.951 li
319.393 238.347 li
325.361 235.926 329.637 234.191 329.637 234.191 cv
319.393 230.035 li
317.457 230.431 li
326.726 234.191 li
cp
f
325.148 234.191 mo
316.408 230.646 li
311.183 231.712 li
313.771 233.218 315.444 234.191 315.444 234.191 cv
311.183 236.67 li
316.407 237.737 li
316.833 237.564 323.059 235.039 325.148 234.191 cv
cp
f
318.4 238.75 mo
310.412 237.118 li
282.721 253.225 li
282.721 253.225 304.521 244.38 318.4 238.75 cv
cp
f
279.299 236.729 mo
283.662 234.191 li
279.299 231.654 li
266.876 234.191 li
279.299 236.729 li
cp
.0862745 .235294 .356863 rgb
f
298.545 234.191 mo
290.315 229.404 li
280.172 231.476 li
284.842 234.191 li
280.172 236.908 li
290.313 238.979 li
298.545 234.191 li
cp
.141176 .47451 .572549 rgb
f
313.429 234.191 mo
301.33 227.154 li
299.423 227.544 li
310.853 234.191 li
299.423 240.84 li
301.33 241.229 li
313.429 234.191 li
cp
.196078 .717647 .784314 rgb
f
309.673 234.191 mo
298.55 227.722 li
291.188 229.226 li
299.725 234.191 li
291.187 239.158 li
298.549 240.661 li
309.673 234.191 li
cp
f
333.936 233.916 mo
309.002 223.802 li
308.779 224.351 li
333.035 234.191 li
308.779 244.031 li
309.002 244.581 li
333.936 234.466 li
334.047 234.421 334.12 234.312 334.12 234.191 cv
334.12 234.07 334.047 233.962 333.936 233.916 cv
cp
.25098 .956863 1 rgb
f
564.063 237.668 mo
561.343 236.744 li
561.262 236.716 561.172 236.725 561.099 236.768 cv
553.25 241.333 li
553.176 241.376 553.124 241.449 553.108 241.533 cv
552.565 244.355 li
531.441 256.643 li
531.441 248.123 li
531.441 248.092 531.437 248.062 531.428 248.032 cv
531.425 248.024 531.42 248.018 531.417 248.01 cv
531.408 247.99 531.4 247.971 531.389 247.953 cv
531.382 247.944 531.374 247.938 531.367 247.931 cv
531.354 247.916 531.342 247.9 531.327 247.889 cv
531.318 247.882 531.308 247.878 531.299 247.872 cv
531.282 247.863 531.268 247.852 531.25 247.845 cv
512.763 240.885 li
512.763 227.495 li
531.25 220.535 li
531.268 220.528 531.282 220.518 531.298 220.508 cv
531.308 220.502 531.318 220.499 531.327 220.492 cv
531.342 220.479 531.354 220.465 531.367 220.45 cv
531.374 220.442 531.382 220.437 531.389 220.428 cv
531.4 220.41 531.408 220.391 531.416 220.371 cv
531.42 220.363 531.425 220.356 531.428 220.348 cv
531.437 220.319 531.441 220.289 531.441 220.258 cv
531.441 211.74 li
552.565 224.025 li
553.108 226.848 li
553.124 226.932 553.176 227.005 553.25 227.048 cv
561.099 231.613 li
561.145 231.64 561.195 231.653 561.247 231.653 cv
561.279 231.653 561.312 231.647 561.343 231.638 cv
564.064 230.714 li
570.042 234.19 li
564.063 237.668 li
cp
553.245 243.96 mo
553.665 241.777 li
561.28 237.349 li
563.384 238.063 li
553.245 243.96 li
cp
563.385 230.318 mo
561.28 231.032 li
553.665 226.604 li
553.245 224.421 li
563.385 230.318 li
cp
570.781 233.934 mo
564.249 230.135 li
564.248 230.134 564.247 230.133 564.246 230.133 cv
552.98 223.58 li
552.979 223.579 552.977 223.578 552.975 223.577 cv
531.294 210.968 li
531.284 210.962 531.272 210.959 531.263 210.955 cv
531.256 210.952 531.251 210.947 531.244 210.944 cv
531.24 210.943 531.237 210.944 531.234 210.943 cv
531.213 210.937 531.192 210.933 531.171 210.931 cv
531.164 210.931 531.157 210.929 531.15 210.929 cv
531.122 210.928 531.094 210.932 531.066 210.938 cv
531.061 210.94 531.055 210.944 531.048 210.946 cv
531.031 210.952 531.014 210.958 530.997 210.968 cv
530.994 210.969 530.992 210.972 530.99 210.974 cv
530.981 210.979 530.974 210.985 530.966 210.991 cv
530.951 211.003 530.937 211.016 530.924 211.029 cv
530.921 211.033 530.917 211.035 530.914 211.039 cv
529.708 212.539 li
529.666 212.592 529.643 212.657 529.643 212.725 cv
529.643 220.507 li
512.361 227.013 li
512.361 227.013 li
510.631 227.664 li
510.515 227.708 510.438 227.818 510.438 227.941 cv
510.438 240.438 li
510.438 240.563 510.515 240.673 510.631 240.716 cv
512.361 241.367 li
529.643 247.874 li
529.643 255.655 li
529.643 255.723 529.666 255.788 529.708 255.841 cv
530.914 257.342 li
530.916 257.344 530.919 257.346 530.921 257.348 cv
530.932 257.36 530.943 257.372 530.956 257.383 cv
530.961 257.388 530.966 257.391 530.972 257.395 cv
530.98 257.401 530.987 257.409 530.997 257.415 cv
531.003 257.418 531.01 257.42 531.017 257.423 cv
531.019 257.424 531.021 257.425 531.024 257.426 cv
531.063 257.443 531.104 257.454 531.146 257.454 cv
531.179 257.454 531.211 257.447 531.242 257.436 cv
531.243 257.436 531.243 257.436 531.244 257.436 cv
531.245 257.436 531.246 257.435 531.247 257.434 cv
531.263 257.428 531.279 257.423 531.294 257.414 cv
552.976 244.804 li
552.977 244.803 552.979 244.802 552.98 244.801 cv
564.246 238.248 li
564.248 238.247 564.25 238.245 564.252 238.244 cv
570.781 234.446 li
570.872 234.394 570.929 234.296 570.929 234.19 cv
570.929 234.085 570.872 233.986 570.781 233.934 cv
cp
f
549.856 239.075 mo
558.255 234.19 li
549.856 229.305 li
549.844 229.24 li
535.1 220.665 li
535.1 222.994 li
528.828 225.354 li
528.828 243.025 li
535.1 245.387 li
535.1 247.716 li
549.844 239.141 li
549.856 239.075 li
cp
f
549.289 226.351 mo
535.1 218.099 li
535.1 219.979 li
549.695 228.468 li
549.289 226.351 li
cp
f
535.1 250.283 mo
549.289 242.029 li
549.695 239.913 li
535.1 248.401 li
535.1 250.283 li
cp
f
516.421 238.354 mo
518.488 239.133 li
518.488 229.248 li
516.421 230.026 li
516.421 238.354 li
cp
.113725 .356863 .462745 rgb
f
520.557 239.911 mo
522.624 240.69 li
522.624 227.691 li
520.557 228.47 li
520.557 239.911 li
cp
.168627 .596078 .678431 rgb
f
524.691 241.469 mo
526.76 242.247 li
526.76 226.134 li
524.691 226.912 li
524.691 241.469 li
cp
.223529 .835294 .894118 rgb
f
551.242 227.758 mo
550.944 228.271 li
561.116 234.19 li
550.944 240.109 li
551.242 240.622 li
562.295 234.19 li
551.242 227.758 li
cp
.25098 .956863 1 rgb
f
121.255 234.191 mo
111.386 247.302 li
111.386 247.358 li
111.343 247.358 li
110.711 248.197 li
121.711 248.197 li
132.255 234.191 li
121.711 220.184 li
110.711 220.184 li
111.345 221.025 li
111.386 221.025 li
111.386 221.08 li
121.255 234.191 li
cp
.0862745 .235294 .356863 rgb
f
122.454 248.197 mo
133.453 248.197 li
143.995 234.191 li
133.453 220.184 li
122.453 220.184 li
132.998 234.191 li
122.454 248.197 li
cp
.129412 .415686 .517647 rgb
f
145.193 248.197 mo
155.737 234.191 li
145.193 220.184 li
134.195 220.184 li
144.737 234.191 li
134.195 248.197 li
145.193 248.197 li
cp
.168627 .596078 .678431 rgb
f
145.935 248.197 mo
156.935 248.197 li
167.477 234.191 li
156.935 220.184 li
145.935 220.184 li
156.479 234.191 li
145.935 248.197 li
cp
.211765 .776471 .839216 rgb
f
174.514 234.014 mo
171.754 230.347 li
167.058 230.347 li
169.952 234.191 li
167.058 238.036 li
171.754 238.036 li
174.514 234.37 li
174.594 234.265 174.594 234.119 174.514 234.014 cv
cp
.25098 .956863 1 rgb
f
166.44 242.998 mo
163.611 246.756 li
163.86 248.523 li
168.208 242.749 li
166.44 242.998 li
cp
f
163.611 221.627 mo
166.44 225.386 li
168.208 225.635 li
163.86 219.859 li
163.611 221.627 li
cp
f
166.611 238.63 mo
157.92 250.176 li
106.842 250.176 li
108.962 247.358 li
106.243 247.358 li
104.033 250.294 li
103.965 250.383 103.955 250.504 104.005 250.604 cv
104.055 250.705 104.158 250.769 104.27 250.769 cv
106.155 250.769 li
106.247 250.769 li
158.068 250.769 li
162.022 250.769 li
162.116 250.769 162.204 250.725 162.259 250.65 cv
163.356 249.194 li
162.989 246.596 li
166.114 242.445 li
168.712 242.078 li
171.308 238.63 li
166.611 238.63 li
cp
f
108.963 221.025 mo
106.842 218.207 li
157.92 218.207 li
166.611 229.753 li
171.308 229.753 li
168.712 226.306 li
166.114 225.938 li
162.989 221.787 li
163.356 219.188 li
162.259 217.732 li
162.204 217.657 162.116 217.614 162.022 217.614 cv
158.068 217.614 li
106.247 217.614 li
106.155 217.614 li
104.27 217.614 li
104.158 217.614 104.055 217.678 104.005 217.778 cv
103.955 217.879 103.965 217.999 104.033 218.089 cv
106.244 221.025 li
108.963 221.025 li
cp
f
109.409 246.766 mo
111.67 243.762 li
108.95 243.762 li
106.689 246.766 li
109.409 246.766 li
cp
f
111.67 224.622 mo
109.409 221.618 li
106.69 221.618 li
108.951 224.622 li
111.67 224.622 li
cp
f
112.116 243.168 mo
118.739 234.37 li
118.818 234.265 118.818 234.119 118.739 234.014 cv
112.117 225.216 li
109.397 225.216 li
116.154 234.191 li
109.396 243.168 li
112.116 243.168 li
cp
f
550.129 140.056 mo
550.243 142.076 li
557.604 145.563 li
545.769 144.468 li
547.31 138.72 li
550.129 140.056 li
cp
545.014 144.994 mo
566.047 146.938 li
550.092 139.381 li
550.092 139.381 li
546.921 137.879 li
545.014 144.994 li
cp
f
537.3 138.756 mo
538.031 138.957 li
539.289 134.264 li
538.593 133.934 li
537.3 138.756 li
cp
f
538.604 139.113 mo
544.968 140.855 li
545.897 137.394 li
539.834 134.522 li
538.604 139.113 li
cp
f
525.717 135.586 mo
536.728 138.6 li
538.048 133.676 li
534.015 131.765 li
531.646 132.799 li
524.805 129.558 li
521.519 130.678 li
525.717 135.586 li
cp
f
534.094 142.994 mo
539.022 143.449 li
539.913 144.521 li
543.885 144.889 li
544.814 141.428 li
533.415 138.308 li
531.909 139.679 li
527.261 138.407 li
525.016 135.716 li
524.997 135.693 524.988 135.668 524.984 135.643 cv
520.915 130.884 li
514.906 132.933 li
523.521 143.005 li
533.021 143.884 li
534.094 142.994 li
cp
f
527.251 129.011 mo
526.996 129.546 li
531.053 131.468 li
531.307 130.932 li
527.251 129.011 li
cp
f
544.968 154.432 mo
538.604 156.173 li
539.834 160.765 li
545.897 157.893 li
544.968 154.432 li
cp
f
536.728 156.687 mo
525.717 159.7 li
521.519 164.608 li
524.805 165.729 li
531.646 162.487 li
534.015 163.521 li
538.048 161.611 li
536.728 156.687 li
cp
f
524.984 159.644 mo
524.988 159.618 524.997 159.593 525.016 159.571 cv
527.261 156.879 li
531.909 155.607 li
533.415 156.979 li
544.814 153.859 li
543.885 150.397 li
539.913 150.765 li
539.022 151.837 li
534.094 152.293 li
533.021 151.402 li
523.521 152.281 li
514.906 162.354 li
520.915 164.402 li
524.984 159.644 li
cp
f
538.031 156.33 mo
537.3 156.53 li
538.593 161.353 li
539.289 161.023 li
538.031 156.33 li
cp
f
531.307 164.354 mo
531.053 163.818 li
526.996 165.74 li
527.251 166.276 li
531.307 164.354 li
cp
f
545.769 150.818 mo
557.604 149.724 li
550.243 153.211 li
550.129 155.231 li
547.31 156.567 li
545.769 150.818 li
cp
559.166 148.984 mo
545.014 150.292 li
546.921 157.407 li
566.047 148.348 li
559.166 148.984 li
559.166 148.984 li
cp
f
520.667 143.739 mo
518.652 143.565 li
520.909 147.643 li
518.652 151.721 li
520.667 151.547 li
522.828 147.643 li
520.667 143.739 li
cp
.0862745 .235294 .356863 rgb
f
540.316 148.76 mo
541.896 149.717 li
565.951 147.643 li
541.896 145.569 li
540.316 146.526 li
528.222 145.487 li
526.958 144.282 li
521.379 143.8 li
523.427 147.5 li
523.476 147.589 523.476 147.697 523.427 147.787 cv
521.379 151.486 li
526.958 151.005 li
528.222 149.8 li
540.316 148.76 li
cp
f
471.489 152.499 mo
468.373 152.557 li
466.813 153.887 li
469.93 153.829 li
471.489 152.499 li
cp
468.436 155.101 mo
465.319 155.159 li
463.76 156.489 li
466.876 156.431 li
468.436 155.101 li
cp
474.543 149.897 mo
471.427 149.955 li
469.867 151.285 li
472.983 151.227 li
474.543 149.897 li
cp
451.013 167.35 mo
454.129 167.292 li
465.271 157.799 li
462.153 157.857 li
451.013 167.35 li
cp
453.427 160.303 mo
455.177 158.812 li
454.792 158.36 li
453.042 159.852 li
453.427 160.303 li
cp
466.813 141.4 mo
468.373 142.729 li
471.489 142.788 li
469.93 141.458 li
466.813 141.4 li
cp
463.76 138.798 mo
465.319 140.127 li
468.436 140.186 li
466.876 138.856 li
463.76 138.798 li
cp
472.983 144.06 mo
469.867 144.002 li
471.427 145.332 li
474.543 145.39 li
472.983 144.06 li
cp
451.013 127.937 mo
462.153 137.43 li
465.271 137.488 li
454.129 127.995 li
451.013 127.937 li
cp
467.077 131.063 mo
466.076 130.211 li
463.836 132.451 li
464.837 133.304 li
467.077 131.063 li
cp
446.721 124.348 mo
454.192 124.348 li
452.809 122.964 li
448.104 122.964 li
446.721 124.348 li
cp
463.384 132.065 mo
461.068 130.092 li
461.068 128.338 li
457.078 124.938 li
454.029 124.938 li
454.033 124.941 li
443.536 124.941 li
441.369 126.643 li
441.316 126.684 441.252 126.706 441.186 126.706 cv
437.336 126.706 li
435.169 128.408 li
435.116 128.449 435.052 128.471 434.985 128.471 cv
431.822 128.471 li
431.696 128.471 431.583 128.391 431.542 128.272 cv
431.501 128.152 431.54 128.02 431.639 127.941 cv
436.135 124.411 li
436.187 124.37 436.251 124.348 436.317 124.348 cv
439.481 124.348 li
439.481 124.941 li
436.42 124.941 li
432.681 127.878 li
434.883 127.878 li
437.05 126.176 li
437.103 126.135 437.167 126.113 437.233 126.113 cv
441.083 126.113 li
443.25 124.411 li
443.251 124.412 li
443.302 124.373 443.364 124.348 443.434 124.348 cv
445.882 124.348 li
447.771 122.458 li
447.827 122.402 447.903 122.371 447.981 122.371 cv
452.932 122.371 li
453.01 122.371 453.086 122.402 453.141 122.458 cv
455.031 124.348 li
455.132 124.348 li
459.086 124.348 li
459.156 124.348 459.225 124.373 459.278 124.418 cv
465.623 129.825 li
463.384 132.065 li
cp
438.938 166.815 mo
438.938 167.408 li
448.234 167.408 li
448.305 167.408 448.372 167.383 448.426 167.337 cv
471.273 147.869 li
471.34 147.813 471.378 147.73 471.378 147.643 cv
471.378 147.557 471.34 147.474 471.273 147.417 cv
448.426 127.949 li
448.372 127.903 448.305 127.878 448.234 127.878 cv
438.938 127.878 li
438.938 128.471 li
448.125 128.471 li
470.624 147.643 li
448.125 166.815 li
438.938 166.815 li
cp
455.177 136.475 mo
453.427 134.983 li
453.042 135.435 li
454.792 136.926 li
455.177 136.475 li
cp
456.998 157.26 mo
468.019 147.869 li
468.085 147.813 468.123 147.73 468.123 147.643 cv
468.123 147.557 468.085 147.474 468.019 147.417 cv
456.998 138.027 li
456.613 138.478 li
467.369 147.643 li
456.613 156.808 li
456.998 157.26 li
cp
454.192 170.938 mo
446.721 170.938 li
448.104 172.323 li
452.809 172.323 li
454.192 170.938 li
cp
465.623 165.461 mo
459.278 170.868 li
459.225 170.914 459.156 170.938 459.086 170.938 cv
455.132 170.938 li
455.031 170.938 li
453.141 172.829 li
453.086 172.884 453.01 172.916 452.932 172.916 cv
447.981 172.916 li
447.903 172.916 447.827 172.884 447.771 172.829 cv
445.882 170.938 li
443.434 170.938 li
443.364 170.938 443.302 170.914 443.251 170.875 cv
443.25 170.875 li
441.083 169.173 li
437.233 169.173 li
437.167 169.173 437.103 169.151 437.05 169.11 cv
434.883 167.408 li
432.681 167.408 li
436.42 170.346 li
439.481 170.346 li
439.481 170.938 li
436.317 170.938 li
436.251 170.938 436.187 170.917 436.135 170.875 cv
431.639 167.345 li
431.54 167.267 431.501 167.134 431.542 167.015 cv
431.583 166.895 431.696 166.815 431.822 166.815 cv
434.985 166.815 li
435.052 166.815 435.116 166.837 435.169 166.878 cv
437.336 168.581 li
441.186 168.581 li
441.252 168.581 441.316 168.603 441.369 168.644 cv
443.536 170.346 li
454.033 170.346 li
454.029 170.349 li
457.078 170.349 li
461.068 166.949 li
461.068 165.194 li
463.383 163.222 li
465.623 165.461 li
cp
472.709 157.627 mo
472.715 157.549 472.752 157.476 472.812 157.425 cv
478.605 152.489 li
478.617 152.474 478.63 152.46 478.645 152.448 cv
484.283 147.643 li
478.645 142.838 li
478.63 142.826 478.617 142.813 478.605 142.798 cv
472.812 137.861 li
472.752 137.81 472.715 137.737 472.709 137.659 cv
472.555 135.731 li
467.529 131.45 li
465.29 133.689 li
481.665 147.643 li
465.29 161.597 li
467.529 163.837 li
472.555 159.555 li
472.709 157.627 li
cp
478.483 153.372 mo
473.29 157.797 li
473.193 159.011 li
478.387 154.585 li
478.483 153.372 li
cp
464.837 161.983 mo
463.836 162.835 li
466.076 165.076 li
467.077 164.223 li
464.837 161.983 li
cp
473.193 136.275 mo
478.387 140.701 li
478.483 141.915 li
473.29 137.489 li
473.193 136.275 li
cp
.25098 .956863 1 rgb
f
307.268 163.003 mo
309.776 163.003 li
321.338 147.642 li
318.631 144.114 li
316.081 143.993 li
312.179 138.809 li
303.807 127.645 li
311.644 127.645 li
315.582 132.878 li
318.117 132.878 li
329.23 147.644 li
324.201 154.327 li
321.635 154.449 li
315.584 162.46 li
315.563 162.476 315.546 162.493 315.53 162.514 cv
311.67 167.642 li
303.776 167.642 li
307.268 163.003 li
cp
318.695 147.823 mo
318.774 147.717 318.774 147.571 318.695 147.466 cv
316.544 144.608 li
318.327 144.693 li
320.593 147.646 li
309.48 162.41 li
307.714 162.41 li
318.695 147.823 li
cp
316.666 130.792 mo
314.755 130.792 li
312.386 127.645 li
314.297 127.645 li
316.666 130.792 li
cp
317.79 132.285 mo
315.878 132.285 li
315.201 131.386 li
317.113 131.386 li
317.79 132.285 li
cp
316.614 164.563 mo
316.097 162.765 li
321.935 155.035 li
323.787 155.035 li
316.614 164.563 li
cp
329.958 147.466 mo
314.683 127.17 li
314.626 127.096 314.538 127.052 314.445 127.052 cv
303.182 127.052 li
303.069 127.052 302.967 127.116 302.917 127.216 cv
302.866 127.317 302.877 127.437 302.945 127.527 cv
311.679 139.131 li
315.759 144.571 li
315.774 144.572 li
318.087 147.644 li
306.972 162.41 li
306.945 162.41 li
302.945 167.726 li
302.903 167.781 302.885 167.846 302.887 167.91 cv
302.882 167.964 302.892 168.02 302.917 168.07 cv
302.967 168.171 303.069 168.234 303.182 168.234 cv
311.818 168.234 li
314.293 168.234 li
314.445 168.234 li
314.538 168.234 314.626 168.191 314.683 168.116 cv
329.958 147.823 li
330.038 147.717 330.038 147.571 329.958 147.466 cv
cp
f
320.209 153.547 mo
320.769 152.808 li
321.693 152.764 li
323.333 152.685 li
327.129 147.644 li
317.278 134.56 li
314.744 134.56 li
314.151 133.771 li
310.806 129.326 li
307.145 129.326 li
313.768 138.126 li
316.948 142.351 li
318.573 142.428 li
319.489 142.474 li
320.047 143.199 li
322.534 146.439 li
323.449 147.632 li
322.546 148.834 li
311.207 163.896 li
310.614 164.684 li
308.105 164.684 li
307.145 165.961 li
310.833 165.961 li
320.209 153.547 li
cp
.0862745 .235294 .356863 rgb
f
297.582 167.642 mo
295.791 167.642 li
301.915 159.483 li
303.724 159.483 li
297.582 167.642 li
cp
301.979 147.823 mo
302.06 147.717 302.06 147.571 301.979 147.466 cv
287.061 127.645 li
295.106 127.645 li
303.392 138.649 li
303.445 138.719 303.526 138.763 303.614 138.767 cv
306.04 138.882 li
311.249 145.802 li
311.774 146.5 312.254 147.138 312.635 147.644 cv
309.634 151.631 304.861 157.952 304.153 158.89 cv
301.767 158.89 li
301.673 158.89 301.585 158.934 301.529 159.008 cv
295.049 167.642 li
287.062 167.642 li
301.979 147.823 li
cp
313.303 147.644 mo
313.303 147.582 313.283 147.519 313.243 147.466 cv
311.33 144.925 306.437 138.42 306.433 138.415 cv
306.433 138.415 306.433 138.415 306.432 138.414 cv
297.967 127.17 li
297.965 127.167 297.962 127.166 297.959 127.163 cv
297.903 127.093 297.82 127.052 297.73 127.052 cv
286.467 127.052 li
286.354 127.052 286.251 127.116 286.202 127.216 cv
286.151 127.317 286.162 127.437 286.23 127.527 cv
301.372 147.644 li
286.23 167.76 li
286.162 167.85 286.151 167.97 286.202 168.07 cv
286.251 168.171 286.354 168.234 286.467 168.234 cv
297.73 168.234 li
297.823 168.234 297.911 168.191 297.967 168.116 cv
313.243 147.823 li
313.283 147.77 313.303 147.707 313.303 147.644 cv
cp
.211765 .776471 .839216 rgb
f
300.185 158 mo
300.778 157.209 li
303.204 157.209 li
310.404 147.644 li
305.041 140.518 li
303.534 140.445 li
302.606 140.401 li
302.049 139.66 li
294.268 129.326 li
290.301 129.326 li
304.09 147.644 li
290.301 165.961 li
294.208 165.961 li
300.185 158 li
cp
.0823529 .2 .309804 rgb
f
280.612 167.642 mo
278.88 167.642 li
280.072 166.058 li
281.804 166.058 li
280.612 167.642 li
cp
281.701 163.894 mo
288.44 154.94 li
290.188 154.92 li
283.433 163.894 li
281.701 163.894 li
cp
281.254 164.487 mo
282.987 164.487 li
282.25 165.465 li
280.519 165.465 li
281.254 164.487 li
cp
285.01 147.823 mo
285.089 147.717 285.089 147.571 285.01 147.466 cv
270.091 127.645 li
278.078 127.645 li
281.927 132.76 li
281.983 132.834 282.071 132.878 282.165 132.878 cv
284.551 132.878 li
288.837 138.573 li
295.665 147.644 li
292.158 152.303 li
290.639 154.321 li
288.288 154.349 li
288.196 154.35 288.11 154.394 288.055 154.467 cv
278.138 167.642 li
270.091 167.642 li
285.01 147.823 li
cp
284.104 132.285 mo
282.313 132.285 li
278.82 127.645 li
280.612 127.645 li
284.104 132.285 li
cp
296.333 147.644 mo
296.333 147.582 296.313 147.519 296.273 147.466 cv
288.954 137.742 li
280.997 127.17 li
280.941 127.096 280.854 127.052 280.76 127.052 cv
269.497 127.052 li
269.384 127.052 269.282 127.116 269.231 127.216 cv
269.181 127.317 269.192 127.437 269.26 127.527 cv
284.402 147.644 li
269.26 167.76 li
269.192 167.85 269.181 167.97 269.231 168.07 cv
269.282 168.171 269.384 168.234 269.497 168.234 cv
280.76 168.234 li
280.854 168.234 280.941 168.191 280.997 168.116 cv
296.273 147.823 li
296.313 147.77 296.333 147.707 296.333 147.644 cv
cp
.168627 .596078 .678431 rgb
f
286.711 153.456 mo
287.296 152.679 li
288.269 152.669 li
289.792 152.651 li
289.793 152.651 li
293.562 147.644 li
283.712 134.56 li
281.177 134.56 li
280.584 133.771 li
277.241 129.326 li
273.458 129.326 li
287.247 147.644 li
273.46 165.961 li
277.3 165.961 li
286.711 153.456 li
cp
.0784314 .160784 .258824 rgb
f
213.786 158.776 mo
212.337 159.621 li
214.655 160.752 li
215.919 160.017 li
213.786 158.776 li
cp
233.535 147.599 mo
233.535 147.599 li
233.535 147.599 li
cp
220.913 152.747 mo
225.112 150.305 li
225.158 150.278 225.209 150.264 225.261 150.264 cv
228.362 150.264 li
231.372 148.514 li
208.612 135.276 li
205.656 135.276 li
205.604 135.276 205.553 135.262 205.507 135.236 cv
195.386 129.349 li
195.341 129.323 195.303 129.285 195.277 129.24 cv
193.722 126.505 li
193.656 126.389 193.676 126.242 193.771 126.148 cv
193.866 126.054 194.013 126.034 194.129 126.102 cv
208.951 134.724 li
209.005 134.755 209.045 134.802 209.07 134.856 cv
217.256 139.617 li
219.222 139.617 li
207.271 132.666 li
207.42 132.41 li
207.569 132.154 li
233.684 147.342 li
233.684 147.342 li
233.684 147.342 li
235.256 148.258 li
235.347 148.311 235.403 148.409 235.403 148.515 cv
235.403 148.62 235.347 148.718 235.255 148.771 cv
233.698 149.676 li
233.692 149.68 233.687 149.683 233.682 149.686 cv
216.509 159.673 li
214.375 158.433 li
219.319 155.549 li
220.913 152.747 li
cp
222.265 161.979 mo
221.346 163.596 li
229.844 158.643 li
227.985 158.643 li
222.265 161.979 li
cp
233.74 151.692 mo
230.568 153.537 li
230.559 153.542 230.55 153.548 230.542 153.554 cv
211.828 164.438 li
211.711 164.506 211.655 164.643 211.69 164.772 cv
211.725 164.901 211.842 164.991 211.977 164.991 cv
215.28 164.991 li
215.333 164.991 215.384 164.978 215.429 164.951 cv
227.937 157.676 li
231.16 157.676 li
231.212 157.676 231.264 157.662 231.309 157.636 cv
237.635 153.957 li
233.74 151.692 li
cp
246.551 148.258 mo
244.9 147.297 li
244.9 147.297 li
243.247 146.336 li
243.247 146.336 243.246 146.336 243.245 146.335 cv
238.544 143.601 li
236.227 143.601 li
226.105 137.714 li
224.96 135.7 li
219.897 132.755 li
216.006 135.021 li
239.206 148.515 li
238.015 149.208 li
238.008 149.211 238.001 149.215 237.994 149.219 cv
234.33 151.35 li
238.225 153.614 li
243.249 150.692 li
243.258 150.687 243.267 150.682 243.275 150.675 cv
243.315 150.652 li
244.899 149.731 li
244.9 149.731 li
244.9 149.731 li
246.551 148.771 li
246.642 148.717 246.698 148.62 246.698 148.514 cv
246.698 148.409 246.642 148.311 246.551 148.258 cv
cp
202.606 169.802 mo
207.089 169.802 li
209.221 168.562 li
204.738 168.562 li
202.606 169.802 li
cp
206.716 167.412 mo
211.198 167.412 li
213.331 166.171 li
208.848 166.171 li
206.716 167.412 li
cp
198.497 172.191 mo
202.98 172.191 li
205.112 170.952 li
200.629 170.952 li
198.497 172.191 li
cp
219.308 132.413 mo
216.736 130.917 li
216.691 130.891 216.64 130.876 216.587 130.876 cv
213.365 130.876 li
200.058 123.135 li
199.942 123.067 199.795 123.086 199.7 123.181 cv
199.604 123.275 199.584 123.421 199.65 123.538 cv
201.284 126.411 li
201.31 126.456 201.347 126.494 201.393 126.521 cv
215.416 134.677 li
219.308 132.413 li
cp
192.569 171.769 mo
192.56 171.754 li
192.25 171.935 li
192.203 171.961 192.152 171.975 192.101 171.975 cv
192.024 171.975 191.949 171.945 191.892 171.889 cv
191.797 171.794 191.776 171.648 191.843 171.531 cv
193.398 168.797 li
193.424 168.751 193.461 168.713 193.507 168.688 cv
203.886 162.65 li
207.144 162.65 li
211.721 159.98 li
214.038 161.111 li
205.273 166.208 li
205.228 166.235 205.176 166.249 205.124 166.249 cv
202.06 166.249 li
192.569 171.769 li
cp
.25098 .956863 1 rgb
f
149.05 152.587 mo
147.748 152.422 li
139.613 159.674 li
139.572 159.711 139.542 159.759 139.526 159.812 cv
137.813 165.691 li
133.277 169.733 li
136.9 157.297 li
147.484 147.866 li
147.547 147.81 147.583 147.729 147.583 147.644 cv
147.583 147.56 147.547 147.479 147.484 147.423 cv
136.901 137.99 li
133.277 125.553 li
137.813 129.596 li
139.526 135.476 li
139.542 135.53 139.572 135.578 139.613 135.615 cv
147.748 142.866 li
149.05 142.701 li
154.596 147.643 li
153.118 147.643 li
153.12 147.645 li
153.119 147.645 li
154.596 147.645 li
149.05 152.587 li
cp
140.449 163.341 mo
138.647 164.947 li
140.071 160.06 li
141.874 158.454 li
140.449 163.341 li
cp
130.122 147.866 mo
130.185 147.81 130.221 147.729 130.221 147.644 cv
130.221 147.56 130.185 147.479 130.122 147.423 cv
120.056 138.451 li
136.527 138.451 li
146.841 147.644 li
136.527 156.835 li
120.056 156.835 li
130.122 147.866 li
cp
140.449 131.946 mo
141.874 136.835 li
140.071 135.229 li
138.646 130.339 li
140.449 131.946 li
cp
158.805 147.644 mo
158.805 147.56 158.769 147.479 158.706 147.423 cv
153.408 142.701 li
152.39 142.701 li
147.206 138.137 li
146.832 136.84 li
132.901 124.423 li
132.802 124.335 132.657 124.323 132.545 124.394 cv
132.433 124.465 132.382 124.601 132.419 124.728 cv
136.245 137.858 li
119.278 137.858 li
119.155 137.858 119.044 137.934 119 138.049 cv
118.957 138.164 118.988 138.294 119.08 138.375 cv
129.479 147.644 li
119.08 156.911 li
118.988 156.993 118.957 157.123 119 157.238 cv
119.044 157.353 119.155 157.429 119.278 157.429 cv
136.245 157.429 li
132.419 170.559 li
132.382 170.686 132.433 170.822 132.545 170.893 cv
132.594 170.923 132.649 170.938 132.703 170.938 cv
132.774 170.938 132.845 170.913 132.901 170.863 cv
140.906 163.729 li
140.906 163.728 140.907 163.728 140.907 163.728 cv
146.833 158.447 li
147.206 157.151 li
152.39 152.587 li
153.407 152.587 li
158.706 147.866 li
158.769 147.81 158.805 147.729 158.805 147.645 cv
158.805 147.645 li
158.805 147.645 158.805 147.645 158.805 147.644 cv
cp
f
131.319 140.131 mo
129.035 140.131 li
137.463 147.645 li
129.036 155.155 li
131.319 155.155 li
139.747 147.645 li
131.319 140.131 li
cp
.129412 .415686 .517647 rgb
f
126.751 140.131 mo
124.467 140.131 li
132.896 147.645 li
124.468 155.155 li
126.751 155.155 li
135.18 147.645 li
126.751 140.131 li
cp
.0862745 .235294 .356863 rgb
f
144.315 147.644 mo
135.887 140.131 li
133.603 140.131 li
142.031 147.645 li
133.604 155.155 li
135.887 155.155 li
144.315 147.644 li
cp
.168627 .596078 .678431 rgb
f
152.491 147.643 mo
148.653 144.223 li
149.458 145.865 li
150.33 147.644 li
149.457 149.425 li
148.653 151.064 li
152.489 147.645 li
152.491 147.644 li
152.491 147.643 li
cp
.129412 .415686 .517647 rgb
f
60.7007 146.069 mo
63.4497 144.47 li
53.2827 138.556 li
51.0815 140.474 li
60.7007 146.069 li
cp
.0862745 .235294 .356863 rgb
f
44.6558 158.55 mo
44.6558 161.749 li
52.71 157.063 li
50.5088 155.146 li
44.6558 158.55 li
cp
f
65.2407 151.172 mo
65.3418 151.207 li
71.4688 147.644 li
65.3398 144.079 li
65.2476 144.11 li
59.1729 147.644 li
65.2407 151.172 li
cp
f
51.0503 154.831 mo
53.2515 156.749 li
63.4487 150.816 li
60.7002 149.218 li
51.0503 154.831 li
cp
f
52.7412 138.241 mo
44.6558 133.539 li
44.6558 136.736 li
50.54 140.159 li
52.7412 138.241 li
cp
f
60.1104 148.875 mo
57.9927 147.644 li
60.1108 146.412 li
44.6558 137.422 li
44.6558 140.306 li
46.5889 141.99 li
46.5889 153.286 li
44.6558 154.97 li
44.6558 157.864 li
60.1104 148.875 li
cp
f
38.0332 160.299 mo
38.0332 134.987 li
39.4165 133.782 li
39.4165 147.643 li
39.4165 147.644 li
39.4165 161.504 li
38.0332 160.299 li
cp
39.563 165.226 mo
39.6094 165.253 39.6611 165.267 39.7129 165.267 cv
39.7627 165.267 39.8125 165.254 39.8579 165.229 cv
41.835 164.124 li
41.9287 164.071 41.9868 163.972 41.9868 163.865 cv
41.9868 147.644 li
41.9868 147.643 li
41.9868 131.422 li
41.9868 131.314 41.9287 131.215 41.835 131.163 cv
39.8579 130.058 li
39.7656 130.006 39.6538 130.007 39.563 130.061 cv
39.4722 130.114 39.4165 130.211 39.4165 130.316 cv
39.4165 132.996 li
37.542 134.628 li
37.4771 134.685 37.4404 134.767 37.4404 134.852 cv
37.4404 160.435 li
37.4404 160.52 37.4771 160.602 37.542 160.658 cv
39.4165 162.291 li
39.4165 164.97 li
39.4165 165.075 39.4722 165.172 39.563 165.226 cv
cp
.25098 .956863 1 rgb
f
46.4399 168.664 mo
46.7378 169.176 li
54.48 164.673 li
54.1816 164.161 li
46.4399 168.664 li
cp
f
54.48 130.613 mo
46.7378 126.11 li
46.4399 126.623 li
54.1816 131.125 li
54.48 130.613 li
cp
f
79.4819 147.387 mo
67.0469 140.154 li
66.9575 140.102 66.8477 140.105 66.7568 140.154 cv
64.0801 141.063 li
49.1499 132.379 li
48.7285 130.186 li
64.5625 139.396 li
64.8608 138.883 li
39.9404 124.388 li
39.9214 124.42 li
39.8584 124.385 li
39.7666 124.334 39.6543 124.335 39.564 124.389 cv
39.4731 124.442 39.4175 124.539 39.4175 124.645 cv
39.4175 128.33 li
39.4175 128.438 39.4756 128.537 39.5693 128.589 cv
41.5464 129.694 li
41.5913 129.719 41.6411 129.731 41.6909 129.731 cv
41.7427 129.731 41.7949 129.718 41.8408 129.691 cv
41.9316 129.638 41.9873 129.541 41.9873 129.435 cv
41.9873 126.265 li
48.0483 129.79 li
48.5928 132.623 li
48.6094 132.708 48.6611 132.78 48.7349 132.824 cv
63.8984 141.643 li
63.9727 141.686 64.0615 141.695 64.1431 141.667 cv
66.8745 140.74 li
78.7432 147.643 li
66.8745 154.546 li
64.1431 153.619 li
64.0615 153.591 63.9727 153.6 63.8984 153.644 cv
48.7349 162.463 li
48.6611 162.506 48.6094 162.579 48.5928 162.663 cv
48.0483 165.497 li
41.9873 169.021 li
41.9873 165.852 li
41.9873 165.746 41.9316 165.649 41.8408 165.596 cv
41.7505 165.542 41.6382 165.542 41.5464 165.593 cv
39.5693 166.697 li
39.4756 166.75 39.4175 166.849 39.4175 166.957 cv
39.4175 170.642 li
39.4175 170.748 39.4731 170.845 39.564 170.898 cv
39.6099 170.925 39.6621 170.938 39.7139 170.938 cv
39.7637 170.938 39.8135 170.926 39.8584 170.901 cv
39.9214 170.866 li
39.9404 170.898 li
41.8325 169.798 li
41.8354 169.796 li
41.8359 169.796 41.8359 169.796 41.8359 169.796 cv
64.8608 156.404 li
64.5625 155.891 li
48.7285 165.101 li
49.1499 162.908 li
64.0801 154.224 li
66.7388 155.126 li
66.7427 155.129 66.7461 155.131 66.7495 155.133 cv
66.8418 155.186 66.9551 155.186 67.0469 155.132 cv
79.4819 147.9 li
79.5732 147.847 79.6294 147.749 79.6294 147.643 cv
79.6294 147.538 79.5732 147.44 79.4819 147.387 cv
cp
f
66.7485 152.296 mo
67.0469 152.809 li
75.4873 147.899 li
75.5786 147.847 75.6348 147.749 75.6348 147.643 cv
75.6348 147.538 75.5786 147.44 75.4873 147.387 cv
67.0469 142.478 li
66.7485 142.99 li
74.748 147.643 li
66.7485 152.296 li
cp
f
389.436 152.674 mo
398.111 147.643 li
389.436 142.613 li
387.483 142.613 li
396.16 147.643 li
387.483 152.674 li
389.436 152.674 li
cp
371.521 129.604 mo
375.482 131.909 li
377.363 131.412 li
371.027 127.737 li
371.521 129.604 li
cp
375.482 163.378 mo
371.521 165.683 li
371.027 167.549 li
377.362 163.875 li
375.482 163.378 li
cp
404.915 147.387 mo
378.09 131.833 li
375.396 132.545 li
371.011 129.994 li
370.303 127.317 li
368.845 126.472 li
372.997 125.374 li
389.76 135.124 li
389.76 136.912 li
390.353 136.912 li
390.353 134.953 li
390.353 134.848 390.296 134.75 390.205 134.697 cv
373.189 124.799 li
373.121 124.76 373.041 124.749 372.965 124.769 cv
368.147 126.043 li
368.155 126.072 li
362.617 122.861 li
362.55 122.822 362.468 122.811 362.393 122.831 cv
359.945 123.479 li
359.829 123.51 359.743 123.607 359.728 123.727 cv
359.711 123.845 359.769 123.962 359.872 124.022 cv
365.082 127.044 li
365.082 133.862 li
365.676 133.862 li
365.676 127.388 li
367.173 128.257 li
367.161 128.304 367.158 128.354 367.172 128.404 cv
368.467 133.3 li
368.486 133.377 368.537 133.443 368.606 133.482 cv
373.183 136.075 li
373.228 136.1 373.277 136.113 373.328 136.113 cv
373.354 136.113 373.379 136.11 373.404 136.104 cv
378.301 134.809 li
378.335 134.799 378.365 134.783 378.393 134.764 cv
380.931 136.236 li
375.795 137.595 li
377.915 138.828 li
383.056 137.468 li
385.57 138.927 li
380.425 140.288 li
382.545 141.521 li
387.694 140.159 li
400.599 147.643 li
387.693 155.128 li
382.545 153.767 li
380.425 155 li
385.569 156.36 li
383.055 157.819 li
377.915 156.459 li
375.795 157.692 li
380.931 159.051 li
378.393 160.523 li
378.364 160.503 378.334 160.488 378.301 160.479 cv
373.404 159.184 li
373.329 159.164 373.25 159.174 373.183 159.212 cv
368.606 161.805 li
368.537 161.844 368.486 161.91 368.467 161.987 cv
367.172 166.883 li
367.158 166.933 367.161 166.982 367.173 167.03 cv
365.676 167.898 li
365.676 161.425 li
365.082 161.425 li
365.082 168.242 li
359.872 171.264 li
359.769 171.324 359.711 171.441 359.728 171.56 cv
359.743 171.679 359.829 171.776 359.945 171.807 cv
362.393 172.456 li
362.418 172.462 362.443 172.465 362.469 172.465 cv
362.521 172.465 362.572 172.452 362.617 172.425 cv
368.155 169.214 li
368.147 169.244 li
372.965 170.519 li
372.989 170.525 373.015 170.528 373.04 170.528 cv
373.092 170.528 373.144 170.515 373.189 170.488 cv
390.205 160.59 li
390.296 160.537 390.353 160.439 390.353 160.334 cv
390.353 158.399 li
389.76 158.399 li
389.76 160.164 li
372.997 169.914 li
368.844 168.815 li
370.303 167.969 li
371.011 165.293 li
375.396 162.742 li
378.09 163.454 li
404.915 147.9 li
405.006 147.847 405.063 147.749 405.063 147.643 cv
405.063 147.538 405.006 147.44 404.915 147.387 cv
cp
365.774 149.213 mo
369.144 152.583 li
377.635 147.644 li
369.144 142.704 li
365.774 146.074 li
358.652 146.074 li
358.652 149.213 li
365.774 149.213 li
cp
368.613 152.891 mo
365.528 149.807 li
358.652 149.807 li
358.652 158.686 li
368.613 152.891 li
cp
365.528 145.48 mo
368.613 142.396 li
358.652 136.602 li
358.652 145.48 li
365.528 145.48 li
cp
366.368 159.271 mo
359.098 163.5 li
359.052 163.527 359 163.54 358.949 163.54 cv
358.897 163.54 358.847 163.527 358.801 163.501 cv
358.709 163.448 358.652 163.35 358.652 163.244 cv
358.652 159.372 li
378.814 147.644 li
358.652 135.916 li
358.652 132.043 li
358.652 131.938 358.709 131.839 358.801 131.786 cv
358.893 131.733 359.007 131.734 359.098 131.787 cv
366.368 136.016 li
366.865 137.896 li
370.74 140.149 li
372.619 139.652 li
385.917 147.387 li
386.009 147.44 386.064 147.538 386.064 147.644 cv
386.064 147.749 386.009 147.847 385.917 147.9 cv
372.619 155.635 li
370.74 155.138 li
366.865 157.392 li
366.368 159.271 li
cp
f
542.601 299.776 mo
542.697 299.934 li
545.435 304.384 li
542.601 308.991 li
548.119 304.454 li
548.127 304.448 li
542.601 299.776 li
cp
527.963 291.622 mo
528.029 291.622 528.096 291.6 528.15 291.556 cv
528.277 291.452 528.297 291.265 528.193 291.138 cv
525.432 287.747 li
525.328 287.62 525.142 287.601 525.015 287.704 cv
524.888 287.808 524.868 287.995 524.972 288.122 cv
527.733 291.513 li
527.792 291.585 527.877 291.622 527.963 291.622 cv
cp
529.076 315.758 mo
528.973 315.886 528.992 316.072 529.119 316.176 cv
529.174 316.221 529.24 316.242 529.306 316.242 cv
529.392 316.242 529.478 316.205 529.536 316.133 cv
538.888 304.647 li
538.977 304.538 538.977 304.382 538.888 304.272 cv
529.536 292.788 li
529.433 292.66 529.246 292.642 529.119 292.745 cv
528.992 292.849 528.973 293.035 529.076 293.162 cv
538.275 304.46 li
529.076 315.758 li
cp
527.73 317.411 mo
524.97 320.802 li
524.866 320.929 524.885 321.115 525.012 321.219 cv
525.067 321.264 525.134 321.285 525.199 321.285 cv
525.285 321.285 525.371 321.248 525.43 321.177 cv
528.19 317.785 li
528.294 317.658 528.274 317.472 528.147 317.368 cv
528.021 317.265 527.834 317.284 527.73 317.411 cv
cp
521.677 324.477 mo
521.621 324.63 521.7 324.8 521.854 324.855 cv
521.888 324.868 521.922 324.873 521.955 324.873 cv
522.076 324.873 522.19 324.799 522.234 324.678 cv
524.5 318.415 li
535.71 304.647 li
535.799 304.538 535.799 304.382 535.71 304.272 cv
524.5 290.506 li
522.234 284.242 li
522.179 284.088 522.008 284.009 521.854 284.064 cv
521.7 284.12 521.621 284.29 521.677 284.444 cv
523.959 290.755 li
528.917 304.46 li
523.959 318.165 li
521.677 324.477 li
cp
538.259 291.207 mo
536.941 290.441 li
533.986 292.159 li
535.104 293.042 li
538.259 291.207 li
cp
535.104 315.878 mo
533.985 316.761 li
536.94 318.479 li
538.258 317.713 li
535.104 315.878 li
cp
533.485 317.155 mo
520.729 327.225 li
520.606 327.321 520.58 327.496 520.667 327.624 cv
520.725 327.708 520.817 327.754 520.913 327.754 cv
520.964 327.754 521.015 327.741 521.062 327.714 cv
536.351 318.822 li
533.485 317.155 li
cp
536.352 290.098 mo
521.062 281.204 li
520.928 281.126 520.755 281.165 520.667 281.294 cv
520.58 281.423 520.606 281.597 520.729 281.693 cv
533.486 291.765 li
536.352 290.098 li
cp
560.751 304.46 mo
560.751 304.565 560.694 304.663 560.604 304.717 cv
538.848 317.37 li
535.604 315.483 li
540.231 311.83 li
543.506 311.388 li
552.224 304.566 li
552.361 304.46 li
551.877 304.082 li
543.506 297.532 li
540.232 297.091 li
535.604 293.437 li
538.849 291.55 li
560.604 304.204 li
560.694 304.257 560.751 304.354 560.751 304.46 cv
cp
f
317.9 304.459 mo
278.358 281.46 li
283.624 286.023 li
310.904 304.459 li
283.625 322.895 li
278.358 327.458 li
317.9 304.459 li
cp
f
309.845 304.459 mo
286.588 288.742 li
302.196 304.459 li
286.588 320.176 li
309.845 304.459 li
cp
.168627 .596078 .678431 rgb
f
298.129 304.459 mo
287.936 293.848 li
294.777 304.459 li
287.936 315.07 li
298.129 304.459 li
cp
.0862745 .235294 .356863 rgb
f
285.73 325.529 mo
285.899 325.485 286.042 325.398 286.187 325.313 cv
286.622 325.06 li
287.493 324.553 li
290.976 322.527 li
294.458 320.502 li
295.329 319.995 li
295.764 319.742 li
295.908 319.655 296.058 319.579 296.181 319.458 cv
296.917 318.718 li
297.284 318.348 li
297.643 317.963 li
283.712 326.065 li
284.395 325.904 285.057 325.707 285.73 325.529 cv
cp
.25098 .956863 1 rgb
f
321.158 303.946 mo
311.871 298.545 li
307.228 295.844 li
305.74 294.84 303.98 294.304 302.286 293.656 cv
320.859 304.459 li
320.859 304.459 li
316.216 307.16 li
316.643 307.002 317.07 306.848 317.491 306.682 cv
318.761 306.192 li
319.182 306.025 319.619 305.888 319.997 305.647 cv
321.158 304.972 li
322.039 304.459 li
321.158 303.946 li
cp
f
292.695 287.44 mo
292.672 287.369 292.62 287.348 292.572 287.319 cv
292.426 287.235 li
292.136 287.066 li
290.976 286.392 li
289.814 285.716 li
289.524 285.547 li
289.379 285.463 li
289.331 285.436 289.287 285.399 289.216 285.409 cv
288.936 285.446 288.655 285.483 288.355 285.554 cv
292.999 288.254 li
292.908 287.966 292.796 287.713 292.695 287.44 cv
cp
f
32.4248 280.77 mo
32.5361 280.494 li
32.6475 280.22 li
36.3306 281.714 li
36.2192 281.989 li
36.1079 282.264 li
32.4248 280.77 li
cp
85.3516 302.242 mo
73.939 297.611 li
74.1621 297.063 li
85.5747 301.692 li
85.4634 301.967 li
85.3516 302.242 li
cp
36.2192 326.93 mo
36.3306 327.204 li
32.6475 328.698 li
32.4248 328.149 li
36.1079 326.655 li
36.2192 326.93 li
cp
85.4634 306.951 mo
85.5747 307.226 li
74.1621 311.856 li
74.0503 311.581 li
73.939 311.307 li
85.3516 306.677 li
85.4634 306.951 li
cp
47.7554 324.723 mo
46.1479 325.375 li
38.481 322.337 li
40.0879 321.686 li
47.7554 324.723 li
cp
45.3525 325.697 mo
41.2173 327.375 li
41.1816 327.39 41.1436 327.396 41.106 327.396 cv
41.0664 327.396 41.0273 327.389 40.9902 327.373 cv
36.7207 325.568 li
36.6831 325.553 36.6523 325.527 36.6255 325.5 cv
29.48 328.398 li
29.4438 328.413 29.4058 328.42 29.3687 328.42 cv
29.2905 328.42 29.2139 328.39 29.1572 328.332 cv
29.0728 328.246 29.0483 328.119 29.0952 328.009 cv
29.9966 325.873 li
30.0273 325.801 30.0854 325.743 30.1582 325.714 cv
37.6855 322.66 li
45.3525 325.697 li
cp
40.0898 287.232 mo
38.4824 286.58 li
46.1499 283.543 li
47.7573 284.195 li
40.0898 287.232 li
cp
37.687 286.258 mo
30.1582 283.203 li
30.0854 283.174 30.0273 283.116 29.9966 283.044 cv
29.0952 280.91 li
29.0483 280.8 29.0728 280.672 29.1572 280.587 cv
29.2412 280.501 29.3691 280.475 29.48 280.52 cv
36.6245 283.418 li
36.6519 283.39 36.6826 283.364 36.7207 283.349 cv
40.9902 281.543 li
41.0625 281.513 41.144 281.513 41.2173 281.542 cv
45.3545 283.221 li
37.687 286.258 li
cp
53.5811 313.313 mo
74.7319 304.733 li
74.8442 304.688 74.917 304.579 74.917 304.458 cv
74.917 304.338 74.8442 304.229 74.7319 304.184 cv
53.5811 295.603 li
52.1025 292.106 li
82.5513 304.459 li
52.1025 316.812 li
53.5811 313.313 li
cp
87.813 304.185 mo
87.0347 303.868 li
87.0342 303.868 li
72.5259 297.982 li
70.6177 293.47 li
68.4717 292.599 li
70.3799 297.112 li
67.9834 296.14 li
66.0752 291.627 li
63.9292 290.756 li
65.8369 295.269 li
63.4063 294.283 li
63.4063 294.243 63.4014 294.204 63.3857 294.166 cv
61.5806 289.896 li
61.5498 289.824 61.4917 289.767 61.4189 289.737 cv
48.5527 284.518 li
40.8853 287.555 li
51.3252 291.791 li
53.0825 295.947 li
53.1133 296.02 53.1714 296.076 53.2441 296.106 cv
60.6479 299.11 li
60.6479 309.807 li
53.2441 312.811 li
53.1714 312.84 53.1133 312.897 53.0825 312.97 cv
51.3252 317.127 li
40.8838 321.362 li
48.5508 324.399 li
61.4189 319.18 li
61.4917 319.149 61.5498 319.093 61.5806 319.021 cv
63.3857 314.75 li
63.4014 314.713 63.4063 314.674 63.4063 314.635 cv
65.8369 313.648 li
63.9292 318.161 li
66.0752 317.29 li
67.9829 312.777 li
70.3794 311.806 li
68.4717 316.318 li
70.6177 315.447 li
72.5259 310.935 li
87.0342 305.049 li
87.8125 304.734 li
87.9243 304.688 87.998 304.58 87.998 304.459 cv
87.998 304.339 87.9248 304.229 87.813 304.185 cv
cp
f
217.601 317.949 mo
217.575 317.939 li
228.492 313.369 li
224.839 309.926 li
217.977 312.79 li
217.977 315.25 li
208.977 319.006 li
210.847 320.769 li
211.407 320.534 li
211.391 320.528 li
212.986 319.86 li
213.005 319.867 li
214.447 319.266 li
214.427 319.257 li
216.023 318.589 li
216.046 318.599 li
217.601 317.949 li
cp
198.544 309.174 mo
201.898 312.334 li
204.021 312.279 li
207.445 315.531 li
207.5 317.613 li
208.504 318.561 li
217.384 314.854 li
217.384 312.396 li
224.367 309.48 li
221.995 307.245 li
212.835 307.853 li
211.246 309.67 li
203.581 310.181 li
201.766 308.589 li
198.178 308.828 li
198.544 309.174 li
cp
233.292 312.043 mo
233.283 312.047 li
232.243 314.585 li
220.938 319.317 li
218.377 318.268 li
216.823 318.917 li
219.386 319.968 li
217.791 320.636 li
215.224 319.584 li
213.782 320.186 li
216.35 321.238 li
214.754 321.906 li
212.184 320.853 li
210.882 321.396 li
210.741 321.455 li
213.313 322.51 li
211.718 323.178 li
209.143 322.122 li
206.7 323.143 li
191.36 308.687 li
197.589 308.273 li
197.589 308.273 li
201.136 308.036 li
201.135 308.036 li
209.296 307.494 li
209.336 308.086 li
202.602 308.533 li
203.787 309.572 li
210.961 309.095 li
212.551 307.277 li
212.673 307.27 li
222.077 306.645 li
227.202 306.305 li
233.292 312.043 li
cp
228.01 306.251 mo
233.891 311.793 li
250.79 304.736 li
228.01 306.251 li
cp
201.116 318.695 mo
190.608 308.793 li
190.665 308.732 li
188.776 308.858 li
199.265 318.743 li
201.116 318.695 li
cp
228.01 302.668 mo
250.79 304.182 li
233.891 297.126 li
228.01 302.668 li
cp
212.835 301.065 mo
221.995 301.674 li
224.367 299.438 li
217.384 296.523 li
217.384 294.063 li
208.504 290.357 li
207.5 291.305 li
207.445 293.388 li
204.021 296.639 li
201.898 296.584 li
198.544 299.745 li
198.178 300.09 li
201.766 300.329 li
203.581 298.737 li
211.246 299.248 li
212.835 301.065 li
cp
211.391 288.391 mo
211.407 288.384 li
210.847 288.15 li
208.977 289.912 li
217.977 293.669 li
217.977 296.128 li
224.839 298.992 li
228.492 295.55 li
217.575 290.979 li
217.601 290.969 li
216.046 290.32 li
216.023 290.329 li
214.427 289.661 li
214.447 289.653 li
213.005 289.051 li
212.986 289.059 li
211.391 288.391 li
cp
227.202 302.614 mo
222.038 302.271 li
212.551 301.641 li
210.961 299.824 li
203.787 299.346 li
202.602 300.385 li
209.336 300.833 li
209.296 301.425 li
201.135 300.882 li
201.136 300.882 li
197.589 300.646 li
197.589 300.646 li
191.36 300.231 li
206.7 285.775 li
209.143 286.796 li
211.718 285.741 li
213.313 286.409 li
210.741 287.463 li
210.882 287.522 li
212.184 288.065 li
214.754 287.012 li
216.35 287.681 li
213.782 288.732 li
215.224 289.335 li
217.791 288.283 li
219.386 288.951 li
216.823 290.002 li
218.377 290.65 li
220.938 289.601 li
232.243 294.333 li
233.283 296.872 li
233.292 296.875 li
227.202 302.614 li
cp
190.608 300.125 mo
190.665 300.186 li
188.776 300.06 li
199.265 290.175 li
201.116 290.223 li
190.608 300.125 li
cp
f
372.216 320.686 mo
373.311 320.527 li
375.499 320.21 li
375.682 320.182 375.86 320.146 376.031 320.089 cv
376.203 320.033 376.371 319.968 376.542 319.907 cv
377.56 319.538 li
379.596 318.8 li
387.739 315.846 li
395.883 312.892 li
397.919 312.153 li
398.937 311.784 li
399.275 311.659 399.62 311.551 399.935 311.358 cv
401.193 310.595 402.452 309.833 403.689 309.009 cv
371.114 320.824 li
372.216 320.686 li
cp
402.756 299.307 mo
401.814 298.727 li
399.932 297.567 li
399.773 297.472 399.613 297.385 399.445 297.318 cv
399.277 297.252 399.106 297.194 398.938 297.132 cv
397.919 296.763 li
395.883 296.024 li
387.739 293.072 li
379.595 290.12 li
377.559 289.383 li
376.54 289.014 li
376.2 288.893 375.866 288.754 375.502 288.701 cv
374.046 288.48 372.591 288.258 371.113 288.098 cv
403.69 299.906 li
402.756 299.307 li
cp
379.426 304.756 mo
379.426 304.163 li
363.584 304.163 li
363.584 304.756 li
379.426 304.756 li
cp
398.985 304.459 mo
404.27 301.521 li
398.916 299.581 li
398.916 299.581 li
393.983 297.793 li
394.041 297.766 li
374.43 290.657 li
371.852 294.56 li
380.016 297.519 li
382.548 296.334 li
390.749 299.307 li
393.224 298.148 li
398.229 299.963 li
390.143 304.459 li
398.229 308.955 li
393.224 310.77 li
390.749 309.612 li
382.548 312.584 li
380.016 311.399 li
371.852 314.358 li
374.43 318.261 li
394.041 311.152 li
393.983 311.125 li
398.916 309.337 li
398.916 309.337 li
404.27 307.396 li
398.985 304.459 li
cp
400.206 304.459 mo
405.008 307.129 li
407.122 306.363 li
412.374 304.459 li
407.122 302.556 li
405.008 301.789 li
400.206 304.459 li
cp
371.278 314.566 mo
369.51 315.207 li
372.088 319.109 li
373.856 318.469 li
371.278 314.566 li
cp
368.937 315.415 mo
364.149 317.15 li
361.424 322.976 li
371.514 319.317 li
368.937 315.415 li
cp
371.514 289.601 mo
361.424 285.943 li
364.149 291.768 li
368.937 293.503 li
371.514 289.601 li
cp
373.856 290.449 mo
372.088 289.809 li
369.51 293.711 li
371.278 294.352 li
373.856 290.449 li
cp
362.989 307.897 mo
356.892 308.224 li
356.83 308.199 li
347.644 304.458 li
356.892 300.695 li
365.691 301.167 li
388.633 302.395 li
388.602 302.987 li
364.885 301.718 li
358.146 304.458 li
364.962 307.233 li
388.604 305.968 li
388.636 306.56 li
362.991 307.933 li
362.989 307.897 li
cp
f
457.547 309.485 mo
458.079 309.225 li
457.036 307.094 li
456.503 307.354 li
457.547 309.485 li
cp
456.241 310.125 mo
455.198 307.994 li
454.666 308.255 li
455.709 310.386 li
456.241 310.125 li
cp
453.871 311.285 mo
454.403 311.024 li
453.36 308.894 li
452.828 309.154 li
453.871 311.285 li
cp
452.033 312.186 mo
452.566 311.925 li
451.522 309.794 li
450.99 310.055 li
452.033 312.186 li
cp
450.195 313.085 mo
450.729 312.824 li
449.685 310.693 li
449.152 310.954 li
450.195 313.085 li
cp
448.357 313.985 mo
448.891 313.725 li
447.847 311.594 li
447.314 311.854 li
448.357 313.985 li
cp
446.52 314.885 mo
447.053 314.624 li
446.009 312.493 li
445.477 312.754 li
446.52 314.885 li
cp
444.682 315.785 mo
445.215 315.524 li
444.171 313.394 li
443.639 313.654 li
444.682 315.785 li
cp
458.079 298.818 mo
457.547 298.558 li
456.503 300.688 li
457.036 300.949 li
458.079 298.818 li
cp
455.709 297.658 mo
454.666 299.789 li
455.198 300.05 li
456.241 297.919 li
455.709 297.658 li
cp
453.871 296.758 mo
452.828 298.889 li
453.36 299.149 li
454.403 297.019 li
453.871 296.758 li
cp
452.033 295.857 mo
450.99 297.989 li
451.522 298.25 li
452.566 296.119 li
452.033 295.857 li
cp
450.195 294.958 mo
449.152 297.089 li
449.685 297.35 li
450.729 295.219 li
450.195 294.958 li
cp
448.357 294.058 mo
447.314 296.189 li
447.847 296.45 li
448.891 294.319 li
448.357 294.058 li
cp
446.52 293.158 mo
445.477 295.289 li
446.009 295.55 li
447.053 293.419 li
446.52 293.158 li
cp
444.682 292.258 mo
443.639 294.39 li
444.171 294.65 li
445.215 292.52 li
444.682 292.258 li
cp
459.103 307.769 mo
466.736 304.01 li
459.094 300.268 li
458.833 300.8 li
465.391 304.012 li
458.84 307.237 li
459.103 307.769 li
cp
455.322 305.658 mo
441.682 312.374 li
441.944 312.906 li
455.585 306.19 li
455.322 305.658 li
cp
441.664 295.686 mo
455.323 302.374 li
455.584 301.842 li
441.925 295.153 li
441.664 295.686 li
cp
469.686 299.946 mo
477.984 304.009 li
469.684 308.097 li
471.787 308.99 li
481.905 304.021 li
471.787 299.054 li
469.686 299.946 li
cp
468.261 308.136 mo
476.639 304.011 li
468.259 299.908 li
471.084 298.708 li
460.834 293.675 li
459.612 294.188 li
445.618 287.317 li
445.277 286.036 li
442.109 284.48 li
442.109 289.271 li
472.148 304.021 li
442.109 318.771 li
442.109 323.563 li
445.277 322.007 li
445.618 320.727 li
459.612 313.854 li
460.834 314.368 li
471.084 309.335 li
468.261 308.136 li
cp
441.517 284.189 mo
439.55 283.224 li
439.122 283.014 li
439.122 287.62 li
439.122 287.805 li
439.122 295.607 li
439.715 295.607 li
439.715 288.096 li
441.517 288.98 li
441.517 284.189 li
cp
441.517 323.854 mo
439.122 325.029 li
439.122 320.424 li
439.122 320.238 li
439.122 312.436 li
439.715 312.436 li
439.715 319.947 li
441.517 319.063 li
441.517 323.854 li
cp
f
136.329 290.708 mo
142.138 296.092 li
140.135 296.168 li
136.405 292.711 li
136.329 290.708 li
cp
142.139 312.825 mo
136.328 318.209 li
136.405 316.205 li
140.135 312.748 li
142.139 312.825 li
cp
142.754 312.255 mo
140.035 312.151 li
139.956 312.145 139.88 312.177 139.822 312.229 cv
135.912 315.854 li
135.854 315.907 135.82 315.981 135.817 316.06 cv
135.713 318.779 li
129.189 324.825 li
129.189 312.747 li
137.9 304.676 li
137.9 304.676 li
138.135 304.458 li
137.9 304.241 li
137.9 304.24 li
129.189 296.169 li
129.189 284.093 li
135.713 290.139 li
135.817 292.856 li
135.82 292.936 135.854 293.009 135.912 293.063 cv
139.822 296.687 li
139.877 296.737 139.949 296.766 140.024 296.766 cv
140.027 296.766 140.031 296.766 140.035 296.766 cv
142.753 296.662 li
151.167 304.458 li
142.754 312.255 li
cp
151.9 304.458 mo
151.9 304.376 151.866 304.297 151.805 304.24 cv
143.024 296.104 li
143.022 296.058 li
142.976 296.06 li
136.296 289.87 li
136.295 289.824 li
136.249 289.826 li
129.094 283.196 li
129.008 283.116 128.882 283.095 128.774 283.143 cv
128.666 283.189 128.596 283.296 128.596 283.414 cv
128.596 295.62 li
128.596 296.299 li
128.596 298.131 li
135.425 304.458 li
128.596 310.785 li
128.596 312.617 li
128.596 313.297 li
128.596 325.504 li
128.596 325.622 128.666 325.729 128.774 325.776 cv
128.812 325.793 128.853 325.801 128.893 325.801 cv
128.966 325.801 129.038 325.773 129.094 325.722 cv
136.25 319.09 li
136.295 319.092 li
136.296 319.048 li
142.977 312.856 li
143.022 312.858 li
143.024 312.813 li
151.805 304.676 li
151.866 304.619 151.9 304.541 151.9 304.458 cv
cp
f
140.099 298.444 mo
139.28 298.476 li
138.679 297.92 li
134.769 294.296 li
134.169 293.738 li
134.138 292.92 li
134.061 290.899 li
130.87 287.941 li
130.87 295.435 li
140.607 304.458 li
130.87 313.481 li
130.87 320.977 li
134.061 318.019 li
134.138 315.996 li
134.169 315.178 li
134.769 314.62 li
138.679 310.996 li
139.28 310.44 li
140.099 310.473 li
142.121 310.55 li
148.695 304.458 li
142.121 298.367 li
140.099 298.444 li
cp
.0862745 .235294 .356863 rgb
f
134.552 304.458 mo
128.596 298.939 li
128.596 309.977 li
134.552 304.458 li
cp
.25098 .956863 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.1.2
%%For: (Lynn Lynn) ()
%%Title: (028 \627 .eps)
%%CreationDate: 8/20/2022 12:58 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2N<dQdZBT'Mj6?pc%JJn])(DTKg='".en(Ll_8*5'6`Efq7=ci0lM[Fu"+TDN/8F$+*t%/sCq<)T\p<@X9rju-uAC9^aO
%g8OtXRR&"d1<YL4+G5(;-fX@)s-]@'?93q3",gV:\lC8f.oE]sgo(s^Aok:ZXu2ZKRE]+7C??Xg-,.K6hFH[Jm:U%+S1iZRhlQ:O
%o:8c>g8QqZq,YM]GnMCco#Ir'i`DiUpflbUI'4`ee#:e0]b,BSn[Xk>%C\o[b't0jSjZYVAuh&4Q"njqMbnMDcW=,=7eOFj6<#:F
%')sM=0/Hh[A\MGfWAZPP.Ih%d0`tE,AWH&+2!(ogd1DK@GkrNT#mD(us"#DiDd9C@0DHK!8;=-fNfUZB%BKp3?A:6*2:auW>n$e>
%+?KlSGSX<Eja8RVF%2O`A"nDEs2g>a#@\`bi=Lc)O"ok$:O155>g,%f?7t:OoGGjc_uotMGhSo7V<I)Wk'<1E7L_Mml]'J0l*m$K
%ht&UVq&2G2Q_VRdC8iM6;.6/eR"JQs.Z4eW5MmpQj]"<@bCAgjBDKPIe.PGY/%8qn<\o;>^,p.4p@H$Ci'O4Y3N>U"Ze?AO;3(RE
%cT06$#9;oGk`H8ds+bun6-R67d,S^^\JR.`fq+UJh#u44[@)1tbh]O3d\B:rW`375jU)Uc6o4=MUK!3JQfCc4r[$mS"j[-7o0;&P
%0b1<d<&LHoI(jmaX9:2#E!gH#=,WQU$;<u(5&Q06:_h0K>eAGA`ZO8cU5F,"'-i)"_j^?dW<sC?pHOGu]AWUsg_O8b2JVXU?M1Vt
%hu>7/(Magak"SfgeJ_nSMj^>uDrSZDAjNTJbZQ/t&9WfT[S/;\W\4j\:sdmO1?r*6>PZ\EJ"#8Q,qPi`>_,5NX$<>!XmT/ib,)*-
%\=Bbb)]AI*X`2&I6[Y(6itPQ$"f'Y\<-8OcWJb2I[E(*Dp"rZ_q'oBC^c.6fB"M.XZd>VX>K`Q9bdRr2qk]3_ReAZ2j`9UcOfr,Y
%$CQlC]6Tr-X4>A$XWHBS&TkdO?bnC6DcCiWqQa'8+t%Hc0"%F`SQ_j")cu1o3aW+O/pTL.Nb5?JMGAAU?ge'homB'0AZ6(`#U*2#
%5n/N;l!g%=5H7'A]uIsKIE,.idAMGWEZ@QrRf-6iQGf,ReB2JkN_HW7P$cmc1d$MpW50rReRI!.Y<Ku!JcJ_OWdauJ>h$omAgQlJ
%K,j%nX\ti4Sc3B4U&d#LD$HEAWg$p7C`9_*B"Q`r<F@TLG&_;S^#S]+?JqBXmpUPAQVYp^nurpB4tR&6T%Vo;i`"uPWTqr.MeUc=
%gLIYBhj0./jA&qT9&4m[>j:T[Cng>E\\(%Dqa@%Po(:20O<Z@(N`PN(R8reAh80)a:jqE^>GVC71ASqn!FMs?(B1=uX5_<6_'>\D
%JeBfs%n4>-7O-enVJofj(E64OQGAoR4gB4a0B$9??Q^`8QOCn+jq]a'VkVW)<O0u4I(?@PrIj_*;llFkW)B>l]%k18&Q=m>M.=I4
%VX.4+N)WVPd$H.D.OrnAfl^9*\o+@;aV5^03GF<62j#^5IuQAn^J^0_CNLi'n"$YKldtrR1mjM*0a0.*k[D%DO./h]K86,RXrJ0[
%q&`HPWSnU6ebll0N=00P<t!D`imb.9P%?-cc'lh$CbR:Sq.@"_Lq^>%j_7b'8,6$-emRJU;6sP',N;G6;3=eZS[M/-YT->7;jILr
%<LSW,.%O8goV2EB7_rIi,!$[M^mpGB4qAm+,-Vac&Qu/)NP&*:;p7p?FM*r:WS1/#-h];D2(CpfC[FS7g/Y;=1_cc1B]SJJ3c1>6
%NK[h^r1RFfFae97<jnaGbhCR2S!n@r;f6?m9oLMkVl!^V+db5fm]qrk>ppfG9$OtXbb]8?9Pq>>/N:*!VRG:0QCHTKGM\X\GK?(C
%8'JnR3Qq1-fK&2P(k51k,Pi";:TsB/g<]$2Q.]Q@q=i3Q0B6f\2-\&%kXS4am\\Dfh;Y3(l_<2&[o<5I9nH5W!PA/NZWYFP2u6H3
%hKj5MFt9GPLrBs``&'<Hfp[dCgmc_DO0P$X[EHa*e@K3K9^l4MP-dsE.PHGJ#gn#'H&:VFFaq"LZ-W=tVt$PHEhhX)'Hn(5G2k>b
%Le\?RF9EnI:IW/#M%#2]4_j^q2j<G86s^4\'3)Haq8W,8oia5QVBN#;-R0ii4aig-C9s0IMSAj5'5DIl4&Yuhn/2+!0dse,BF_@J
%</eFdO4$`lHF&'b3lZ0A<,M$#Esb).F58h+96FV-%25`5gpnY\+WVS5Ikm*h1\c1[30SF+0l@UHKcY;&;G79/)AR%af\16>d@$X.
%NAh=FS2^fnkZI/h2eaQ*bm4Jj^/8WN=/&`aF4c?')2Hj9`dV"eKBM>@niaBk-@tFDpjX4[ESF]QnaoRK9ZKHK\;FZ>-W8\j^X2E2
%I/MAu9V["7.6S$oTdZO_ac29A(<aWo:c%NGcW!gurh3#T[9@jN&OjH5*(SlY3$sk_E='CB0:(=+,_mg.WlZiY+@4m*ZSV&NW*'HG
%-K[u[c$]H,o&GeqS$b`a)U]J"&Dpu2L.oS=fSd#H+M@-jrN\6rIAXmIJ"p*&JU#gHpVt4$H)EW?R@Nq5Jm0.CC4T0"'Psd`)#&`H
%,2.0c]-$l(lJ)7d[,;8(h1(PV_4MFpr4fht5IN@*.3$Td-Re0pBB1gMg?T%i^6aq9WQ%0Ji_F.h(Fe!O@RP2S@YU"GUH-gpE@eGA
%SZc(hnnD'h.H&[FdWGFu<:l`W3'/(N^@%VPGdl?U2='@O+bI18%eB:LgiDE+P;6EnU;W[Vk>_GK7di&8a'+:X]3)8t7<L&2#q!M'
%\k(dYS")WV":5;4P`/OZP24,mj"9.dc,I1Goe^kE-SjRL$:iY-XSNXLh"C0$7O/_C_#ofQ(/+.E>DhBqMiMOaoAuV??iBVc,ceBE
%NKh)U8ree)']R!#/^sKgUg`bW--M@,aE"6uj\pi((\6Yh4M.#5ZFK+sM"4Fti^IsSC/<=?7R]oVJ_@'";-dt4UZ!t>@,e#14Y]Y^
%Dg?HC<,:#@ZF`qH=5(-:]Hfmr;g;i#Q=@rMe)]XhV8cUF]PQ(IBt-hP)l[D2YEgZ;39]=nlG4K3bdJKb,>lIt5V(Wd8<bsL9T&^V
%Jg4,j9uFIoN&57QVP,E5pV5SL<s&iZ=Hj,K77f:6PHsjTGUuGoeT*uc;,T.!prB,a$%8IcQXWh?&2T;7RDu!!06WgH)2j+G"gKJT
%KZLZ]ofEnH;RfB)-u"L*'TIFe@o6.K`OISo],HT*\4a(TBo&1A<W>jddS++D9rb`D6>DI"/gi`+?E+:7ktFcWEf.u,Ld0UO;>/pC
%jY'lr45Z2]@F"m]&()Zj?YMWOdnDtN:KVf'*a]sDbKNqg%3sL&WE`(N"B2ihQ"s=/2A'tH]-398\otR4[0S+%.b1ComGBMGVTRV`
%;V%^CD(=*8ePaXT&NV#Mq=_<-8W"\d^E1Kle,eKL)%F?>piICM(kV!-RP(?<cS.#i;FD`ZU/+Yj,W]L,V2bF8Su`PKn@8*l<'Dqt
%J";YYcJuG)EiE6$/kaaoDcJ,.U$>Lh[?^%*]MiuQ;a&Au1Eh$X"prGo:J0*;6X#qpj@tidN(R&KC44_61ni)p,]l=dph^X!\n'/+
%p+hG\IsW('^GYPjq#<5A7HVqOE>b;N1/,]SEDqkbesh-g"%.8hn[YV?)P<B>rcI6!)oMG@A01^(cWnKhML<P]1[ahE:oi)]9jrf!
%[JS(Fs._[qV'+DIe4l_Q8Dtr-knc\H:'MCNRC/?4L444kBL(TP6bd]I":]I+l@0-Zd`C45&W5@kUXZlX7'/:-a9:pkWE&r&h]%@*
%<$l@@r'SRBn&-P5M$FV[cL&OQ"&3_1:!\<ekJ-&&r]>_MKB'tpe+;J]q=!tRGPW`0hm(2!kJ-t>]'9%Zo_eG!m1E*DZ+$#sPFS6?
%Ni<+obl&j:1Z.Gbn+=hJf]i/GQ-6S-K.!I"]"2d9!m:a<;41m63e&ihSM]`f3DGq-4]-NaW@F2d0AF`bZW7eV:Gn,Fkk`9>["]9h
%]\U(3p28SU9,8Ujff/=\Xlbg/ZmhiKB^-b1HH;s)Z9R_@8tfunh.0GCg!iaiYBQ2dOb[k?'t/;9Lna1'ck<*2Yn<>*C26%+[;sc#
%CIH.L=sIDAH`fO)T8b&V:'toO<#2*(qO="\,?mu1$C^P#99j\$htqd-).?-tfM/\POr!FKBGMhP:"`F!`kGJn-BdbM0Y5I,U8d`m
%XITmHH;kGZ8)oZd*#N%ce!+eN<>X@o.Z[p1:I[f]MLEJ9FpOFGpJ7ZHQ`9"Vl?J^X?D`aLWT.RTGaUU!#&_'2Al4R)m=g]%Q`9"V
%N%NDUj(0(JbNO&)]+a?`2@cN]D=C6+#O.6qR^bF\Bnp`79O1,_PY@:3Ca)T:K5j[FOXA2d1tfflcnJ0P0d=K_8(`h$me@$ZnedLl
%hE&rKqYJsES)Y?(/E=H):,=Vaa6#A+`&,K'j,iESfPcl92jB0P)lFR@mT'Oh+m*p9I;,-uBiJpFYK9^bHCZ_?ISLua\SJ\F;e2Gf
%hT?oZQ!iUTZ_r$rZC'XJ;H[[4XHeNpIeuB^L;1`VH&TH/Wa/phUDBqc7T<&1Osb+k+%[CNNAeT0RGGJh%#irbgssHNV\\!WZd99V
%jp#njcVcJtgm0QOZMj2u@;[9PB$.9OFMV:li2F_"7P"^'Bf*gA.ZEVJ8>EbW:ih]r(t3$=GKc-,:]2+DACF5b+!\8tIZ-*?9`5f<
%C["UJR\0F2VLFJDS!g5tA*V+%&3n1L_t40AXd)Zs6$ClIZbepHqD,Kn7B5at;5'9TOm6he>Bj+8>rM8J$g#90.8@UjqV=ERD"XP0
%U!9E)E-%.[7QZUnHTS5CdMOn`j[VaD+bd78@M08QCT":4X3f0oST&d<\[,0oe[eA;*p8s&lXG@4BP<iJB[hlndKo\`StR3iNBs/0
%>`*`K>.$0o8Ss]T@[^cieeL"G.>I7]L7qS8mq&7p8],2H=A$QmcT"(B8K7<"*'\*'`^RKjp5[7:$;Rq"V"#mmnG6<<1LWUT[DQ;@
%RQ=%GEsM95!FHN&oh@AV',0l#L6s\+pI[fip]l/bMTC(X4:M66cVfXFO,7qs[g&h#PNRbrm]IoYAo$[i+5.Mq9)WjHb=uiad>N[W
%2)hr*VUjPPRN#=,BPPfjDlpPa.e6lSk#,_5QoJmL:'OaqR&HuE2`9cqk1nIVS!nCsF7,'XF)5U:9q")/C<@mCS6JI,^n==j`;#gD
%Delc?<?n,J>JKLtgg,96+GJK)9uo#7UF5.,q?_EODW:7[9_2aho1D\a?AT7,GB\_l5Ed4"1lg=r:up-4jJs*YI,SZhUS(dR?RW=2
%Xep,k2I!r=Bfru<go1!#jm24GZ]7r31F^L\#8hA'=4*T1DZ7>f2e2=;9Y4]0g;+&k>#Qbogq6jsD6i'Bqg"at<dRt6S\9F*3cc[G
%o*;%"\^YOoSJLdq'V.YV0r@Q-*kGLTb#d6EfQNh#(_q0B,"\6j`aujqV4Fu(nYlQdIj--1Za:CP0;X/3pPq>Jr=l6)U9aQYdQQr]
%*LWiO.E"gWGH'"cFhDE]Nf"mgZ&TqSc_"+-[RtSLfhZfkq=%1'6jeKnXgh'4\M;UrVOG>'CBd/>aZD626(31XL@X`HlEtAk9&8q7
%aV\4qVR&XW'AYm@.Rd:4kRT.3;k<+on&VJ7_\9-dh)Q;N>mjIM8o9qF5uVFjhjp2M)u34CUa5A=5bTo5eo(>L8^MuW7mi_jkSK_M
%TRi+^%;@*Vbm4Jk^/8WN=/&Znr?l?89^g=Ks5!4J"X04*XlFf.Y6d5F*63;6)>DB1NDQ3aNoRrKe'2kF%$V(N+Ob6We%KblpVoes
%+AX'u**9!"ccD-gR?'SdMi$MN]Cc=$oW>UE84doi1X$?QD_m59!RntT@kYr$`mat[qTC(8B2JSqB(AX38Q]\:^NEQIU:M''>:)\N
%mttI2D[B")BZmP`CE2+f=lV(\mZt_6=&XMEq&==K>XK0s,@``fqE"=A17%AqQAe&kAJtk88,o@]YbPJ%':`UmcGeB5*IaK.1QipR
%c`n8mE0L>9FS<aQ*T)^+OpRMFZ"GqYjrrH8e>M,Z8o^>>dT4c6/(Ac;@)'=4)EXe8#lPk*2T%M<ibYKW^F2TjdeY%!V+3DtZ4m8N
%gMW8(A>`]bS4o^qamk=VRBkN,YhAGTZ5K)<ZUs/^NKFF#8.u624J+M%e`LG3QP@H$kO4r,A*AgTA+0(-:@Xh[4^(S.BJo%Rl_E(u
%aH3n(Ed;EYr*=cBL04GC&Bd;fK-;=&RTnZ:hYD?&BHKU)(^'""YZ<n&[E'=Tb8T8oY"D^gS,`KNYV*Zue9Asp[eTTZI.9^KBY@N[
%Lb]p/G4Rb9OK[fMU.4:D;&"EuoOUL?]9t==935m.dm_St[IT4MGIqhMj6MuL9MTe&&<Z>)+!@[]s+#]M4^=4k:^G8EHCk&,o?TYY
%s%n-QhIrHH7e!9WO"[QAT2k[n(?NDZ[8tPV5VUKW?kU"Z:J6t!3O2)db`V[%N`"\H'Y9]"-tFTfIq%PoJb]8,q12<s..]&%^G(4E
%ms`*N(ZMW:!rFDPc5^@YIeGP9s,&I*<7,nYdAW$$#0)Uol0@Ks7tKiW!<,*bY;Ws#fa^;H\I]pE7+ZHA&A?'B%j*3N5=/+Z^eM#a
%LS=hBVa4(/Qo8RY#1)@M^)XOaOWrl]@[N`?Hoquu1g:FRcP@`Oa7hNO?Lj$Sro^d6rjNL6a0n#K9C7X0'9gm>ZmtW*3EQP9q;pkE
%b!iE@<W.EMnEN:9[@fUp<@bF,_U@,[[ffdVSZ`k1GR$DZ[c4i=0=,[3jia'GNH,^JpS5p_)_5oT'^''10%NZU>t@NZ%3ZH/!E6+s
%1!a6mI.Kg;`&DP`o>P0O_0ifCe/6_Q'Pc`aL;]+X^6_u@[q_=pHrGjlddO-@"u0R8;`*R$R^I1M'kN%Y?%nWuFD7@%_K>`ccnbDd
%l_9\`'JhMlS7&0_A@fc7`BjNu3-3W+oZ!2k?FTF>RYU+F76FeQDn36GF=P1'\JCRWom?kY\cj7R@\u/)r,8UC_G./g''3orH?\$r
%;pPgZ<7Fl]QfGD$LRht(a$M)3)F't?=nGcGZX#,ine\-CWV+H!p.7Mc<t2KSk,U`;c-s1dZ-jb1[>X$$C:3Aq*RTF=<#**/c*]<^
%7[n?4#^#kb&mM#;5hYDG8L,.TmIWX5K;3Uj0#h;7:CsoJFE_Ue?bL1^oc\B]X4r2aF\XYi*qOI&%n#0W/?k'8(?S^A[Oqg(?ANYD
%_l0?/5ah'eMSb8*4`+Pr(5/h0*M"$r1t:oYCDZg;8Q9VpRluRoioC6J34\T*q=RmmSe*di9e.//-$1mml_g5!HNDlY$=HUoakskV
%LO:Pn_LMRB'@g7?k=-unqXr]Gk%/(*AD+&Bh+#+\.`08aQ8<1*mE.k0Y?Hna'*$8D*ZGFggWSWU!I%ULV'"*fi;.Ldch:]tP<?%4
%TT*-U<NEVdh,5-3g-f6:njW?O<6.rPkUP-^Y*J-\/hPP0<E:_PUJ+<3OWHr>VeBCQ)&XT4o1%:`+I_nBXtTH[I;c#h/fQEj,J#Jh
%=+&b@:N5JkbeRplI\(J7TC:A=q(f%IVC^)(QJKu@oVf%(PpksIIg1p1BKG6_#XtD0'6S1AYU9$X#@_&Jo,p[]qpCJ'gbB6m\#=$.
%b:rm@;CIms6F)4:p6Um)=(9CBnP@A.]>&#M0sUXDE/>.H@X7'HA:9eHFFR4J!j_MEC=GNsB_IoD0q;9-&7;P),05L\33P8pe8*&s
%`gnA<*bIb"YUJa8(B'2LRF@I(9kmdVf>&9Gq%SsEcp9edErdWp2"645*FP0a)2(PZLHN4<4ImYEY2a`i4Tp27p^[,k5H3ceC8IQ5
%*H0q#%;rHGkGul!+8JBID4n(#'S\7FStjrp1m9"/I]+kk;N2ZDHUj;86RqeIV*q*r0":U?ai&\$=CEopG+XV3AYJ-Q"*7_iSsZ8P
%,ZFWu#NAdFPcH_!2V05dTrD'^Rb8_Wj:<mX<e$n]$W)"/QlP<@[$tN?*s;'-7p0rAR0P;HHicX]V!$8-`O\&M*/OU/ma']mb0A,%
%A&-t8+N^,7;W7&"ET.S!j.'RgJ+f`9B;mjMl*fr8/ia^,)[.;)H&N92mlF()elm79'HIPgQ]]U8,iE>YK`eN7WEtMk>o5A^@lWr_
%&iT4\TBsS$0d4c0k^D^+OIcUEr#@Rd=+cR+AS8T(1cCeV'Ue7)IA>Ar(<8eM&3J`NoV3&,njT6nr<&Sss3I7(24jVC4Qhs[OBAN:
%>,)oL22A`C/$j7uCF-_SUUQk6[at++_qnG'0.Y7GCU*1T;lWHNR1@A:4o]a<'hdqOj#6r(ciDqNbkg0=+26bEKnCXiK<BhG1d2cq
%g^_JC+.qED;"ErS8oK:pE)Sh!:D-Dfj?!75lqsYcch.Q2\%<!WKW,U<qfrshK"Lnj$CrMKUo:W&gUl=Sh.2e'Qm<a/Pur^Ae?:>\
%\Snm6<iK)BAl+LU=#n++6>8(_.OG\9/qd(@(K=V">I)U(k("2iq0MHiD8@<HR_F<9JO,"Lf?A.^e8W^B#85gjfgE6=Ff9JM.n5jZ
%ENWp*X%o<i'WbZn)S^2@<c3_eY)8oe_-uikd;E4F3e44=\=4-ZKO3OCjUEOuGlnGC[TT62V'*?tZjZPQ,:=!mD^?/k?.\_^lN-*r
%G*_GScBXiF0\!9t=/#"]P?;HX.8joIV->qk$5TCKl)O#D7ILs"AZH.-gV;Qlo:ja7j:/HTgWEi9*MYjHnVRuiQn&Q8C%,dtXFH-n
%;P#(FOAM"0?<1:@@X6>E,Wj[uB#sFF]TR3g1nf/p<_p'%DO"SN%O>fUa_H!K^*r.P2n'K%o[b%K[<Ra)6'F*#]k="k.dID>f8I+s
%5Em[u0V,^]s!gGTR&fcX?3MrYXl%P`'[f\d&881D3S$6;<MebTU"UJc;mT:R(Ocg\O(S9`3<XiBlo8[7JL)L]/t@`(lS[[2%u(`b
%+Zpa(l'BFg[9%^.@W[WWWKP#R#-EioTYkXJ7CaNNP3Da.6@Q5%jY1>\#I-XZ5Zr\WmtX!Sd#i94H"@8Mi>/1?2XY&:i`B`m;>QE2
%N:$QA+9i&\W/Dupe]ZZ`4Pn:faLI15KQWuOK6\tiKf*rd1?[5BatFu:(7HV_)k"D,9co)'^Pm64+"+nNh$pE/Ysu"G*5$5ZAWFR?
%V5AXJ>'#MbSgdgbSBNoRchb7H[]>*JAWl?G!#*?Moj;icdX+]Q.+)k_@2bU*("ZZ6!E$@-0=D+N.+AHdB\paaU'(UtjHG=$Y=TBR
%NLhRNNWDS&k'A!D2fiO5AnV*$JLa?L-<p%O[(fS#)8"J2[^*/VI2+dA"8)D$Xr:U-+`Ku=,/*YQ;6Y>:01Lrb2Vs'a;%)%+@FCbF
%>Z]_I']Zk@AMM!B:_hZs?H!hBY/iQQVs%,^d67^k)`Y)uUsB`:0g>Om;Pf9EC3ksSQ&s6>[b4(ET!C7OICgA6eI"(QbW0sr&X)'3
%=Z=+>oSJ]&Rf8=sJB&7qb*H,FMCWUE'[fH[C>Hb,`nO*5r@UpXQfDY=Q_<5HJNf37%5K[W@bMdGW$\]Sgg7@5;lU37[sE,=[)@,\
%fe??S)p#tL$L@3Hp'jJl$[5"/P(T2^[J+9h(U]/aZ(&Al+;^N(9iZ7OUUfsGU5j-YA:@&$Qs]4_$ULR7r(71UG)*FOg/>"-FCXTK
%Bj)H:JC]%N:943egM<KT^l.!)9rI%KX[`<QD;QGbIYb2RS'_tXh;p*O/13?FCK$$39&2pL#rksh:<&-$^,7Z(S'>i[_rDOPkLoT*
%Srg(>UZ^Ui:4BA9GiSGe@!80D*G2X;[pF6L5!O>$HM"9RQ?Ea%r=4kE\$(#<GPCF<J,df+(Vaj!ZOcKMA?uXsAjj$-gYY3k*WH?G
%Dt10RX$%a-\CZ7lBC#Ke<E]5SpIb@!-J7.!(@A+Cc!Ng=p?^&emu-1dqtK3mmB;5W([uE=IbZ'^g/IckU^E`B.'1;+K)E,"]HVLg
%a2/6arb+GSrcTai>'p`#cU9S$pN,X2`J4[pC?B&NmcKUe^E+H5caPi+c*J/[.(dX1E[T%)n]*DJhsP;MNUQB,21/Zcrqb^Q!rS/s
%rsIE`^:n:%O,BB&oZ_$6\A6DPjla\!r==AUHMc^GS(W(oeR$RarML1I`ldlBqUtW*gs5W5""_H=iUcc^^"&0JQhR,uD7sbL065S'
%GS3leS:RO0g$CTQg*6iIle]Z^n*:p7o)&0/rEeNPn%U8Vq.In>5N(qqo#AgpjiN[RPQ*sSo^C[XU1"C9?g9(fE:ZAHcF<Nd@WZ3p
%@'#^?,mZ^Op^9CQrKgjoIT&"UB3&GuNm>U&HREfg\R_.g=/Sgro'%i`FuS9-3*AHp5+UT`?C@Xq7gll.mpDBhT%lHbT!,hSYe0GI
%s133V>($,3qtnfr_bkE]8&0%>ZSMa'q4$j=Q.f5bkL%T3Omg%9]\+i!I_ND#IB\d(I=GGY9AB>*LH`9#0)Y^^EqA:%G3MT!_=]3V
%?`^E&5($De/6s"LRLZNKHBR$?RSWbQLWc6JB<-gFDH:(M/l>sNLgG;tk?r/1q>=q'_L'pAJ,+Qe;U"=5V2aU+e]4f*inf)\h+%3C
%R;A,@g]cjkbtGA!..!Y(S+&3bPaPT+7,.UHp!\*XH>-k.?gb(l`q%Qac2/=C_/aF*lZ2e7g"JDFGg\UWH:EBWB)\?l>sulh=eT89
%B8Y$MA[>TZWF4T&AiBPY714E&UF0mJ_<76Qio.N<fa"S:"3KnEG"!"VH5Ac_VqIVp>2]AQh_(7^Si%=f!r-LJQomI&SXKMjR[nl:
%FdTjtQS,Rb>ccr\a%$P=_>RAP2nSRdr%YgnI9OfXGe'-`0"m_,a?G"Cj\9poe+U7emUCGr]5gntSFnAPYHk+KUF_gMh91uTCHp#)
%+2,bl%qiXf3BD(hK4bE7)t))9g""^-0A3ab]FUBX4TC^[T0.C=P^WDjnQ#9c'eNuU<Zc-h2a>TZB=I%CpTcm$hk+JPcdb6kpQ"OF
%fpBnLp$@-VmQ>jkFD3IV4R_`M?X9b"ZDW$S2#H!RpH&2KrG<nYY4cfrqr.JC2)Ophh.rV\nuDU:qt5n2b[.qB3R&>seaI'&Mbj&Q
%f<ouVHSb+RcW4*(J'Z]+EkC#nKt#sGXbZ]I9Qi)HSsc^!*6cWFbg+Nc>ebVKZaBPXRosXSI@]m<nnU#a*E5E_1[Nl]Mj`Mmrkcn5
%CA$'"PPb/G1X@!.^X$_&T:F3nI!J:rp-.r1BD+PQ5FOS^*mg==nuM'"ldhQ3RJ3;OkgOj'B'0"JHTlLJ&PZW8mGXJ]CJdB/[f1QL
%IN7]?1TgPXrRmUf`kC&NqXf)WZ#oMZG59X;5)[MZ@$]'$V:hN)DpCQC\op+2m,ZoVfr`..8$gN;]q*jT[l9@\O$C=PZY//:0@.A)
%?+`E!3NUQNk)]+ng$%_.1A_Nqr$Il#Xe'?8cSjt<YO9XT4h\LPs5E+j]qmBofCuqcQf%59m-Dg-nC.4-HV[u!ZhHAed/A=;ankSA
%K;H'DhT<[tj*P]cX1S*iXh6[.QX?<^Gjk4]jn6<VYKcdSH>>GuQX+Ak(<t(J^H:5C>AE'q1kuS4eN(CP^,5TJE;mu7L3Io([sS)=
%HLB_Qj2JQ-SpNBiI\udUmS!B<qcrYqae/HRrq1N=IT`VnB8_$rJ,cD@C-FR`WR"L,ZSoREN'>NO/$1I\B'+=92_X>)hVD/ocfQ<5
%T)\:ppL6>TQ0A-G`'2IJ\)-90gWPLnn'<rM0&L#r<o2Z1Da*@PYJ"-:FFW=^NS`PS3\B2Qrq,:9rO8VWqY`)7l\#)$rqiPhQ2SDf
%qlQ?#:I,oUJ+>S2OLkqY/bl$S](#K!cs#)Y=aRVs+CsQM=nQlciR=]P@A3Ij^;!M$nGJ!k`ljdhq\rC@EFj4UG`hI`5?WC1V3tQC
%rP$fe4O2as(Z2pYI(T0]Q@6;GH?'57/:K5Wm(qK.pSA,*q2_imr6JU)+$=sHD]V"gpS%nrk%jbtmq^=;#=@&@o\cV=q;[*.mJQ"m
%io8MO,okF[Qe%bS>V'`?oe)R@+)[@1hB'=F/ELN5F%bC#K%s7>k(JY)*\Nu/DEPj!H\W+R/_<0MghuPE*Zc&bZObrC4sgdJ?ci#Z
%b/MW[jdGDec1:G\PGMj)]"GbiIe`m/o#pT8D>=Y<7$bT:H@)lDP<6<]DI7h]E_@>n%s%[I761,/\dm!G?G9QeRsVLAk[#nAo(DTZ
%q*h^(1@p)[>$4$L\QB/qZYX3ZrVXj]d;"T@I!GVLbDK[t[dsClbD!F0Yl;]gY@hddV_#UC]kAG4H>fsphKg!A#kP'j@5PI&YV2G2
%k\tMF4[*/a7XKFL!55OTN%WIh%99#B^VP!K9C!EZ^;#>ne@*QqjlVp(pt^SX/hTVk*.Qk<]h]EQ:92=2MdORQqtca$o8ORIF*R-k
%q6kbfd$_@5SnNk]Zo497j%"Kg^3ICL6f1&:f:p[iHVN3>pR5p_k!=oZDtsgrh;"N1Y?-`"=^h-KA)A@li;S?6)c-D4I=:PPCoj0'
%B.'V?r^D++m!fQ'cgqC6W6`B#iXY<o]3emYj):OI)d[@1*q3bR2Of>o\&"j&cg/EjbmbS=Gd;K0P[6QN(=!sa_]b%H*et^+DsH;^
%mH[:$fBAf.q8&h]Wt.hk?`gL!b[cG&HFg`b5.[o#QHgOiM.Y?,]e%ddkiV<Yg=FjRk1\M>kP_gJgDBV9>']T(,B%"V4aOR4Xn:iP
%]!1oW++.7>o_n?uf>l'1het]-nt<Mfpb72'G^TMQhTNt4(Q:J%\GNT%jRLg?k9l$<+7)-Ns)7rhn>'BjcTb]AhRn.1jKS1Mktum/
%ph>3?iRZII4Wcjl3SIba[a*"nB;Z,Yfk8:H9mo2%jn$_XaaYkDD\q;<XhVPqHb'.CIf=ZRrhGs$)r[i@A`I@XCM\COfU^is2[W3P
%REaOG"1#ItpRc8n[TY=B0/%M+Cu'Hi/oL3S_rfO.UKh^&o@rU(XnpY%e*WFr-`-3ii5+FHlVH4,mF$X0qjmV&^GU5d<j'?2_s$7U
%cG`Y]\XQl1I([XgK.ji`Mhf['mcV-t_=%&o`PusPI(B'#laUs+r8%&>PNS29jf?(MB.onDXY2;UgO&n(YdsK[ghj]+Cu`DL:SQO=
%(T1otT3kj<M4V@b3;V9Tq=qjo2_Tlq'FNf%C@*YWNVE=2cS=4#hES]gra>d&c,X`-M^\Jbi(7WmoAJtX#p4QL=N_a<nZ1unFas;K
%iEJ3eGZ]7`C$R0kYd8M[ou4g=+(s:<O1oPigcrg1q:XfAVk;\`kH-D>=4todm8q,!D<BAG\1f;!H$-[Y0:j_r*.'&/aZ"\>-<PP>
%;E9.'icHK8Isno?EcQ0rj_1oJQC[iYF;CB0I<9YF\o;b7e[iD<rLiXlp@ZGGQ`I;SS3D;m\oG0%o7h[=N8>OZ5<3t03PYO[mGc,7
%(!XBs^Uegkp-UMmo<rZ7AG_qtr:@CA7nX5*n#gO<$La=qhW+(65/4gVs7mlL5%O8]b7CZ*qbKGH4^>+;W,+-TImfXJ#9R<9X"PQQ
%?S7pt>'sSrIbL;BIJEI!UAj4pp2b+X2"Q"[E:r5^lW:"]T5/(Nre9M5fe5kK&!pWqr5%^jh!<SHkBdSmT,6?i07@-%HgS#+<HRj*
%bK!X,IrFf8;uZ$f2fJ:0SfOHcgO$uE0%NdXO"]?(h],u[*aG3LK#?.Yd7iN+M*;\i0DG$+s5DM;ii@[_-s#2P>`@kSO%%*M5AWaL
%c*`a.o)*jno'#JQp>sQ\1NGo<ft0:+SNjm#C"BTAjAg?iqKSk-k.5rhBU%_Y`O4-pf;fude\cf39Y^DDKtVE&T9^tal;r=nDo2<j
%n`J*I3koBXX67Ze[U04"pMCUEB&6OZ<1Z66X]3$mSJTiR$fV'Lp3lS4>$1;9f,jKfX7kO5H!@npGk.en]qa9Wn`fl$H>P,.68\9s
%q"fYlJ%M&>Bk0dfC-9[fIa^9+^iu9+F-iT2T\7Akh3.;*?/?dfPUubJQ&h][A^no,Fdi=B*OO"l;S='PG;r"iNao%f]dYmE\O*Fc
%`',WZ_Hum^"8D9u/f!PU@>EU2T!,_L$<;jC07e^V+D#I-544]ZD&N@NCLmFi=^*P*J[4=<Sb'0WWH&!aaV8<Io2j=GHrAJC4)2p,
%MnZ16DRb_SgNmiP?+D!DjXi8W2mo8`0M(JXS2c:F$YS'g1Wnbt;5SIVAb>M*VAZca!CJ[7o/`m`RX+DgAFe7ZbgW:Id*f6H=ZtYq
%03)U!d>YagT?Flbb)40QS*G3SMLX11R<i$6ZrYF>`=dPC]:g^fb*T,r;H<ZJj06VBN+gjE:_b6e=uE7W&7nHhdOq.@kLK$M_+"<M
%]j<<+e.qX'A9SV+hQ(P9R#ea4eZs'gN*ol^\ons8W79%uX#H-l,hIf15nLgcMjb$5;LO(Rhb;0f^=dfO?+_UT5?#e9b%=M^eWjpm
%g8MRs]oZ=$2\L+@]ujflUr8'Y[tQ>gP#RHpG3u2>cMdM@]2-,G#H+\O[3u1;XlhI:ie(FB<k*%s.aaQL4EY/4gX1=?CF[p:guGQG
%[!2i7F'KA`APS22*Zto9$bF)TdKa^9)VA*6AM[[p=X-PJSr?fQ;dDD)Z<j>oDR#"okP`U6n%]Jdd'k1>\IC4\3UU0plPuJ(08.^*
%WE!.MYYJ+*$8`@@kK?cR1;a*;.I'\Ug?<f[QWP'Ao1`T3F$&+QY]GWe)?Y_,1HpNCq#G:o`j8Q1`oufGDMqf^B<?0;fXPgkG<&hI
%'AmGE#NU0o6egOP#e)Br]m0:O"gO0-W$GF5m4uA9$o"H.q^hbR4L>>J0C'E3Hg3cLFMp41)O[j:B[e[*Xo81$aNA[pMJ!stEL?HC
%8s>1=MpU3Y))4\^&BD@3:7>nQXAt06*-Mk@@[&K<p-^bA)r?_ej*&h5*3?<n4`HtbStI5nBf`[+n\#;-GN8[*?Q#+UA^J4!mjT+<
%Xht>_H4,f,$OZ@0#Mqq"QUt'\)PI1hm9'qA&2M9$e\FF:o,F5=m[*NtiRUUnND"=4KVW]]c<F!m($l2NIMQ;Vl19g;'D`-c2gR-4
%>PC[%.,TnmrgRZ:<-A<Q`:n"$Cg)ItgIB6?+DY<<cl&6\[$X]>+Z#5Va@Rhef#&nZ&eK4s^70c1H!lI.f?(cTjh",tLii>Xpbr^>
%#R;6kR/"Gsh7raRIhlR/Gcu>+.LgL9$GC?Q6FNlDN%06.8h5CBG:ncf[TB&nUZ[a-:aTLrpCfTm?FQm]_iR^92jk$TL+sr:U`g0a
%A3gWLkS*KAa#t2',"aNX0o)ron*to<Ru\3XK#2*;"MkiCag7W5m3fiWr8dVIUe>$k(_Q;ihUX\JmkZ4p(Gls!V:AR#^VX`r8gM4X
%I)#:u3k`hjUXdoX_Q#%T%6%]fhmA,p.T]\1CCS,(-[?m3S#`U.C^,7:+(>Zo4.>O4*A#Ic<Kh0R`0%hUV4Y@dF1BA4LO.fSFK\l"
%pdh[U6VrmS*_%=<7rSTOjo+*%Mq@4,l7<<'?%/)U8E[d+]^%Cn4%cWUGu*,D'=\Jq^/1@XF6S&MC4GQ&B+J3.)US($?f@\N%p-77
%\#(oDV^L_(hcfSp38Pi?(@Q7WOfpV=I%:t;&).'^:Ktuc3f(t]+`m9"N*$Q7*"&[!Z(L'0.$<,<UJUkVJI!4A@p"AT.HlO.cP0%V
%Sf\f>MiC)Ve6nA5;.:p^/P(<eHPCMX_B(ID\ZM)mK/$RA#M?"@BQ+1MFD"G^pBm;q!b/,!4Y]"+!q)P8=bqK3fFL]Y9PcfqoLuC2
%pVXKFAh%DO)A4I,+N7T<"PK[1:Kmj3[UO%W;1(b97"M<Q0lB9N1Rk*C0sWh)F#gf;10FBfUXD,YED_PsEA%mBT^8,!rQrEUQNdk-
%d'oYiK;NEn.jolf8rr+$,21[.\>QnH\/3:[]Gt"D&6KKs87Mdj$3KWO<H6s[0MuZKOW7qA2"qH>_\f:+Ndqj$:'afO5VGq9Ud/:>
%-k$OJ;`,<kbCrK,OFW`!1(k!DoekqXh@4KLrnQ!\(`[PCL8T,&j:bCsLUqJq$cJM!Kl`^$-0UPS(bd'>@j*Q1`UXKQ.=fGRLf*ee
%@BP97!%Gaq#+qm&-pWNsU'0D)>*r4B0t4NXCHi@TUXu7X3T<%Ya40$ui+r],i_3c8U'_:4cQ(05!:m?ueBW/d=J?#X$DnY#DG#E^
%@HR8VnLVrt&t8W(Sesbl(jefTC.c'VKZ"++euG*U%1CQ78<GSB1[H>jNEe;j$S@[m+NBNVZ7$EU0Eo9A5bS`F"2YtA+RrS9<#oU<
%>pb,\ms!e5kBaj/=Ett&%EG2k)MVPjoYiu7TM$h)@RhWuGaK/7VFD\Y3A;[#VMk>W>p:&EVu$ShE*nSM&V#PZ_*'YQJ<NfjQqrMi
%/?AsX1<,C`aq<YVB%<n9pqFb%$';5V9P,p<N$OjUT\-F&^8[Q@/u7,YZuF62brDkZ#T:^>'`o5Jr%5Ed;Mpk0Tb!]fH7F:X`\:mp
%`X!P_O2NdU7$aiBL^2ul=W_E!OauatDq>.^YbcJM+a,,^JdE0m&]Gs:^d=L\+RB,eh3@V`$)Uh4`u4%YUp,(i(h1Egcj[?jT$YI,
%@#JU@4Z*OT7RJsM*9=if,a(-B+*U`F#k!.$%7.2_%Ef2YJh.,Bf%(s&+SD,XCBEc7KDW*/csi^)J$`Go?m)s6Y/&U=?rMW7"l3;=
%rgHtLjL2!1+MaXN.8Y#^"9i#_)LQ(2!0'p0JY=3Z(ho'^+V#XUjL-pJ<,=J(B].Y%#1R`FN571nnTO:Sdt84Rm7cs,4uK!p4rV@_
%$q!AA*e_J@2,MD\!",R>J;c5mZFF']Ic;:D&0%,Q4Un+96id_?3/4+InLt4X,7$d3Qn9;XE<HFKq%aCVUt3E$Y2U$XY!Ec.3&?8F
%'$M!\9smBKQir$aY(=SMJC^\bcuff=%-WnbUf0Qelc"S_jS?4hQt$S7DJ:e.^;N;ZZ++Z[OgkT<7tK.t>gV';Q+!&.N'/I-A@4lU
%0RBRk_2f=6TnfY9#_ZAm,b<FfeP6-)%roU&\&a(n8l_\pgDU>aNqTVTB.?S6&,VC\Y1+ePdnE(Q=!17Qmg=0DGGXOs(knB2:!a3p
%(^ss,KK1@0[,)k7>#5#6%m?`q$%^/!@Q&B>_l.N&_Q_&!0!@5B?njKA6V>ue+Z%*$`_T,mCCs]*.?r7JgJl0j'?_-02H=RDKs1P<
%/2a-EZS&:RC-B"WfE;TaA&QBq@_eD>.ns*!b]E-nfEMd%0c"/5XTm;+&=^*/$)q\ZgDZl)dU=g7R+!\J3e.Yp[a$HU(O:eT0";X=
%>5+Qa62Z)M'B!A8g]Oh-J-Meg,g+J)mi,hEd*Fdg*QD<HV1TaMJ[6o09Ia#VMF>F\/2hDO<r9,*D*[599@K"9(,&et$4PiZF2`I[
%m](U^pTDjY#EU(Y'M=M8n6t4=h</24W]`eg8f85!#-7,(<&RE:X.'=Ipe'OO[1>h/)b>M*KVd_8:',gB&"kNVKVI\ZY'p^n0%>bP
%'(;iJaSsY>r>1b?7S;E(+9KLHW+[._[B'ch6-mT[0L`\[4l;P>Hb-WP6QUtf6j4VCMn18D$qT1fB?1.J7/O?,,R',UjpipsU(%4?
%W)D%lYe2DU7Am8e9Z.',>h\_tg<.@CVCi;[]f2.jg:<Fe><0&C"42SB^.LOmYC)p6K7mFTGZC\THlnS4><>:/[Uo+;@6/B;$<*I/
%O<ERg&;h?dCEOHsS=8#nN[6DH/J`u+3#+.5%AD:[`bcNrO1R^(:4A-05smurCjSLqJF2C$eUASu*0SkL*[\k37YkTPL.1I>`"V.8
%U2=MBFX_q^gKPMdZ;8o3_m)/>cpkiAJ63VZYiRoblD%$^Ll'XCm!K?P$?7)I-<2!J(lpZ'\shRk!d_D"i%VQa'<j'Am^9$\Mcg3k
%9>`)hQ4\+QCf'O5CWdROM03LI9eFf3QKPmTI\5"/C.?1b)_AY_[RIV'kY]`N`GTbLc4D]dVfkM0e8a?UbpCa)b(h2a(pnY&*hk9*
%5[@f1@57BAm=50-+FUBNT`&"8ZcE4aYo<s_'Nj0j-q.6uFuM&K],U*f0m-gLM>O_40o@,e^mGJ9g*.=?\l411H)4B;0r+&cZUnRf
%Zu/H'=oA.":2Jl+6f".'*\3U>#=PEk>1\ob7"N1U?don#\Pn&l%rDAeKh0Q$m@d7i!Xm"*\6Z=r\1h0d.80"F(&/.Oa?g7ik/S4@
%\2D:)/^.]9>L8EsVZLIETXMHh534!D9S<,$!HI&E5i_iQ3sq4jKaeJ*`s$l2=.nqPH-@"j3?rNZnm"V833Y8b:'EV]oRbV+5X,J5
%$<R]tUO^m,,#?Mn-R%4H(,/+Ba)+*`TXY&?JkOnJ"I"qe-Z)t0JHS)!B4K(P,og767)k_aCLphh<#>;e>Ybii#OG%l#[;rbIG\)@
%i(mL\%rPBb:UGq]X9ZV\VW4Z?&EYV>[C[N"X9C-4#Y[tn&]COpcjp2Z5u1X2#*^\p,4%9W>^YGeJNf0Q.fn#!3A@*J\tH,BZFai,
%al*%7kM4X^IDQVNdu)H!(lW2eVHl0u.+o=9H9AE+L-F-1[6s"pjh@!6U:,YM8e_[Dm]a#u!UB??+:npg*/?\gL4i:iG?,pdo^N>f
%"#<f+&4q25@d3hM\?N8+>upVAa<>@B0uBUgV26cc-?Q4`8ImeCdB#[M?mircmka?3+g<,Rp`Kmg3]kLud8%bW4gK+'V>+GL)lcVF
%-kdN$ejnbL;_WQp]Q!'J+Cc0t#4jjknQ>!p'=aE7?.Org"W^;)*6rXC:eakNI0SRf\=RK6P*dbuoKAB@#>s_INu:JERk-&`:PUM8
%Po:]=oLoZ>p3Q@iE&bcD\o>'3EDN)0aYoDp+9j+L[*`?9`If%3Yp3;RnHK2b`r\tkWDIAt+ijs?kd3#E>l#PMoWs!+)2$m?8cX^6
%T0f\q]cV;lr4&mGjK3>`CS;>0C4e5pZdR\(XV35oc*e@f).Mp/Y52U8Cs*%6!u6XRA+^pr+lr!Z!KPu>!OcRAZV6s(CTY`;jZ.Z_
%5[kOsfsD`q/?i?nX2/f*;hO,C7p/(C"U;Xjn9`a5'D21OcqEDX[E'WG]7rM'LT#dt.bnNU\^Fm6)](i/9B@3?^3$$&AhOtSVc)5s
%WX_$/>clQW<$Z%21Jjp)`>MQD*_:+H=<I>2WdcEIanP<J1Cr3:k+'arS6@XlW/Y'mB30BmE+foSJELW"VsGr$6@73G*!L/OlN+@(
%O6b%MJ9NP%!H<X@X?mYHnR-^`HRN0hfYOPA6ck2cBal*!W>%Z+"Lj*d6$$"gP^qK(oIfHtbuDJ`3t2=Oj=pXbJNe%'+:e`&P?8gl
%+@0#2FHhJ3XssW/SCZ.TkT\8.>SIOpTh#f/?s-l]?$2G\TXl>s<IYXBq]k/_7G@`bqqm*3=+u;@K*!/866laH^qcma0Ti%=]AR\=
%RD]Cj\1a.C`lpJ%TKK:Y;!\gLQ[,7!#pc\J/YRiDfWkd%PhfBF=hYT;RB]MSM1&;AG8,Zf^b$TOI<LNW5EOY&%U+;WL;@om>p,Mt
%S#-7%:[3VHA7hEas-8s7e83fI_MHm0Otb@_'`qu>-hZGGfJdA/Ni:[:):9K*%2LLMkYn.a0PKj)WKom37hX>KR]4->OY1B!(%_Jr
%-$u<$Ju0^@7h`<^d"V.\)gK7l7Lt'Xq^?^12t_t5HP!g!RF+:3d1Ie-/rm?#(,T&`YlHd_$UoS0QPR=9rBS?X(f6Vc9Z9:W\>i\N
%[QYeb_CF]XKFAep9[^b/*i(b?%eE:A8Kk=%R\esVAjub795G)ZI?0dR!&arJ>QS2R&)$ir666OIcZ@./U2<C9ppbB).ENHc&qW6)
%/M4CXYr]d?]W:THq`i/Q.!rmT!!Ddk/6bR7M9o6r,V0#!FC4'%7hu@M9A_IS^8;9'+(At1W8/6ogseI1Zt=5q,F4-H-53s[i!:j<
%ZXErkE]Hch#BW;Z-q2r70fH:pK-SAJNt1T!l/;Xs#gKmqB3<bZR1`muWnPtV.)`GESp9o`0h0fA-Cn.2KoLXWjim=+*-6Q'"*%=l
%*)j)[\Co.V6!SspAM1K,\=^&p@:L/_]na,(]AI8PLZ9ou%d#<L`I+YM)Sg@+i[eM1qYHicU2d<c%lh$X;Zt:\-Lq4`dRjO:q\KDa
%L='hY&7,s;r?0s1./4QS-S/n1N=?2J;2H;We8?UaF1B/O?krb8p723F@<<m;$*hXWdH!^1IF%?p;W*hW!UYKNa)B$Z)L)l*I,jNP
%$DC+$E2$;g8*XTVKM(A@LZh6?)-C^96"j4k_Mh(kq]FB15">ss^5R.fI"+-JI*KU&Y@nH6MaMCg29Rb.P@'4QTflEbV11sbS;$)Z
%el1ET(t\Q,<.^U.Hk2u?@Ds-!K']S=C/u2SKh6%l@b[a)H5ClC2O_+qH+`!j[f&AR]ht0R0X,Y=FCE\NVp-iS+>-Nkl#K?O"(En9
%(A8[`.@@5D#I6?9&VL2h*HfA0Z3(Ss_!7!q`77IuSs6.M!sU2fksNZlJ6S1VA3d"%O+8Y91Gr"kR?]B_%WdUU"A]lCnkMZZFt=qp
%%hgHEAm5>!ZRG$HF0d?N>^?<5FpKKQT<sB(C2;?9)@0T(U>.4sToSsc,*ERVjUmJ0n;tX^AdH4oC2c3,@Padcp*#3&?t9Uda[8\j
%(!7$j^PPr\W&bTB5/h9/[$3FAO;I@3eAoR-lief7\?l#T8K`XWJ6N"3Z618p4"_pp.Q/F,oDMc0&03VYL=J5a9]bfYY(]ad'AQaf
%O;&,SaJ#NGNq9+Z;eIEXK.k`Cbct1ViK8\rRQX!)V9GHQaX@1*CNS/m,RoD!Ef`b:YSg]V0TuJpZ.`^G3^R6K$rH&mGqPmkB_`$g
%+_L"*^)uAUeIP5;$I'P7:plSkZ("kAJl">CQ>!!UKUu^bT3)o"QobTEnD'1=@PZkJ*KR\OcME<k!>!`^Ts'#.E$MU9)^h4RgB(/@
%fuP+[7UHma-o2YV&.4Mq/J)9&NA#h<ID8SV6ddYBhF.';lcPkJ6Hkdj_,mg)krs*^jUoiJ!i*&!*r7U.Tl9QqbWJ76GPsnWOMXVD
%q]n4W+"9Eg7IQRJa#62T9PC@cC"!kf!hl;)KaqcPOo-8j[)FkGeisiX68KQSKBTB0msuU5]+>]o4Cd^q="Xl_/jP(.ARK>kaal9B
%orS5tmMSB4GP+=d0R.@EEo5I\\'R%oDbq]Egnj_c_6#\Dl:)oQ7.j,B-,O->KG&npcEU5+Hdk8"%=GD%^qe:!e4^,mj'!p`bo:p$
%mOe+lK0Tq\F8%SgT!>RLpagPF*2-KPm\kO^![o/'SqZT'3Air7k,27CTP7otK+Cf9R$BfDeYs#5E9*^t+2s9Q2\$4(oMLNjeitDh
%.4,)7D@/,GE,&S(QDa8s6=3(upQ]08XKV(?=W74Rp]6&Q@k=):qM1kTOOcH\`#9P!)8rRQ_1LI?EV)Co!^br;Z(!Fk,fXXs<rer<
%$DdB-6pO'RBdRh9UWVZB'FAMmKff>>5FBBNFn<bnBeWVej0euf`:Zua`2Q2uojK<q&]('l-qL#73`=>,(c-%?mDbeSZBL\A;gSV0
%Jt2EqZTWTd1H6?f@<36HYSa5<0bKtM3E;d2SC"`hTm^mG.i\UBO=?6C^m'Uu%[Fd=Cau2f;)i-^3clh__l7Ja+BGFsp=+g>C<>I?
%8&'Y`W?YQ=*[);X/V=W)j8+m%H[sR"Lune980V!bPNVrGqYGX@e3H-n-OF\KWHAS#1;.iZ)#`5r\1uU(h;VhG+qbQ(Wu#83GhbT1
%:o\L!of'QBk6_o6I?I!c+W]Ct%LKL5[322_oK\BXPNu-q5Udr?N0&C*2?BH[?\_`D3:Z24RE(Oj0nD\KL(9'58Dmb3*o*%0%U?f;
%DfZnS*E;&9$Un9j>'Y[>F=S>Qs1nEN;5c-u;`N=Fp,k\NZ7.F@-lp6^j?7Wt.1N\j!Y/e;'rqK*_sWAm=:X+A`:(O:TGLJjZEub0
%jT0LjJ1<5=iLju&W6=/,COs<e"O=WF,6E>6?)nb]\s17Y,1*fpPUi35Z9aHfSDXW,X[\V4%Fkijl+<'?#eZRK&P5!:/T,/M.G$!B
%A)(<OQ`3*_Br&\LQ(l"*V:\F!%i+qkp`LkaD?5@XHt:-W&4ko?`FB`Okp<4q@k'/h+>^`6"B-GpJk*UY15/01HL6!>4$af_6-``.
%Q7u@5]b36@/iHk;P;pGkg@CsHf<!5r@54Z_:ECYEBpJ<eZ_Rj^;H)PJMjm!u]g*Qi>0$t%$&fWf"V5?2:+giZbT.0HTLKd6b%9]r
%$Ff@3.3/sW[n/:/G;d<gl?u%teG$@ShMn#D%=53jQ440]Z3s'6B^lsu+':XaUOb9q!Z8MRa4,\]*3%mV/4sXbJ-A&qTT\"1J=N&s
%&Shc)1E4N<[06OnlT*P]6BVPXk@-#fjk(Ho*/.hq=Grel],*PM6QfW.?UN@bBrsH-KasFp=34:m*V'G=r\=sT9P?'(oFlatWE(7!
%A5-10%SH)B+C2Y2_<>=UNJjrD!=V)C[6c,aQX'arB3I+3+[jueQC"[.^dFkF=VMi?SAfl/4D1@^c76aPKslUL(#:[+]gOft3]71r
%gMOdT`16P4A;Zf;E!FjL_eS\KUHo?!?il'FCkaZ!l6\,fU*L6A%j=3D"6>OgU=ZJ`%`]TBm$AkpIt*P-4na>'3!mqT\4Cr`.iK3T
%6a]I[aD0"0c_R8VlGS*]<+,p\[F$@X(Dul4Y(+N(1[o"Ue:!:cK@PmEGn#0G3[YDi6YEG/0Wm2\#o9o&L7jLkF"3"#$]X<"U\5i[
%)!Iij_K<`d:60t<.U%`;I@H6&=Y>FWHUcfMqgGI^ZE")`0tM(?0T=tF?"[6XL_5]$DP+FCI_SZA6hYYq#L?sj+j3$G*SN,E$JZt<
%dS+I>EeoFJMs91keFTYNm`tZaUO`k:=3sX"[+pG$&s\h7\V=[QXA1AP%j&dI>Yem6Q?_5/<'MW3.:s_]5mZOBiEF!<9FV?NSrC8K
%i"3V12WcWeQW_IW)SND0#7ak^k[]^1#<7nkh6G[iY@<>L_9gdOo3>PmgQ2$WfYiE;1h-)\a2ETlQ=4Hcc.Kt0123&j@hVWZ]Fl1l
%,&Q=j__X,oO7=62%L8T+J9E6_+KE[Z%uuc&>.ZPV%qT3&ZQ4SIA^V1s2C(b2M0aj>C]/k+6es`_=S#ZKgm;*I!2RP&=Ng:a#r8Se
%f+@O!7RbXhfQHhW1l)^_<j**m]"'0u]0dG0;!?*"E\ViJ2_GgFedKMdH6]YQ(,]XF<&6\XE&\lS)mldr`_/eQ+LBX.>WK@,VMWGW
%gp,:DVA4L?e<pe6JiqY,`^#^q0\dF:$k1+4"Zer&FY:')mX\"KFj1PT-PjX(WL6bBFJO@JH\Mpd>R7YQ2_5%j&+kN7K-bHhp)Lml
%B5+Te,&`<Prua_Y(kZ$@[MZtd>F7-A"]"H5;9l"`Q3@._=lP8VI)u2Z/F`^XjV_nsoK?=oHD0A?+c2X!+`DJkLpi'n<gUYrFX>IS
%V(,@<@fU'5E[RQP`]1DE?==(P1Kdb[A%WrnM8VH#a)DG7^V%Bd$i"qiOYe=ai*=GYhZej'`)LF+@lP:Eq18[Kbn<hUXKPf>&c`Jg
%Fs[90,B\SXih-[j"pYs1I$!ToQ=70K\QtldU>.Ru'72'r/0NBBQ=T2P1@c]EWMu+mle"!aSn,3Q,h<CUG!&1m.'X+Vo/=jq8,Q3V
%!i,P-2peh_B0_6BZpC_<0S^YNF'=q^a>3d8#`]9`'[MJ%8g.%o$%.=Jq(]^K`LR/%QnV&;lUdRE8/@U.R=Rh@mk/[a'4`LNc=LO<
%h7E-l_+@/eoRePKk<YWa+QT)'HbTR+$7Ztg!mff!KGHHhgme]KDB/*@q7^'o_MRp.G/<*tZ3U?j"B-_ri+]L[s!FQq;cu]:_)"U8
%NQaLERkn]i_Kn$mUt8JqI]1b^PhNr])kl%.YaC%Q#3d]3m:aiYc">:Pq>E9b9hRMO)P4Z>+U+.^9SL#$P\?\3'&.2\LRcE$41dR-
%E9*mK]Fsh7EMlSjcC/FY.m\fG9:B.ch_deE]!te9h%>?^'sfWq)$iq2-"_W#N-Pt!M3'g8k1kQ6g>CpG"S`k%n[:Lf,Xda)G-9KB
%VH/lS]K3UP+]^C?f-'](jP_Eu%2)(nKc2!\+fu]]X\X"n:[cRWp^ClLe*3nYJ2>6fV541-dXX'aP!5#U3-+O1TPm+4gQZNr+P,0,
%;asra@kn6@1jEDgJ/F"l9V0A=JBX]MP=4V6ecC#9R9gA2Wgah3htLTI&n[Xtk%I&tgA?pRCda(s$-LIh)ME0/^p&iF"fDs"H'0/`
%ZU'C@li<m'Zj0HX3X:5OA_IOm\\=R=$64^7"6TKpXT7U=O0G^B%_r=%b@LF#Fi5-+.E]2(O+8HkZ]r@P8<@Rn%=h>lP9BEe%-eT3
%0"+DjE1+<X5g2B\k?Ql3QCn^U!ROqV@`b&@1.Z+#fJO&i^NBU#Lg*1#ifmr:HB0H`-^8&K"q)U-^Ke`]l[^%(O@Di"#_?+?S0pSa
%9H%:\Rrb/$>g!Ibgmmth^;0k,oU\lTD7.)Qi\#'$ph2L;bb`nCo0_QBOEbI*4V!UE$KO+t7,GYAR(cf9(tR<aBE3&BfZCCmpK#)i
%bUG`@LEupEH[j%j5a5#?hM`kM)B9_`I64J=YWTlrp-GS6h)*%RqK*9$gJMT;\8RlO>irP=7fkrJpmK()WDk(t_[M+c6mnjNAd(M3
%9l:&W!X6lFD</nt?icr=QRh!g#.T1AbuVVs)IjqCr0RkSB<hdN,9b8V=H`efX6GQ<(dR3sQgYCOCLc%'-'0C<HLV?^g0G.I1Q)n3
%o[XY."Ci(oVelVhR$C9W=':a-;RY^D]@<C1[Xh`L<2['"\F'Dcf_-*i\:hASBnT1i;EQZQA7r4!\`+%cM.keXKXDQrY[e.k%X#pD
%$2U?\OiR\6\d!#m,g+h_g!CQZR=mto2cY7=nMh.$*2[-]mgM\>"7Be7])lf<&FZ.A6)`RXD7)917K?Y[fq/NqXYT<7Al[#,S6>NC
%L"$8(HH'Bjp,O-W:0!rQkIr>H*XV;l8&6q>)0HMah9aph#amlI95`4PeVp?9@+2]An<f+<Ys#aR]*1>4M]r$I"2baOiWcCH136_3
%k-\Z$.l:+LT(1hqcjE*Kr.I6h'*AL$<9$q@6=S*4O;lFf0KJd!Ia9fr.n2Ru\%=F`l&S/P*b`oGE-m5,N`)Ydf`I1:BV/_L`5in-
%cu"CN&3#K[pu&KogbT=3HqLU=LSJ9ce;4e[3g$3CpUtZ$<T\j2"dp'!!B8d>L[Wsk&#Y?^YZSaf0XkUBiDSY9M!Yj3E#tZ;SWt8<
%LJ=_5GVX3=0ddMgK#rphUIs=H?[3Uk@:M_PcJrPij:,H&qDNjjlPhH'@p'0$pG!*NX)smjo3+E0AeV2gOW)aK;q55k6>D=JZikdi
%-Xf,X-;2)YPE27H`AVWoo??.W@>7$iq7;JG-#clhl[Q6N$6eU\1kNi;EXK:99H[XA+nUeIM$@8I%>tX-MU@"F(2=//Akufr_m7^q
%ADdS;Zs.ae`8p#g+1Y%a*3OQDoUR:oXFEbZ#)`RRSq4WpZH,&scg8T%RP"UE*e+]E8i,te1IkOci<Q9>%+?h;WC"#j0&^P+1E=5`
%YDUG]3NsLJoLT`RNJV;Zl;8UH#r,o3HWV2[!q\H,Vk+s^rsI7K$U>c61b?"(-\8fs-ZOR2#]M7f+9BnU4/S*gRS&0\$pnd9WEDh5
%Xm);K<eR0<dt*-jBf.0@i^i&;n2@pK(!"=k7,07n:q^f7'l:D.l&P,523Hq5,O*WbR08d_gq^(U(_QhV_Wq[S*3$n>j=qU.6'8>u
%!6#7jjB8IR.[g>FAdYrL3DgW?bQRLX=41=pOI.p3(!BF+$cAlH)$>pZ$G)KWUgMV*aqE:AjQ\5$+6/_JAeoU5a'irrLL'Q\]o3.r
%WH3#L7;''oDO)Ab<W.QaG!,O@+aDh!^=u3?2PF(a^l;(n2j\CN:^HoT]a9CT#mM&iK@mntYX6Qel9KV5^\_KsWWLt"hCBb0:$O0N
%9u,Su*-,-dT::Vo&Fb[/."j[/(#;fi?^(X#`qi)V\K,/F@gJ%N#]RW^UMbfUM<e1AOIkVLZO)'QN)&:93d7rGS!c'4AooEN=)J-f
%2&_">%GSfl-8A]-qM1ji`B4-Uff'6m6epco,<J9aC7*0`E11LDGq2qD8S?u/^VK<t]EGAs3&EDC`]NhVc]F1LJ_CRW%lHFX#bf[-
%Ag7jb.<)_X^p4S!2X6i2'=&dYbmUdN]k6ta)@/cmgM:HWU_=;d5+MQ'`%SRu!:JHRi<^$MR@pS\>Qa[k#@c``!hj@,S!MIlIN`sP
%a?$p!%>uJQGik0LX?SC?`DN^]`r1HeB8F1flp($2;sHX1!sl:KQ4`B,p_]RK2t8(T7XrJs*dB1Gc>:??IUn/r)=G:g371QqeK,k(
%:-sM\mS5e&NUq`(8N&FtBUf?!q?lU)Lfi,V.l9.Df9^D.8.ZC),_t/[-"pYS'Jb:sUH24j17:[V@S`hN'D3$3YdqXZGnMAZZsY#)
%=u,SRHhb"F@m'94YQ;U,&::!B*cV='M/"+Ed>@5K9galI4,O17Bgi/11S,uR>>d/FZ`%WDbq^I`8?*'M2ebT,VT+r5)3hYAob*X2
%)N=tSDSRq1I00[+[]/HIMj%Oi'7D0blg1HelP4IW7kq0r@AqpE:8jT%l*:FZ*fmTR&`WFrm.N6QTcSr]RDcm,W[.e!61-/ElSgk[
%Z9'@cWf2@_aV,el7%^3@M$>Z<-RLQXaK,>a0L3)Wc)VCHk'WMsV;Hrh?l3Y*-OI"bQkM4&<S4ss-(FKt-GeP,^)G+'%a`Bb4Z;9>
%$VITC^hKafhQ/IMoB;ZD(<#qj+hHN5_WFIaB:!@RakM?4UiZlRRc+`2'$*!^Hc_f:/gUZ'_k@s6&!`PMAAWIA%<,d&7)o^GaJ"Zr
%F491UK9Xg6=>W"EQWPCqO1AfJX8\f'1C=>UWD6eDEs^pZY&q#[707gT*qpBrdVO+[D/aTX)7+R#rBo!ea=%nf`ke=]arXOnOi/XG
%9-3JM-E7:oaPj>B'J>R\j\#55aStUqK02hMdPE.+F<6?C*Gjr*#B,Jk*hoZ9"u[`%+Bmej8-WCglb[)'A%<349]lP$f'eo[\42[\
%VapK:iWqa;b4oq\"UJSU9^EVO!mn)!,W?=mmX&'Z-3V/ST%+Z[(n,H!jL*4u^`M$<FKbOr,^?!@J0:FiCQBtE:%8A1N>E5&.YMf6
%i81&DJguoNP:-rj#Q*kDR!\7cf=?#HUaEHImtLHE+ldc6104W8R9l_TjksQ#SEn39!B3jj'%c(RJ:!t=hbEKW,<G=WRuL@/dtdRr
%Qp_kbRQD.O]6n@;?fR_A_#ieUYq$B1LOILYZACTW"5M@^jJY2mU^g.9(2J=C8ZZ)+?78W031OI1j1]r%1F/i#E(JW&2G^Bp')"[;
%`ar%Q"mU4'7".ogW(fVZRD-auKY9sf]o3h4klHpTfK,2t/mhW`O9T^mHG9iOL]411"A\!'A([,\YT8]Xq5QnScX:QJ%ETbO$1E[q
%&lI)4c%@J9]`L>0aLpet")LHD^1iUUW`0fmo#_)jC]]&prf#%<1[g".o.=sB?+r%[D>dT%3Yjsd8cZ.p`B<Gq_/.adRLNj1ZZg7R
%ZVirSj5!2sKI"Qk`am;*'UiVsR5E52*)\#ojU:MM(:$_ahr6KBiA^6qX=&c8\S$3s!fA9p\.*#3O"/4j%,feHBo0_(>p7g'PJku\
%=G=ZgOp"e#]`nom:Br-L(.UYk!)JCR(2'X$4NHD"$sm^G(rNcePf1=<)=\I.;-arY#K.N[/0[Ag&_J"$`YAZp@[!0?MUS6<<02q8
%IGBH?^%J9B$[#kjNu*JX-rA$("`b[9i;'gnn7''6H0BjK"s1jI#mHK:'Y2@%X`0(%=!4q>aCgGW.(9tGq(WJO@9YH+ROV.IRAdnd
%;oY)(97h^:'>`3^Ef#Q`d^3d%T(qt$!_n5sD@8"+*De#$*Z#"o8qF^R$p_rEW4=N[C%uNS8i]d/[5E3;#5LZ_"<"[cR9.-L:5Qs#
%R0oPt>=3'iV*G';&;j!+8"lm_jGkjOW5Shq?s[5+B.?>g%1R9E:1>]F]S&W4)pC5`7bXNb\EOfaRl21\T`p(A)hbGf\-<`[D.-X#
%`$G!U""c*4FER3p]XX_2H%dd="E3T;1CX*t.0`Yj1r3Z%6@(48c/F[M?nN._b]sg[_'=ItW^I#*,?*IIQ=P[>8_Ch13eBlc"?E$g
%(dtiGpE'pAX3!38FD`jfleF^d1mZ3aY[s192*rCV:B?9?Ce$8"UjccN#]S)VFsSr\WHu+Z0Wep2A,QP2-XDt*@s0/rG'RY_`P"&J
%OgoeAe`jB`?Ral@GN],_e34%K38h$^\4>B&KDYc4AAK:$M1[b,SJ7KD7:Tp2$)e7`Af*>_'O5k9<UMOG^k%WmRYftu"_RPa0H??]
%LMuM/%#Pp&mu-W.`-GfT.+$'%,j9G)&qu*#j/tNO;Nb:`$4N"pK8$j=k^)b$87L92R=`?l1Xq#M/ZGTV5\c'I)gY1)4H8I1(2=JK
%dFO?QP@2IqZ4]EJRk^5;lG-cdTb34:4p=cSofDYIJ\G'8%O@-Mkq'OE^^`VtNa+>qV\g.6a;Jl>*W6P^`0o:)og@";$nN6!&9K%!
%"0j(Bjf@[<j4@oT&/oK$SuI9,>b\@:p6Qq5,aa$*>Csf[VeYs,+H85i*dZW$b]G#(EO?SBEBug$V#YSkRX?Ygkpq<&F9XJ(>1nb%
%Ek"]VT`]'=`=T=W!fVViE3I-g8#<"oq[(n_Zr`g*:C"`XKe_sL!]Y-bX%4F!L,IS:3bV*FX''#-+-VCg/eG)=<WEYmBLS6+//&pr
%2Mc^1r.HO>j(b'MO3lRBJJ:[ZR1;q--sS#N=DcjE9Vo_)5V&(tHpQ-,k7re?]eRM&5@lirS_UUfi0q2U-!dR';O&Uo@=eK8Fa>9D
%Z?Z'iY=W0(9cOfKN]A=i-4sc?k18--eQ_(okN:F2LEg1tVaJ$\;+\,ip'\#bn9RY*SiiCK2]NYANQM>`2"^_Jn.[WipZR^nMZb3_
%c:E0/59qBSYOf;A^`bbf$!l@N6)Y[m6C.na\-Sm&dqY41N*"4)EPKT)463BAfsWoH>#TXW6ddmVMVA[s."#u+($/s7lq*K80$1Jb
%-65#P"66im+/?P`%bhtG>a!T]l[tR9]4rF*1t]U]>q^k*O.41n@dbba(PF]M<f$_,+iV=nZj+Xme!$FeFRQ;^R>X+DMh4.'jS(Nl
%9qFIl%#0L;ZOHus30]#tnrQS`Ucn$4d?(-scb1"[Vgg$54I0G\#'ECL\NXO0:a&P8^@oUk3o];1$>'S#3TFC)QgY'=Gg*aV_]:1I
%[n'TX"ZsEfi1R7]Kol$oB6i^XiA=D_fRf2Z`.4NbQ+j5*@^:8%\>Q5jSOWu]"5nci!dt`)O0Cf!=#dZHOLU%\F9-s997afi\q$/s
%1gAos1($=9,7XJrg`AaDZ3EZ@L/FW:%#O;ZmK&*l;%5;0#7Peq1`46*[a-6@&5r[s+UnbeCoS0$p_4S!hI8el.WfPE^u9tK#r4.d
%/>)W4TY8*j_5&kE0We<Q)[:jGN'1AI#\jh&\\NcF\m+/>DD!VB0^>(Z`$$,\-nm=t!@P@YJK\KBhb_-[%#,P)IBXS&EIb.AlRi:;
%\.&/]:/JE;M2.Ke-fbYD38%_sl262eF]<[[c(L3oU)Cm1,R06#s*[$&AqU0qWL4to(G_?rOlXGP0SlX`bVJ+t2bUsIqLOmt/BKt'
%.?!Y6?XT)*JEJo.OqKT>)#a[MXQt*70T4-/;XUgjOL's)"CU.?6JiCa(R#I^',%Hp<g)ZX$m5[;`.B*c>p,eM-DUaoW@JXV7"RHD
%`0ED`V@^4gMqAsG\-?dH^l]iI[-3^`'dZ>b!uS7[0[S2^]lo%e%c=t9\U:3u.WfM5N\mY%1sl'/E<*K(\A=Rn6PYmjKX3bfI0t.T
%X5cgHn[Nl_l)]rNKU!()c-9BX&GR#1gqG+RN^g6++4`?ZJXtU)U7INI,Ir6=9iGdOc++<N!M%UuY$=/#/4&Z)P8TXNN/--ng`4Fk
%d(t=:JVEeeO9\2gW8I"G&1g?Y;IU:T9$l'QI,]>b`hC*n%Z(T\VEkm=#'i?'eN`DQUPtWhigFfR-#f4R*Vk7HK#]lNMt4,_UFHgO
%Qcqg$<6#3"/JV`*9hoLB;/<%2pY3rUX,:D.1i/d;G&&Jr3F!?o7OolBK.HN)H;CB"7(RBZmVTPqN"/5VS%CFjI*GZ!!lmN?Jsa4o
%6%fM>:,,]J[lhn<)1I\3f-nce3!V&LLIr3"C^)gT^sq6-@*=4@k-/h<O1ASuG-#2Wh)-Bp)<7kGAQJ0%Z=/i`CJrgk;W.P`DaR.$
%IP27'oZb!>dMWeP5'oD6eB`C$;=bVF=H**jRp-DnH?*h@BU?`4-MfP5=?tSpMT8GWF6/t!ffr`/q:$ZGT^dniA%DAW@q/WNePN7[
%=f59JL%cFT@AdS-TrI2UhT2E<QQ\-Sjmp+d[[2Z/Nq5`%+Ae$-=\UaFWML1'G&)-fmeV^8A72KsmSmQs'^V0W6pN^YdOAdMVg@8U
%&Z2/u54oFTKWpOBd_HuR@piYY^au&_Nm)?X`ls/a8DqST`]6/99"PRSFEp6ZHjXWG<q#duIJ&?%=soEFbH@n]A1N>FAi/@P_pAkg
%6=&](XO*E(h;f&+V#O]Vi@mt*l5gMT=Id-[fm2R;o4eP5?<6RrZW!8"3.?B\l=&13>PZo&Y9((^3@k9a^$9;O!Q=VO12bhX]89AB
%p=3]g$V[9A79XAD*g1ciGLetm%=U;+C6,T!itR#i4/h@,EIA'3&n<(s[L)Hig.ZqIS>cig6>XT3ND#2-:!g[)FmG+3gJfE=pY>W<
%1C.B"L%4eVo;F$q"ZGJSq`ijQd6[@dKNE2%1>`=[h\M[r"Kn]@<3/jaA9;bj09(<ja-%=KJ5F6o+9T@tLEd"8?P16=$@r_:2p?0W
%0rQa/]7]sBH1';'!sn+rmS[Nc4n\%=E;PcY#$u/t,8Kr<#"=t[!DX.6^)rE/\X%fVn%0gc]CC+K+_SI0l^AZiIQ7*_IH$80m_X>C
%J(Tl%S51:BbYOAk5m9e`M%%h)l251cYAVe0:4\[D'X%WL:Zhju2>_g%+-qY4g5">"X>605BGkrK\gB$0jY#nSWS08BpnGCs+_gEM
%-PUM<:G-GHX3K3.04.9imt&NM9eO'GqM-A+i5(%!NDjY7U-ebm&E/75DI1uBpqF\G%@hQG%W692eA9U+^KZ*fL\tk+aJl<(s6&e*
%Q1a?`-,EZFh%?F?rF3rUG"9#%+^=)Ss/?-_+KOeVY#XX5Am>+QfAah$#_52"6Z:fkq,,Qs<-,<4.aUs4MM)EVY@R%c:"_a$p22RB
%]n$Dt<jI\FC:8<'j-f"aT9!4P)2G('T(0PlRJe,"STmAS1.Pn6md4^WL1L\&'nX3[UXm$:!mY9IY<ih,%4'gQ4A5D!glPhaZ8:&e
%pK-jhOu=9Gn-_3Pc2HA5N94<uIhC4cW<)JD6QQZQ5u%L_.)?/cW!WI7bS'I3XHkFmeV%ADj%FWk1if$r?fcIOf<0Yk(?96FER2>S
%f\a7WNo+L7Th%`i8>'@)-_,d$OS:1J=`EU+[<]p7_N.o>3ficRl/Abo2WP1"Vl;?+9sS+l%OPhXh!g.]_7KS1db]C`U'9SIi3mC9
%mB''dYDmnpZar4a9$4?gB.XPi/%e.X"o$XPARhaNI?*ZbhWq<:%,8^,kt\nm=fg-j4SA],DhCK4"u<+EF*#300)McAII9o+[T430
%E)*J/G#8RV'p(m?9W-dWc5DtNG#qslCX+He&8a2sBo`)bf.Hmb]K@Ye/I2Y2p$Xob/8YFXfR`[2_;u\(>Z595arr?]'4ecl[%/*o
%r7_.^5oc*Z4:$5[nUf,!EY)'8]c_ESP;b7WB]OM'I1^.),VS36]&.Q&k223X;/jWFFjkGmNG/'+^r;PO:']U8^_seA@U?,dM,j]$
%8g=U!O0oCof&$tq)`nA0GU1<8aO];U6LTl-%@_1ua_OD):<9sM#J2il)/T5Eop6nJk)Vc/>B2@#PQutOn)X?*X?6Tq2Mr<gBlnKk
%RFK<]f[i^)\,LOVhb[n_[tR6(0#+Nd-l%nKoL7]R1cbKj<=o2-GoN0ZrcS:&:8WI<_=*P7"h7bJ1I&e*1V(&h?F=h0/BD@oq7a>F
%mC1o$9S2-I+%#\AFp`J#@p:thqtZ7=>]Dj..&Kr?]H(oKs)nh.P,8qG.+[TtY_4?DnC&`C.:a#Y<CXVmbm4n=dS7kfo.Pmg>]4/f
%NALj'bHPlfj1"j,]3f`+G`4)RA['?N$H/b,ppKq,@sC$@S*(3=L*pc#m[uqdlD>"2L)\r+;Ns)qnRL;=S_nhp>TTT;Li1J0n69hf
%Nr5Aa0Kd\cVthF-ba3=YA)2`<8/D-hMKd;hpq!p*2gi%)C*_-V8=N/f9D:_GjJI;A`.jmF]=%5hr4b7JB0TBdV8mTu7$f[:[kV^g
%hUT<)^Z#3p+b]#KZ=AbgCa@kmOAMqP5(j*3]"5<?2uLENKP0SFNl"WQ5(\_%hg$<\L7e=RRe[?hh]0IR@?uIINN4s+2bDS/Vlcs*
%DQW@%aaW!uq&@'%Gr:DU(o9/+H<r]D6:#\HTL3B'o31(Tbf6P/;%7s0Xe_+MdTgof"f^hJk*b!g7g<<oWu3fK_%)sRm\ETK",b8r
%7rBg;@CS\_35QG7J+Dm@0JDJKm??ile[rXJhch5^k"j^c5NCs&+[OeW*VX8+?Z(Pe\=55'KnRRhWcStCfINC"\rXRI$)s9es%&4c
%9"MW#4mg34U**P&^6I7C?Oif[6ebp3;QTHBT1c)>KM^gc+:naEb/-1&!c"hkDhBI=ZJ)?F4R9$\KH.GY)';5Oll\D`#BrPdj1ooL
%;Bp;iRZWc"f<_eI#Gk>Z,J_km?JJa(hTVfTmm]F2[#-eR_B'TVs-M:CM\XdjK#EkIb^;fDgn,+%5^FWiU#dl5-GAt\-+Lj]J1,`8
%ND:<j5I8!i$6G`$+*dPK;.J0BERQC>M:M9-?53][9_rV[M!bi./A[BmU54,UG8rW=FP!)R1mP?udmYls/5a5;A2aULE0Y3/K'%gj
%O,+f_[)O\R595!H"f0(R@Y^\K)SChEhDCo@3/TO=:"@>f%bJ;M/31lT:Ih1CM[CpJlj1*5\LN[VH_'/TaTRa/XMjHGcck)m(q3Dn
%MB>3DOTUPuB/D;2"&ibGOH(<#D#b(Ic?Tf1)EbW2#R.))&/j>.KG815,nc0!Cs+O+[:iqh6<6>YpW*\oJp1Wm#,mB]!)jF9Ab[pY
%p"7(;ej?ZKm,)QZ]JM+K'7tB,SN?\P9-=01$-X%_/MJ9>`6+Z;Y_ZLTQ4jb*)_]UCD$]ni\)JTl:CNg/nekTL]&CM%VtPnmT%on\
%R$6LWb)GBSX#O0<gj`>nOc5^4`C@('ThPQQ63s4ui["D.N[[knUqKk;^RrT'T*o;l+O?SLa13-f_]Z-j#IF3/9:t`>RCp7ccO$U:
%*bt2Wc62W-_elO`7"^]sms)h.>NPg"7AVQA+7U@AeLLD.cZlV1p98D8,!eK!DgP;'e/Roug`g_@H.X"UEbYcr[b=N>['4:9q5GkM
%M"SpVl\GV/);NLmYS'S)Z(H@Da'A#3PX+p2Qs?T#8-,;iEpUXJ?nNo>>Z(la9Te3ZklQ3jdUJu_X;_;;ahJ[0*Ym_ma4f;8e(LJ)
%.4(Zed&mj\@F?HfmG%O6M$PN->.Wa"T:deQd,/i)]6b"-m@nGYDTCA2S@.q@q>O.+Q1O7GImn'sCt3H)W`_[pi1mZ@5mW(Ai??Y"
%b[UVccX==N6O&nHS9AH,EkKLR<DT9DP2C(ai@K)T22fLJPp9KT:27c!B7ueZFQoqUFRTo?ha$n??:uEr+ijJ7(HeL*?bX<BZ9%f/
%`n\;KK7:oan@[V,05ullBNK?N$<A0NR-ibZmK++n];\T?A?Q^">5heraI8`+4.?Zg/#eu+fVQq7bCX9dS[mN9gZLmjZ&2'T]8BE5
%Ge8jq/12a.dhSm?_JO&pcY:(/_@sHHfFuQt]f!D3_U\rR28:bL7`[IQ)Vle%eO#Qlqsf@do'#"pUgp*@<5)s/)k+]/8JY7#&nN@d
%-3@oH'aA_Tds>];ME:'^S8a=V2VnO@)X94H2>"[^Yi$@3ahHYPP_`%dnl%#c3,Z4887n[j7'.i+\S>%k$NU_R;n5uCdhH^.`t;?k
%EXQO@j=<32GL2M%JSTYJ^rZ-].(WC&_A+>(=s>qdp#er)Y:t_CoD5SV.`(CXQt^?0=2u80/c1Lg!$,@\&uZ:4,s#sQmJVlh8&\F:
%d0!g`M#+i7\V4l3eRpT[dR_3_ISH42"ABeQ6J5.QTiJicV=(mGh>;`#:]n6d$"[qcJK>dAS_r^rQu6ifD-pLrN4jf%f*(G!Jq!"l
%!V[$3m:-NC@bebNGdV</Enjl$r>"-a6.b(*p:9kHM'6dFd5q#NOS%5Lg]f2@AddSlG-BXWXAoXkrGClD5m3&"Zd%FC<Pu6ef?OD4
%ds6S"*.3N:c9\+J[[l`6NWnPdpYUjWU?JLgare,sn6$19[nU$YPe^<uo/d-[LV*Y9r>&XqV<O[+`Bc^"_>4<[47,?X3\JqN.RD5L
%X,Fi0fP#iT]ZI#6f3I:'Ktcun4=HPbm14_eXqp;#\)@9D0_is_gS%U4"ks0L;$/7BYn44%$TqUWc3lI!'_kI:';m/k[DKjV@?D&^
%^=i&'p]RVJG9I\.U,8>hI%V)s?#PLB;"_`d)GZF%X+S>cciZWZT.[-*dk:oR4:oR$]>G_n`cl`3H[I_1dNEK3=1qR1lI2J85kgU>
%KM,/l;CKHL+/WG_;\r$OJqE-AMJ&?PqdnNf%ciRAF@J)C..qW$eaam?Z/tQ5c`b+Us5cXsMect(5q']m%^A<[m+e=n5mE;:T>OMI
%\FGYEX="2EeAuD-FhHAHJ-Fii_NUO8GdjpWUK#ncL8?"t`aTjR^koS!N%[i6:eJ*DN)\IakkAAs*&cm1nB.Lg:iagri?&GSJq,RM
%#:[36Vo5>iL1h5#ZO8"OBN),p`(NqR,toTW=[;(92F5,rnX]_o4CsD^d(k"+@QcdYF[s9Q)T\4PYP@ZZQc9eQ=pAP4"G]W\jR'8W
%UB=J#DCYag90'9#(%e-8lb[CE\tC*qhbqk&8n;=;nt4X%TuZRaS'AP!2=jX_TZRJe\sm28$dmGm4"P@pH;=IEd*O4DrPAbQLUWAW
%hlep4a6q(U@Qb$"<l`qLVP1(!*h1BhlIRi[/d%SqZYq?kQL5AH-ZUY(Z1T&j\&@\&>tq?b;fB"lg[E0tA2oq$`oaV;L)%<AiR8db
%OgcC5$&^V0kLS.[&DM%B'"5qt_&"]>Wk'g$P'T*S]o_g9^tL`h%tsC*.+c2N\/V,rf<T6`[o!co#g\uF**)1n!2se!&6uj9ld(nH
%0EQIHdeH=8J);U3*!1gd?d>u[.+U<*%Hc(O.R&Vj\/J?uq&F"G.&10Qk#bked'=Vh6?HtjEnOci@rUD^^rSi_HVi>h[@:<""kRkJ
%RZ^*+-(SZbnPPKVa[<s2pAbu8X"0DpK"\Zi4&LEhX$M4h+Cb(g\(OdVo!WrTWeB@iZq@qPa$6G0,Yb:mig/j(J;-okC&\4S]dU;;
%3Ajt2\P=3V(_?g6ks1)9c9iW\XUhXT3+)ZuRkL]!nZ=lF&>n]rW!P3#OU"ond/sMQb0'l+ZOi$eKa4L3eNe(+9t2hKN=ihDXQUNj
%!Y<9?8er5tIo>-k'>D"ZnBBM\h'I^JYi`TM*sV@XdN51Qj@E)RR(+A#BaCCi:Mg&F<CXC17\A5^2`*#T6)Y7V)/X@TE0o/5NM&JT
%YALj-Cl==@SNjPtA\(?47Tug$(hRS-D_>j11mg'U+=:b:p;nVA:O&Uf(R4mtU6B(E9-<2K:U%t7Fn/5hp\o[@AR$nOmP.O.BY8-?
%_fLR@pZFRAe24C.J&3AV;Y(pqm7[s[]&D6>b:u+7A"c[c4b/=s#h.3h::SAnc8TdPc)sN5&RRK;1#F;QLp*qq*5SCa\]O+\Hm+fE
%&4HWh6T&TD^ePes##"HS2+rTm"HM&Ra0#0@^\mHATfj<Hqd^q`JeaJEG_.0I?`.+7?;`G#**QjT\&DnT0?<R,`L`$)U#EPROb.Q"
%=N5L0!tU?83T9J9ZuS<.D#WN%^2Yrd-Z@WaL0abu,hON)JNSK,N_r+J1sBM<qqWa)Ua@j#M;@Xu>O*pa`L_pHOkO$hT8rZggjK1A
%7(LgqFKa4WDQHlU(Ib(cV`iW"i2u+-SU[d\-4)3"-G]X:f("c(hUum0DaLWARY_@436+IiP<;)VkBHC.rHDbmO$XV.?-o<"R-B84
%Ar_F']VGU!ha&t)M`Vu8,4iHB$[0VPe4:4$DuSQ(i]"ra&T+;W06-fRk*f%%Ig%5+Z5WsT6WOX%@jlDhK$`m),B@Yk+((LepS@R$
%-2rW4qruO3ln\eoL,HQ&"t.,aL.8lQH%Nd67c@3o+IL,fKLsF9a7%9fR[;Zu@s*2B/U0Z_MoHX/GjRRf0J9RA1mQA%hqg[k+$RuB
%RPfkSJJ&KWX_?CBbNp?]]kPZFn38I"Rl(l[%=tcb:o%qdK6kl:T_)u(8Q_6YZnjBs)bZMBTf$V8OM00rYIY#"X#Yc/N3El^Ga,5;
%IX[[==0(!MUPpWmadVW.O<#V4GMJoIqj^-TIk.ioch]B*LeIW[nhEHE6f)f#JA_KPS"iAI0dJTlk4:R:6C.[!1b\uThp*<)q/RZ#
%'omm_pSI!+6m0=SO*3UJ"jpm9J&YFCE<GfU*ZIClmLi@p=b>86[63g9[7>gnaTUsB<Coks>V-Ba2&HOT9b4!*)E([TKCMqO<fKK)
%(qjR]=q=(0a[+GC;/lIJ+4gYAX(S[/"Y2Aied9q#+hb46[l$0:(06NW2CV,81%]&Ff!l/u%0&=2U(qWBT1/r4#e7Ir_ts6JKD2&9
%QZ4Q-'23h*F),0+TQ:kr+!=s]LISNFg5N<a@HQ_4Q'bnZ[2,fpg^1<uY`*"lSM6PZ=;7>E"Y3(T^""1)A(qiHpJ3UFHkc94b1!DA
%lr1!EL_S>XD4JI'r)9T5=UH?&ZZj/g8J]:scOU?R"rNPbBi\\lAl>i7LPekcOJ8oPcpM5LdKonU\;D`UXbF/@WJ#.2k>31h%f4VN
%3m27]qg>6C9.h?b+b@)=5ef/)bZc0p?NaL=.OjS&F'*MD%^I_D%57^%/lQe,+0`KZ4i`Z5)R,-a>S<AY];WpB!3?t6P[q]:'5S-g
%+%,\Jp:>*q1`Zf'Z[o.fZXdENJgKci&:Hd/aDYSOWYPH"J_<7UDcQt645TdQBUmfYMBqWRk2>$jMADlu]EOlT+'@clf5p_9/Ap]+
%%?HNJZqe?S:LuX8kfjV"6^30j.GA=7=@qN#&EN):`U!6rE&55@I34G[;cn1R^`Hj$lEI!AD&<f`or\_ln?(rA]mo\;T(E]pjZcgh
%B'[glIc/Nk_n>u<[Ub4Ie:(Z7JkrL<o2KY^fEE)A/_PY#,NhuAs7`QsGUt@nhQ^)knW.U6-=geWN#`"t9$QG&LM%t44@qc/0>Ne7
%4pD7M$T&o/j;#3h[%6_t0sN*7!8#RK(Wh6PVU7<T;uL3m;eZ\Wp3[HY=o5mh5OLl&j]NqI&6UqZ?=;Zo&aMcLYd'Bk(.ZtVJnMU=
%dk8KRhX]dB!8'MeUY[YdXR;8Ch1Q6*U>HACL9]V:G3P^7jVgPG+:tu'\P'b2R._9s#8+;'3;GDLigYf!H.HB@[??A"'`Mg:hQ=4E
%=S!U+r<i(;N5I"opr#SMJNrHWOr:STF]<lfKnLr:jJ^MDLA0u#J[f%e*,Wj*-00'`^f&iPGKH1H>$7p*0re'A2+<&oW`J,)[qmW1
%s)oYo@LS%0>Fb#e5-ESJ99?&F11Bu_E?kc.0=L'l,fc*hSefOWM_R<W$G2?Ka0Td$Sn1;8RE^l)N&_Ce-u7;pii4GHmm3W_DB.U:
%<j(IR_$=2Ns*^Ni)k]43TN+6gdRoJtqec:Z06+`FM7!jrrVYj?_l$;_p?27hVbbsKX%g:`larmrh3Y`[ZGB1nOf'Pd6Tf'G\:sbh
%Ns0UF:mV5CL4cC>lr>Z9HRsmg:ECV:lBl`pArTEf#YtiD1PZV#$lBJYq4I.U/VPE&ri/'o6JL^IR6UZ+]JBq=3Q'nmZ$IXao?=dj
%F&jmjc1F,ENJjT8%X75NA"O=FlVZ(9ESMWKj/L<OJ.N(q%a2F>n@,eZ/C!/Gna*gr,S40"/kC5\2dI%C1q+Cpe\d9TR[/Q1I1NG4
%7r$RO$=Xm#8DWK%i$#>Z]bu8/orb4*i)2@:Q:!I*!@lnnd26EsYB0GUq`_an^Mo#oEsGgYs)GXootj(sWpqttm[5-:`J1rg!j71b
%$$T:OH4.i8W>0@N0a\=>k-L\!G8&c+f':i%9%Xd(U#<dqG$Zm2E4`mk'"g+O7bm,"V;BJjqn?),qUe:AJ,O3k=Q&s0?*Oh<egEA-
%FSr]WTQj]nXB^E,`MsYXK8@5uj@]Ii[oLKj],-)6M\@fAaF^UT*B]1DCtg^U&(1i14X0)3j-`QV1d.B2NWO,BH.l+4;Yj0Sc_1Y4
%9)f4M4Q<]nD(/ESO.4H_>e(r?%;]G*f.sGgNKQ<]:co@*GoR$kOjO=54Nu?`<,<b>$!HL7S`!Tpj26c6Gt\1qa*hNg"O:oKIN]e:
%lWT1m]#Ou,[SFY"=0V1%ZXlQ4_oRED789k^cU3Nc(fn@FWY3<\O`EP?rG<2a@i/OrF2K<TKfH*.qJ1D]dN'ELJouY)1FPD)+rX!-
%dDo:<j"k#?CkL<5H#9egY:9U(kK(50rrFcV>mtu#7_40IUa(V?a5II8jQPf`#iG-[nEfP_=@dHe]2p!TH*0RLog@d)H,nY[#KMc-
%q$HM/h;Na6q_?80[>277]C/Y<6hOu)$n<XZrhucA[?=;OM%2DlMIeFa]qr%RQK"=B/F3O,[&nmn#BdG.$<Ae.W$UfE*7cCI1Ys#)
%T<K*c*j@YXq@H3+q0*g9Q!Nan\\-tq%L;2+WZ7].Sl\Y`4+7G>;A',0%W>PRGdDYB%sZs?T&<F*98V9&HGaT8!tT8([eq"MLKhV`
%WkF=^E&\,+lXgG6BO`oEksZ1BGC13%aI4t$pE[kB29U?`AKJ-hDZWgGTpM,WI3lsX(Q^.U9'B6X69=j8Bor'1_^.)<,5\4J_=aPD
%2/KbX\lIZs\R%K\].1/TWm#"so=^GgjF+Wm^`:hjZ4q)'?'[!&F\Zj_&Lu"eDATaG^>5r>&&FUnJr:\3r:8O*L,@%rh_#?_$";"G
%(J2=PS)TV-5)i4Y8Zd:H^-e&61D^MoQ/XsI;cJr\*:31k9Tn\&RdV*5U%l7M2d%7'U90b$g@3mlUe'(XfB9SL)0^jRr*8b!Oj./b
%b/9P1``%Z8;lt><[c#k<A2icgEP>O**'a7ZhqNW@L.D+]^MTf'r:9_pZ^SI.Hi'Yl;(j.LfR1I4=q:',hckRjJk$JYGD4&J`2V6m
%gFd5&^28gV^[WXdBUnT'mCsXY@gMN]II\0%m+'0h]C,IGH$(akXj?_F^UO5`%$+gE[d1t_VuKo338a1Ng%G#eVb;`F4+(uGjUe$?
%mTr_-4MIV.eHl`iY_H`]_E?AV9doP+MHW8+LMaMrEEijKS?q7S+_3QQRGA?dM^:ZXkI)C)j[;u(eP%/E%nc'j2KS?KbNXGX#q@=N
%?c=K]R(:C5C2Q?a<kn#uM/p;i7pdj+$7QgoAH2Y_rjsmI57OKM7i.((!\p'2UdHr=/'T^WT3&[r=NDskQ=[`5\kV[sc\(&9^p=ZE
%<\n3GHg5oedE3!UGrasK.g"2Uo]6,h[KE^hA%HFpUe+1R02&-GAE+OtklA+'KWcnBb8*2SB`oO4rHDV/mJ6<$8CcoL3if=4/qU#p
%h=7ZVXp0HJ[XuSCeL"(:7:tF21FgDh5"WbsEl&?&Ch2_GX";80_Js>>16'Jar.TE0%VaHE%F['I&^Ra4^K,^;"1c.t9(-!(ZtQT.
%k!3(BBI[(2="WoECGu)%;>4r4W@WG7,o:9Aj_(1ik\0%6dRe4UFA9$O#KCmTrW>:(0=3>+)6]$K-V:&ugId`K3noZR7+g-+$ufI2
%.ul&llMuQ3@/4nmMRW&jOrO!5(,'sGFpAtadqKr<2]f^Crij"AStK`HjZ)X+CKSGleYgs)d-FD7E@Xt2,AEtEX_Th4bl^0U>;Nq#
%8c7HC]-66R#WQd#WNHWWf\llaC)hdf<j>,J/C*H!>H_`UEOYN368DdB)Y:B8QXffFp4`&AC+Dj'9jN'm&!LnJhS\p]7'2V!05fk@
%&ku6*Gi5jV2<J]O0?<Q!3ecIWC=aq9@PbT0oJK]kN@#@j?B31ban;.P#3TOAA;ssrqFgF`L+o3Od.,jjdhO";k$^^2&/t?*['('e
%e!kn&Pq%#&A>F(Veo'k#,mF)?9D^B_n;XQ'N#&ufKbE@*_(D,q3In#M\Q&a\]cr8#<rM,l1s]34n`t8^mfr7jKr#rX:K`>TA96o>
%ONBZ\JiOK_bEfpr12UQ]BrSmH2)_1ZTT:t9C\od*n>r"M_KR*iP`D"J8Rfo<iB;LpC[A(Ba7&$^:()j^E3eP%f@[7n^Dk(3C+]8r
%PD'#EFW&fifFL]/!"QZOfCQN-k"pL+R+Kj-<e7qd3s^tph8an[s5b)hYIE%0H%a0^`aoR_["iF'X&$V*bA+ZD(sn:EWr:HHb:u+\
%QX=M[?@bQRFR9Or/"UlipQD>@"r](/n"Hr1i;BSQQXffVGJVRpL(35.kJ>FlqAT8An0>&lKk%er-0e;%BCXT\&'_j/_DeVV8j6\)
%/87*P2(T&V6[QBO<PW,Jfjq<Lb7rPPY>)dur*s.(G4?7q@I=cYXsr!@_@h"%eg)E&BiNhELfQiK:MT(4?ZuJ&os!k5b\)eXqRrEN
%CKi600t:s!30:madmPmm6QtO#m`iKc6MZAFfekJ][QJ`^^LeCROLo)<Be9ciEr&C5>,l:i(gDo9UtsdT22:gaAQYD*,k+Pn"Kjb[
%YCXYg2GG.Z@kGseKf70qm:<O15.:K/%,Y0BAW`Xh'ir/CZNVSQK89,B[<R4gfSS'B&k[b\3S:O[^Dt*8+7T"FSZP$1O9g-S3K^cX
%(UR01pp9J&j7,)nfVAq+ODM1hO/o4\@,qHW*aYtTQBEII?d!W;Ieq#bZP:0:b)nc#0lDPZ3iM)OQ0P>b<5B)M#kZB'cfW/,$mfEi
%l%:*JHg"g]KS(-!#UbgHT5#%ZonNn=Api9-&hh7WntC\SkMT5*U]7TXGaeiK-@==]Yt^tcoMC$,@R,,"+ZP,f!\>3e,6IE9O'?(O
%k!Cogs':VG"faEfJZp6h8eeg+a2^fnW^=Oj]7da0Rs7=*HlC54QP9'@ibZY9gBX9s+1B'Mf.`XpF?:^DSl.>!aL8tq:H1G/;n',F
%][A%]rR3F6*7gnB4.tdK">gGs-KMHS>C7F2ESqp1E[_QWd1@O`=,Vr/21Wp:q!,p"q0t+Ce=p@IbWo!`btJnq\$[Wm\b1#5>YDJH
%_/Yn9^OCZIrnVQ"O6/\-`Dc&#7[B2%'+cI?"9J]UMe<OVhh\XQW,4L1W"tR.N3'?^%Z@UA[Wc(jT`hd?lsV6._^r]rgc^._OS(,:
%@8lF"C"U0j+WQ-2q92Pg]:%]O](:*rSqIACl@NCfWTAdrN?&YJYT>K(ZN]#GLE_SM)c5ud+(+8[*Km1n)/o+H;7Xu>Q&qq[.RPhO
%qFJ9)(`^iYTqpl+I')i`Umbl1\+Y^qC0m(ig7Phfp+/T]>g;NN-5e'D_;IA2Z4:XZo]G5B9rY;3oi+-a)W*J;X[Epj[e@i9e6$\M
%;h&*`qQY,G,.ngL#%UNJ#nmaI9JoN1NiA`ug9qjfln+CPBJ8N3Ba>bL3J'9@EucY<6M@*XGqL@,E=6nI/U@5"1t$1N5[4,cT(2]k
%5K>Wm;(/)%$]Dm/87!:OR"E@^+^41=HCY!=&"P;*NP)`7$hl)qG7T?s2PN-1.A#$cIj4nG.o@HE5n,\V`a\5X7b6'c7D3r+U6g^7
%I)L^\pS<D4g*&JP#'q>HADBJkCm#!:Y?Vg=YZN5MdO'n4Lj)q)D."Yl4FIBqNG/.?*QOFE<(k32Xd-L!4A'W2M1u(H5le#4-P`J4
%]]j_g\S@OVK%K:QkUQ-L'_M1RM>a-@dLRh;[no23Fr$lj$)jO9##9ch9AC7T?kb_8rtopWJ8lq93"tWDVm>Ei$Jnh8Z;`(h,*%JU
%iE1mD/?=?/ILI%!J75VKiZ_7(24rYdeeg^]^-G#A+J=lqfp(/4KVa<o`UXD.=8fmEe&\8;!_QnAJI83$m=igi!\;SF4sN9uo`l)G
%XIsP>$><S]MFVTql^S,j!bi+\RLO)X_&9^Ge<R3h@A3g8.uf?Ihc^Gq<&K2&ZFkl**RES/m*WZ7i+`9LrGkq"g_)N]LR+Fs!O,0a
%6mFg*VZSGAaa/K>,0f$IG.7S*0QF`HKuW]MM3aPDQ\qdB"_X*E<15S63qTBc`t'+CnkPJZ*.T=G?IU2D;<7jSA3'Uo((?NtW,2J&
%$XQh.XImre1>-ZJDiuc.Pc\<UYt0SKf%ZWmSJ1O'nPsqV5tY6prIjnjbNgZ'Qpe,qWsEYeA+CH17kB%Ec@qOr"S\X0'&'D==I&/d
%kJdl;*,FHnaAR5m8MMTC-2Wa;@5cg!l^(0>X_2+ZI@V$\INlC*`66WkB]/!GQ0KRnIe6XSDOq#^f#7/'TQ"FJ\4R-b&;R,UPuU';
%;"E2pa"\U4cjhLNXZd^/",g7B95P>oR5ObsAFbOm%Gn'fLm=EQd,f3gq=\e`Je;_)nLc94lO"]ee92e-Z#JQ4Ab?EQn+W6$I9j8C
%5uaB+Vm/#bkT)0jICTQ%>d\>cLL81[YIXV:?g>([BrM^#68fb'W7%P4[-9P`=W/_,*/m+*779F'4M0U)OMJ_Bhl?NPa0Bgl>YoPk
%70b\kl(i#NXH5<?mgr7RN`tKF:0)g0r!Eqq"cUnSbqF;Y@.$6:Mc;2PIX]`=hW_-3d>t31jpgm"'Ja<3Z`%&l'm:p[S627!:'lj?
%&5p5r-R7B;;M!S'q;2$2""?G2ijRa1lB`XnpiGjRUjVX%qdUS7aNV*ceH5B)V39t`Cu5075s,BK@P](R`[Lt_#B:msh0i/8kIq-d
%#O2:Zk56C\k2ZN5VI6J^#L"[mae5Y4r9!?7i'E(%$9Cea'`h8'_E+X&Wh@q3QCpA(2E^Jo,`"-'H!(VFkX@rp\&-"l3t?HH'ok'k
%Ai+4?3N^)#1s'g_cle.<:iqtuL*,na9PH+K"ThMVq@p=2_ZL<gCE[r=T4rnCSp*F_=:_^fYQ@oc>9I.L!oSca2I#E%J=.&#W&4]f
%R:sCd*t2e`VMJls/H?."ML_\:l8$Aj#'9D[%&"gX:au3?cf*]KXI+rsgI7P^UE2C0f@dRY*F+n2RGJ0nq5A3(jq4b+(^%U/9,T:d
%6uMCJC.`ujr?r=eC)SqS7Uj_U"j%t/_?eCY[QGM=[h*e*A`Y3===0"XRnj4J[\P5Fa.8\Df>=.Am\IZF>qOQS9tM/?8dJV^nr;0N
%btd"nJrqG%[NJ(F,.Cqd5%:YiB`$Kc;L;*<KfBr>-']Hq>eC4gL&9O9Yk7<nn?iUDSO]H"4BdnIm44"Xa1oot>EX>j.g<?V2%igC
%U_60VNh'`i,+DsA5/j/!,a]DuU&N]@SRA[(J!h!niFiCk-s\."d;XbK.6&h"iu0+`<=ThC-5,hB\n&tNiuFW=V'4:c/E-,'IAo0A
%88Nt`R9(sc</JdUB>FbDDNM?Ze<?Nj`=lsEc\2u]CqseEi_fNKo]@4aj.tuPp[:u"+g<:SE%Vs^1?P[@UFL\hDSF-_J.ms#2/_S[
%3eb;a*_3eIENNbMDsbVmqk+D3itIc#g&#L$4o/?"_r<Mc>e0#g+oFkLP=GdOLHjCi^b%W39MndX$2`GR&V#?I]eB<3r7`AW.XM!!
%,0X\%i8"%\#UK`bLY2KMbj4?S5.-%,"Lku2mCsXZA"5rKg\)3#E*"%QNB@mrk"*G>@62\Yal;L0\:4CM&/1TG[P(DTg-ih:4]Q[)
%9EQ=umBn02<ihj\%EI_kTinMU;*D=5L"Z753/dU"jSH2aG]X$Ypk-3^U8$5W57ZcaYAqSk1d%49QM:m>jS?u2THF2h'ulB$NA^q\
%23nUX?o/Z>$Pt2@$p=$[*SJ]DhJfq'C)2i3p\al3XT*95#9>C&*p$Zt*f5r-$pGGf=hmRE""u&J7[p83.kFX3nk^^/ClTIV9#!#a
%8q^fCFP`$_S.%s`eGdXB5=tft%pD\NXHmLL)t=KYG!uOV`9YPPkH<^tjpjH.Nna<Kc9R4"_nCKO0o:YQnK2Ht3h+[F]g(s4W'(:i
%^N`HKG.QdbrL6oC_]$S7]Oo.<"VIH5_fL\;CM96sC<;bCRj7K_j0:\o%#`TA6N!k6SNF[/CT@7Njg][jq$_mEFLCd^a3gC9N%nie
%=e5Rg0XLF9c-3f3UHNK'"O%$G%`85dX'Q>dJ^[Ia#XYG@e9I;6Ud4K0\S*7=^fF9V`l^K5Z@W0e^M2OO)6"g$j(%$nYOBfDWU8jf
%5)_c"[TN;']UcOpn<EtCKbLAK1E"eY3uS5ViI-%'pQoRo-XBG*r(ob-m^MDNmJG)4h#$\\g2cu.%94A(F>Xt*b(tqJ7MlZ5XEUY.
%MlTJFI=8!fgjYioG2T3(8!9Zu7_8ijCu8T39%q$#DgYpg/HFmBJ)8K#e!'aB.kMpl+Vq7_)k#$+\i5oCn@>n`6)".MrJ!t0j\>[+
%pWSF(,i>ukb8ifi-[.'a/biShHjs'U/tdl2HlC<mB6=^1M*J7rrdZ<==T:ER)/.Q$LDJG813bXNN'(,gOVHpP.##rEV4FdH&$<V&
%,L:'ghGmf#bo&t$:Q*IXbdQ$(%YIttWdp+gq.!/XG&R<7!7H,;q2(bDL^`B^$rfn5^`/YQ&Xa,W>X'9eGK,CBG?h?O$Mqeb<u5Vf
%b;o03K_dt(%,s.5C[uSH?nDLsO<W4g_3gCI#f>R5Jleh/oH4ln%kQ;W?MB1%C4OFkq@`^;?&mGS(46RfV^n@7]&tJ#4Mh.mm1YNU
%3ctX7$JE%^jBr%jP@0$PnX"*O>V#&C,$c5aIL[_sX"8mZ7?5d.e)b4NefmkU'o[^#h:]Ui%b8,YM6F\\Q+%_'0nIM+dbIj05AT;)
%VEE>Af02@6g/YJ>]B?QbaP%)iR4n_NJEK.(-Vi[q1UH`)6qaEIkfloiYqXW:EZEj.[ZHpaRMHkuiJ&AaD[ulbQa#p)#Ci<=T&Z0N
%HGa6pGM%tn%C^DbqQ^TuZ39f?3fGgZj'COP0&WE\[au)r.'2^G4:mk00]GPB8?Vi5q"i/lH+Olb.n5/B+:P+Xok$$F0GdnkL6?fF
%MCk.E.DEQfn7+E*QY#Q3rMBJ%K6T"QN6ZTn=_KLDH(ZEdK6t,IEU)o'j"e-L\+B9Zp0S<hR=6\F*/`mt`7s3B*7Mob<L]Q^I)P]2
%07(nI'KtX-!;.?2@(2>lkj=AHWn?nPDc1?C)Du?g\%[(alRr?d4)7Vbs*^M,I8&)g*5HlV1ea>(PpkmWp:_!U++5F;pBnkdr&%nt
%NYEO*7Z;i5c-^\#VjWbY'l5mYd^O]&fpCi4I(G(aO<TMFXW:&rHIX$9WMoHOS("":3l36Y(Ik%`*UZY.nY$l,ph,;$)"_-"3_Q!l
%-fk-9Db'RJh;2\^4`fph,h?`G7N"e*)"fqcZ:Zj!ejd.HoW%J&5Vo#\TXW"X2+E=/`:rD$9h9T+Bp>6->0&%K__ENcM's"^XD9O-
%q1+:uWAgoCYbDdHpRE!g_8'fCdg(&5rS7aNV;u&]+s'X3)\ft;gEIba:>(IKS0;ruT8]0GZe\a@]-?<Baj2augR-EJpYBF]O@'%7
%9m-d5#YI@(W)_A'1+F.>e/aO]3O1u$lK-3Wpr7J>7PNA&-+71CG+>WYP@N,E?X0uV'+\bNHp'N.^nG<;P)Em#o[jeo!dim':Rr/f
%iM#9ic!d]1Ri6>fEEi:PFfj\uT,1F40gQTRL^B4u+AVNuSTp?bE<1j7&d)sf61qPaKO7d?K-`?sfTH[>=XnIH2/<(lf:uWcR"4DF
%%WB=eHhCeO,Nae)KWtBV:UC%@AY5T]0k]&5MJ1@5rNTnYk'N1%IN%1J.i[R>_r9X'Ec]Nrer!^9IlDu"3XiV_8T5@4R;3HIBkWon
%X$AtBAE3R[-@jP7alK2PRt!GMDk&GB-c<OLOBqPBEj@KWnNsqs!YdjBEQ'Og1*WiWDdk%0,fQ[N=NXWfk#I?`^QQNfT=Xi=._`/.
%jeOaQE^L9(+34%V!f,KT3ktu&2.^;[m/Z\?p$3eAP)uHjX"6QhHLT#gd?Eqg8Rm2c<?Q4ZA)&=K*%eM+>nV=u]-!do3'eJ"I,t7I
%Vt/;Dkr/nLmZBb'BTjk>HuQ'N!'4.C1]Q"d<O\Mt_Y0^LSb8="qrlbg24%f>\ZVDG!m9*<a66t0Xh"aYomk)Zk@De.g90:2lS&/8
%kh4]:>XleHi>&j*ic0iFA.Zg/5]I^#5I3#*R)dP6qrHW3]-65_*ILMEPFAfro7hMU;+rcMG(;Oa>m)dl6#mT!".,?[P(^;plF&NV
%[cY=gs6@3.VT21X\"[OV*5dj@RQnuacs]?;";tdcX:M,Ma"SL2eW@S,'(8j*p1uONa\T\KEe'3Dp`d05O`0/b4Ea)d1^i5pM^BCb
%"6+$`9$[dC<sEk7!#_UU8:M!>K_;kiHs5O0=T[1U=4UhLUrkCQEc:#+?XER/*dKp66nZ-DC?-JD5bfYI.RQka>:`.q,T'jOgJ31I
%n$?6,DMkXkUMtj+a9*.hRseWJpDfu&eU'$&nip%K+FnWS/k-+>"YH]n!QpoOh?d73jqk,X;=OGVI5GQY74n":(Y!CEHh@p9iM"KM
%GVEKB6@G6YGAA&qSK$b>/oiVjs8&q.&"GMN7&HCj\-:).?ZC?/JM"1taI`[L$o<)`K%pg$)O"nlQbcC<Du8')k3$fYJehT[(>sRF
%`Y7Db15I?;B[P=jOVnL`qa*5@#/r4>@m%bS4gu:db8>j+U%t&8GRg(qjqT`R]9.!6M++tj8aU=gCkaf7^Y6,0$&SU#mt\ni%cH$`
%,*-bfn5,Fj64!cRdhM_nGd\9eRaMKt?qItrX"&.k_ArKs3o>P2jJ'JQ*0cT*$][V`"f\jE.A\MU1@thXjZqPEcr9O1+E!gp\l4UZ
%Q@VYfOhD!1b;sb^YLY,0nB9sF_h6:Aq3nFr!%nGCpIS;LT_d\*_h]261O@6p*b4,/a>BM3c]d4*Y`K5]/?8=N9dkO9BFos=h<HmC
%q=]4@Tf4pheijdCHMY)<_!\1D14@dtml"U%1;X"62(p+VdoWI-KU9^-'Mrj;Z41k8et^X-"$ER1<)=<6;ECHt<dcGG8\Np]65/$<
%=bL93EJ*WQQf3]_ORK]D7b7%5U$.&j!mUQK#@,[e"luR;8n)L*9H&(N$=`!TF6J$Ar/8''S_aRTT`p#!DZQ(XU0G[F@5rpL^CI%Z
%p1D\Rff)$/=njk$!f#52GR]2"l8(9.dAA?6I''uZDFFpll,]V8?kduR2:`S_.is]CRCIi<eQmji4Xh5J9bL^A6+q&F?ug'Baig9@
%!L4"4i<(\`.3)2;G/"_7[>j\W?W/pLXO?Q945)l.2RQqR<LSB-g/\X+jYV`R,4NrRp0<jN0>e<CTc9Sl'K-+3!l:Y.Cg^ZR+gRUr
%?sB/=W#UVJdpJU@H4CLH;uqbTST^*Y4bp=U&D+(Y(5s<=Xc\Lm2VPA;e^kOP_geg"%f.lGoF`\UV&S!7MF2`7`KQH:3A06`((LG9
%'P8&`Bf^q^:"BGTftl2uQM:'T6/KQ'8)28R$1>)#HHE\583^gW!-=*?(4(LS]PBCS0@P[H:mXo])d?SA_,XUO'[2W07?u!rnWA"Y
%Cu7i.@1^diXN+Is%-6kU`Z]ZZk2Y+:G*AHdHi#H$o&LVb^<V2oP&H]=W<f-'$qN(fTh((+Y:+<RB]P+AI<6SRI1h99:V^Y6@5*MC
%kRhH(Y4UW&_M1_W`3n:HKnSF?KbBdd\9/YiMQ@g!]I?@?4FM=8M,4t47S_+Fp-$'^@4_=;,qmm@foq.P>GG>0T+i!7qI=_'D+et\
%fM*RAYfaW=7$^L[;P)*+K**F3'l*Zrr6$6G7TG^.1b!^6MLVf(IPi-9.V8:S?1D`$NOXRG;gu("NC3qCC4::jjJiuQ*(jH1D6G-=
%bANQP<rr"Yc?o3mY.]/$D6KP#[CpnSK(%6lb=O[/=S7$#:N.!ggLgS\VH[ufk2<H71ct\ZR=:q]oiRMJ9;\_-GYQ'NHT`AGkNBJH
%^?R@qel*:!VFn$r"8<Jds0kW*)/1n'gZ<L80PB"AH&!\*EHCStG3mA`j*F-$?HiAP?)\XqYM_6kY@,9@^(q]BQM6jh@$d&"Ri:5C
%=_huDl3NX`XJECAGD-/R[b=;qiMrOB*.h/7W#)#5cDF!HN@]2[ZTVeZWFh<0'fX[ee2TFP;=WbDn0(m=H02_^W95J\3Ek,^-GPXb
%HW*(YB*94B8udE_!oGk=#Ci:%@)p%Mpfd*^@:+!*a=l`(2>@RI)F%7=WAi"4;"HqkPUG8r#m$fW_e!sMq!2am36htL<m>n"QPH<@
%>.@^/3k*4)-F9h_\QssBH#Au-G+RH"kbVF2Q>-pqRoLk]83]#u&Wi6rh(;>+J!kIlQDrnnHcAttS$D9D[2I!@/K38R8=tXA);Z1b
%%J:ZX<rJK!c2P1TSj.C2JM,'KSo"6YWY4lBl7OJlb2i"O4#_$0#OpoXrE]]pg2`>fJiqWG_Mdi8hqNW@OFQHh5'4m7CXJXK()s;/
%j*Z-!O/YYk7A.rbAF!7:VRh,$O1gf]i8IW+YNFr."4%l7]X`lF`lrnd-:FO_@'ZS"'<le1[lE6RldK/KV4Cbf_;<pr3JQ_<M'Re7
%<RX0ESr3T>:mGI^+YN`_d*3D1RBo++TF/6dCr4ag-fqK'Qi2EB$:$geTo'+IS31-j[9b4f6mAZ<_a5j+iBdG^U%m494bC,1_/g]e
%IlW0PX$D-g_JV.Z92%8lF8%AkT)>!'im">6+.Wo&@uFG$1.9$B@JN:^01YM*J?bMM3T1O<N*@W/%e-A,hsWD<%Ql\5FY&G&,QEYK
%J+qOO%H'8HC---=-IjE;m3NkR[@(pQ=IsfnPI$9t'&&If4iZ(JbO.U`T^DM#]F^Q"@QU^45H"DP\'p<AX2.oHmBcpjN"Wi`s)J7g
%4(oYX"D'3_gF3>5I0nK09OiE\g5[oW9PrqKr6#\"j%42190?HRL,<_e)"Ul.4iWPZ<:f*SDl4Fs+uAP?k$JRkrPKb?a*KC4:I*SF
%+X8laT67pZFnj>]'/f^/KFu%em2q#Q&R`k9L-K#1"=m(Q8kb,Oe3b5sEGk94_4f+p$Ph13Ad4qi`hD$7W!4E\KRc=]7'CiaC327f
%NN-CT":KhO["ZA(W]5E1<CR%MocaNi9ONF6H>MZYaQD2JmLHn1LIZ?5&$K>EDAUl?W"!:BqA>6U58H.(GVT6r$"l1?Oui3F":gh4
%:O"X;S>4Mf"DM:Hj"&"MEU,8QPeB-Z#A(/ldpBf-C`TFQ(9ea5gU8`MUJ@hm+0YmKG$f"i3RsF&j>cm7ZIlrCDHl@[gU>jcFDXk=
%h384L]3.DG_Yq(7r^"kS*lnq#%Q-@@?bqV$s,Z@+?2f%n<6<[1KShZ>RS0oZcsZRQ4(1$b+A\HL-lQZWi3)_]'Lj.@>qJ/;U%qdL
%$cHi,KlB9a4W-Kq-MK`JQB$#I2jd)d"b"E!0Et[rib0XlFa_4^XhPmmUGaaRe1>u25tU>o0=qh7'A#Dk3P/0qD+0Skf3L4Mpq?X8
%K6RgXKoBchCZ=+JO5V_?I+t8Zg\0eG\F$-i[91;$KWnOEME,fOb;Lqc5D*`dk4O\LV6!Ru1qQ^D'NlJ'3_EQN@6AHUm83u)O/JkY
%`u.GiQM-!7G,&;A4SnlsH//QOYJ+UsL6o"+ip.Y?7Lp`NE8Nmb%l\i_64_a11p$JXIjE88_nN.L)].mX$mljc44,*W:\Z*b;@`#h
%MbDEXI;<08KK=r@C=;)$e6RZJ$9kKTn#@5I&jfP5hX'2(d7/7nnLlCT,bW*S$^_#4]ct^K?.a]e@4Rki$G,9k!Pbhq48nM#l/m\O
%G0K"H+6Bmk;Z1b4,g:,74kgR#3N2KY<h>RVjJ@F>KE[UOYTsm#_s`s[&uSTTQfRRt38(H'EaPBjV-[6+ar>6_@,Maa^.GQhc)34Z
%[(_^NKZjq$Sm:STTo9IK_&<_IbB7\"g,"_1iHA:-!\P_fT"2\R4PG$FUT+"G.Ko]+F*NTXYEgUf>+8!Y-F:o/^:-68p@IXYW$5=]
%-q;5K3e)],Z]PnX>SP'0=RYaJRbUcY@'qa@7,ilLfH@@-7=M<Ymb%pH4\@$%C(=HEG[\"r'4,+H$+OFU.oJ8>;o1E(Wq?5o':s:'
%Pr.I&(2^]d6$#/t-Rko?@.Ns-=IL\UJu==S+!8;K6<p0d6Nq8QQ]]88?%<<:HULk4"5P(e@%h%PH3;F72[CJ1Ro>IN$#i<4=Db-k
%!65Y#>cb:`jf6=]Mj:.G/EPAJQ?Oc-3+euf%$;Va.kN]>%6I^,!*c1oBNCQ)$r9X71=K'Oc-3,MH*t@&];Y9;Y/]!KRcVTH%CLcV
%9"4KhD!nA*/otZ"`+F:r8NWD'CQ?a'$e?QaHu9';(\t190>:*)`liX;0B;/9#eCN6Hs1hmc0g%fI_RuBhlF)67@RJ&i2gitjQo\2
%Wp6'dd.GS($VTAF]Qs)X[FCafM!34RC/BV:2,]u[APC-;0b%"d#)_-<27YCP[WV[U/.8gQ#orJ34S+#\Pa5Q-K*`SD/@aG?2=QVW
%[84VfP8T#c,t]%_bB70e?`%s(Mp>!=c5,qO$Nd#%#r@/i!Fn"7O,dp':moaLa]s_0RN;#M$XY\p^cKsJcR>u\Rt5:-c%eTa<l$Od
%(W4\:FKn#CB(t]_mLjiKGE4OJrKk:ta84NQ-S7*VN(Q)'ddW7E;f3!3I[I>+^Dt-U,biA@Q04u+fFXmb+%ImS+*rK0Yu4OP&h<$R
%78\Qm&5H-QF<Y<qDrhnQ50,:.3E`i!L7]5cKIF/\euTlnkoE8OX5LGJdN9u_O;UWgCG<''@p9g>Z.>lYYF/<b32a0?''`j1`ol;2
%"f=Pq.Zd(K\)(Lh/r`$'Xku<,ku;?Pq"de]LH0^j732cD2dPa!bkd`#K?etP!<:jEMCNZS`_Gu<MBtHISRaVaP);Hi+&[S=C-+:K
%s6O_0?K/ra%*;K?fjC6qYO(CkQ?9W[o/MA6Dj5;N&P:(6ic,0ij5t?i,+K4l,@3LX!,&lfSC%E<IVCRAE31VS8X&,bVT2Y+Xl3!8
%=^B\PR+:*#*jZ'[oU%KBRgQGJm&\7/q*"$uCFs^@aB*4WAC_Bc24=&2=dmQK=.(CVhL;?DI+YLg1n!pU5HL<tZ"PkZRr<@Uimfi^
%]YW$G7,ZpEP73App"^(l[J`uc4SuA@pk\f(rujEMFUV3dcCh.FqqnRZSXc#24J63ZU%a!XBLH:SC'-WmpfKMNmgq<"VUI9-6&Y*?
%K1`r39%cM%WESac0$Rs@VOJT<s3_NaX)[#TMW:8[h';WbXiUiOT7Y#U7DY"+s3Vj"4=ou8+biSR$]C7$iBH(K2Pg]X!JY>LFg*'k
%%#PUdjF5^VFN2K5^THtJ*VB,_MD\#VT*YuZ0DZ!BHu:_;bA_)_5V`J7)fj;@rJ'4aIl2uD=9t[,+[*t%1,c4"Z0Jei@N__TH5qR/
%bt7=XjR/;'j4;H+kLO#5s04u_/jIX]/>UP#D[G2"OkDgiNcbU4@l[<Z^%GG/pm5=8rlb_!BMjTLL82!FNdm;AOJrk#<@+b$YA+M'
%*[,Gjme1(^;3sH>R8N+EqQj-G"2hQ@bks,PN(QjWVocC0l]+5o8=@jB)l%Ylj5j*K>J+a:a0t81YN_7/1aCVtGgoJJEiE"Nm]KJ"
%>81YBgiZc\nCQ'j0ZI;)7r*8PT/T!J99i50h;s=IVt/[#H*ZI:Cn2q6n3>"a:Bd#p<'c,^f`F_Zf).tpQ#snKcB<&Kp"7A:>_L[o
%hbPMT$&FZWJmAYB!SXR^_;Eg18EP\2+%J<'ftAj-4ol.oGuDFk1krC<P(puB4$jDkm-=?o/Cc$u(n1m+DRKQB<8^[Ef6gUk#@+>k
%);kiX6,;WoBpZJ?J2OjNfnNd]#u=fl)Ou_k3_RZUj3H\>_kggI8tnmZ<Ku!pqr"h_OYebk,"aDU!).cC'0(+]9IA-U$Q-"a4$YcI
%'MKlJqjgPK4RMpqk?[]EE0TN>1XT&1iC*6K$,f7KAUCk?EXf#h8SEn(".l$B.1<E*'1Lpab`hMBUUR+.*Bih`N#7Sn<m-Nh<!KSs
%X6G8@Eq6^Vab&`2#Lq-6nCW2RTU[rkD9fs5Ybo1;KbhmY__PBtFdRBaU5i0W##tU&=L57IUl*<O(>V4EP\f(iroGgSYL3f/`D"__
%SB&%:i(V?oW/%'`P>QfJs#+ofHKX_/YKFK=IjS;[[bB+hZ`aqRDNoG!OgEBEj4roSXsEl_X05`#1YqO2mCsXYUNVqQY)l8@\&?AD
%$Ng'"GPmAG0*`QM_lT]!OA^r,No/T@3JPSeJu&AoVTt7\ld0'=V&e/O+^MsW*bt:h5[b?;E8'f.qsVO$T(gZdP$nn"\-T\N4X7FE
%bXk_pOhKb7rua3`@,3PYLEn/3'FS.Nd2P+A'ebT"BgKQr(>'YO$a^9KP]MQ>SB]pC'(W#bP=djj)r=S_)'I<RMBerbcjp"<qOntM
%E\3Sn/M9p'><17snVRCk>qh0J#*?gsU5L0q`p]eO2r%Yp^lQ[`YdcBtT12=O6?:Fd1t"WQ\$!N?b@U7SU61ZifaaRo?K]\7cJ#Y(
%'u=[0*1)2-(98^R#[DnnO;G0EUR_FWUOQM.gp`:7758.Xh^69+JE=iOrqLInDnc5WrjqRl6]G\:g<XB[$@PA2).6.7L9ZC]\/2C/
%L%dMF=LbTf?Wt^[WZR8UX#RuekeR=a5KM<`)&b+\3RS#8AMDQCAmXB1/*ZZ*>^?I*ka6%<!:@o2=RC5M,+Es.YiYK/'Xams,LeEg
%ks[R-[210XSmpV7<N9bZh/?Bfe8]Qf1Z7q!I]asqgm$koJ?u_nK=n#o"3_2R10j*qT,XbKPPWVa:=jjLikPR5ho;?M,41],#L-%b
%K_:`s^aZ.h_2;B/'JNLE&b$?&rqEslfGmd2LBi+1JBiqHIWn.A;f&:ZQnRSb"-"+Q=(OH:n;S%)a*-r9FX[<klOt%$Pg%eT!8j8q
%2h^Yk)^XH=V2YuLV#q>&.%/<%JT_uO/P7=2RZc)/n?=(+@hYP7$JLCc6/<g,rRB7*F#W/$.0LpGNOhfA]!DJ_X'"WNd,/#LL@@!:
%o_QK0X>TMX92,m5^sL3>J;6k,l*0-k<5<6P<eoVF=!<E/-s:uO^bihP"7TDpdS)$U'!rF$U*_Hf;m[=$dndA5O(!cOl^gG76ic37
%Hh=+Bf&R$!>%?]7^jF!#QBe$H*naF*>Z_EV"G2m*Lub?"aWa]XRiPS@j$L7&T^fNN]]gf]ROUQ&;*nM6%<u<^PF>"mIVVdV;S(hC
%;sa-b[q5s;J;YdV#'3*44`!aM;H\Y8^C:]"a<d,?i+'e6c3M]3G#SnAFFeiXDO'S\XqP5eLe`#=kbU6Yghorjphi'0g[rCPFF)X^
%<GK\F42E3,Tr#N1o>X#gdo[id(=FV1+$R20h5]Gahn[kbUsY+$CXV%c(aoZ66T,)rUKD(G^>?nhl(F);A*D$?p:QW1Nt,Y.T\:=B
%.0o*VIhpmar9H#n^[0Fa/+Zpce$rK!ZFN2]i*\jh)H:ASA-./`P8B9a2>MPUh)D!dGK'3ahIj4W9jf%2DJrjNIlTMb2sUhVq01<#
%;#b9`Z5gM'=o#WB?E9H,!B$1_,(l<*^egT3#bkZVCOrqLhU]gn2GGUO36_*Nn;(gETeb%GOrun/$Lk8B96?'aiMC^4#UI;9M$<AQ
%ddS&K!TI&]Ct6'%&6pSb/_*(U.TQP9S=Lc(7:HGEMqaraGP0-=fE5R)QdSC.+AJI/dq#jsnHctfHi&Idnk'fQ?mm')0lnZY!b9FU
%4G_GKL-)CiH7^=P?9rq13l!ScL#Eb&1+6;%cQ2>^"`0OdIH1'0`Fi)`2,61]8P;$cj3U4>\Cs`,7YjiPBsVZ,$+[JAQr>0`Ur,IC
%)o:i&'B]k0Fb,mZ<_GI*((kcn.EoN]_VB?;aJZ-`+Q=o]2sSW4rKk;n,(%M-g6<$u.G08OcO%Z.Qo&m\R)'P0M[/V'>8]7t6&ZJ)
%g7D9lR:L&W>r[#;J:1kJZ/QlbXWB95gP+/3qm").<k?nk@uTJNYMc>!^>/7BQl(h7m9-:pE.qYqO0F;m-'bG1+7S`Nq(F>\cQ@Y$
%QES.s@XG1<TS<];W>)+LQF@d5.1R89$W'4W!ir4nH-CCu+Sh<.7oNpk=jEnJIqnu5AT\FB\J"!hZ:3Q7]NJ6OM0I^?*!Hla0Ni*k
%=`QOuB9;_5`V"Dc1on+7V%8#:7:^77#(ANZ#t.C^o5DZh3_JU_8$:aIZ&#Tcq/jM=9Zc%7J$-A]Mp!?:9=0;)Z5L6c2Ctcd[!Asq
%=EDjACY;-CjUM*\rO7E(FHo@Q]aLEZ%ls4$jA@Sm2a_mdijCH$2-l.+GrT-TF@HB;hK'A^dHg/WL/9S'UdGPY1]oEAUdl7."KFre
%?@bJmq/1Q)CJPq5S(EobZ7/Ag19n@_K%K\8DT?0Xf^M!FLGQH#_\orDE,O6e_mp<D3,"rKh4DNi,doESZr`5@cfTnXI@YM_!p;7Z
%,oh-a-9MR'p%WN1)M!VS5-6'PGJK.8la#q$%VhNH[8"qM-;&=1/W(bJon<23TCKHdD;4U"eQpYep0!OM_mXu?2ZBBfE4#=D']]gA
%+@LiR)NVk$/Ad(u%Z(>6%<2ksON/WOi.uVC&.P5E]9Tj\Iu<<`l-S68E=T,A:kH]IF8M2ff.%KH`oR$>h"4]/X4"^ZCRf?s$28g_
%k<j`*Y/4[>otO&84JqTZ5*ekmr@BjFaG=[\ghiO/f9tYr^[HTqO3P#<+5750HX`W?hTif!Ds-N0o)&_)kRkaVnW`n@a$qpUX7oc?
%+HX=t1P+dCh.AsechZ%kNQ%!`n9]B9:>40tlb>ETd+HOsF;W2"O5T?*RAp!2=lp&ZR8?`]5K%tkOU/PGe]Q[]G/g8>$<rYD]cKkj
%b7.:f[KTs@U6g6*SA*tFhS5WC-`,j_>^_Qeh$a5]'3Tm^1,B32'J7qWL_qG1Ga69+%r_rup.P#ae8#!B#YlnVJrp`,MUI:R?VU#\
%Nt75*C-upRKI9fq)a!$S&Eu#M^iU1eE@`s<]uPXG:6tC-,_u0Er6$6G7`n4tLtPE+MSiQU4Q&R7S-GlV`<U%lk\Kq[/DoV^p7Peg
%EGaOr0Ogia$Y5]SYCP04mn^WB3T+O#%f=5f6R;F4K#W/Yro2`hTUT(cANp[=o8dST)RdCCP_&M@5;`C\#gW\e[S_m'H6jItqgJir
%hmO\un=d+,^?t:/5oAYGE;Ir\b:u-66h'DE@R'&WHF6a<Hq4%;^[QNU_d(:?G8cn5s7qC>]P*`t*tWiSD#9qNP6Gso3%F-[(M[jm
%+n87V3oMc@BKk;YolAn1Flen`p*Pk[^bfb!6:f5207]NT[KE^P9F9>qA"G"97DKu9Nr?BjHF)=fqmXHmL.\McYhC+-FdN/ugb`ak
%X/F/F60c[%N'kC!.qiLo%RY[<F9dl7(u@%<I4*k?1iBhM4N@($cNnbUFUrKpF]M:JJXM4;q.5c.Z%MV;IWD!lb2UT1keq'+CMjW*
%Ro*D(+>L@]B>=)W0NCO9.E5iN@',]N4+gG'N]hG'V.b-J7X$3Kp9QKu$ZP>G"X[b"j+i44n70SI^4HG4k.fQ#i>IYj1N4sk9h5rT
%IkDrWn@7QRXoYT`2@u,9ZG`OPN:VBdV2Ung46I6q:I+CKl.EXhO,h9%%/#Vb.K5brdPNOUB?-jA7)+cjaUf]Qn^H@/iq^Jc+?82D
%j5-DPK']`bb+#lTa&c<(ho4gC&R#]?l9C#IHf'X;VEH-1J24%q][03h5d4sUiKqHinX$TPXG2"]Nq:qa<P!9Z\_o%XF6eo%-ZBH+
%)ZU";Wr4\X2ZC#ZcPd,HX,IcY;JhmP<T(SLJ%]M4e>X!Lem7g]o;7&5F>n"*/g4W+bB$K3E9E=*5>AVB&XFiGnY0OA/GDGe5N$Kk
%LjpCd<$#o+VL_&G1%)Du`?/`!"(A]AVe)/_E'Dk3ROL;RHa7`%(&PmoeOM3\fO%&;\[^:!bl!lqjro3MqSBbbI=KWrEDXS8=A_0R
%$Hf-i&sjrd@JtpdIQ1Yq8nu+A=Xuh5-EV'IV((]6RY&$O&&j3d<D4;EfW=!2YI4"?K#0)ppo7thmk_*l%0M)a$f/+/:*945\i2^P
%fs.!2`n8/POYL-9#:I!mLMr#-Hj*0GEDn;I1EfXH_`([Ojt1[bqDgtRE!B#Eofll">mR=Il_8ujd85662aoWB?>7-q2h1fejrhE^
%/"%^j_?Z:ba=5Q$@U(>^Oa/-Y[+PT73a2f(EUi=rXSEmU,225gkr75_W?BeZ!P>`m@Fo!M*nlLEPsTrND1X?I%JDLX4;Pca@*OPt
%m,^+&?Egis7JSdd!;eV"ec\!5@/p.I=[JqKcF,V`\&*-;KX4_3q>F^`a9D%/;-UDuLDLap7%LdN!K-L)2nF:iZfjHh:.9?+NEW7j
%o;kLkWVPf@fuuhL*rG31K:K3<o.2gGHX-Gk#%qds\UfQhP4!@c,^!O6;G&#.9Bdg\VL]#$\jU<gG_-DlSnX"*ED7l`BSOS7>aEIA
%S>9:3faGEg(4Y[k=hkSsCaR.Z5f!dmDc0rS4P%dp(-jI^Kmdc^D2u*4j(%&4<S;*m$:o"3]`g[i[h8tcK3Q@](/#[YO)_r-R*ln*
%CGWUJO8V:7Lq)m%"ICR.TMb=lG>+ja(N'iKJraVIF`H<O7/JJmh8P=3`SZn!78F&*P>om9aoWl\A^_ct"Ui5\BH30MnRZt$-oMD`
%dO96J(\*,ondFZ(__-2Y'#&I*[QlNqe9YH_15tDE/NSN:nL'KuIFYEPfocs`q8f>/2)!5EgAR_,o27kdg+Mu;!k3G8iLH65Z^d@\
%+'@h%U^VipZL>EIg40nVk\ESRkX^%jY2=:m?7N>^ZGcU'a75CD*=m5WB5W>tor4GXZ(UHFL$p4R5Xm5rj[]JI;H>YG!#j%#Wle4k
%'_:TPpfgoe1"FgUIlrV#9Icd@'f:D#5l?ftFGolXE%-Dk@&k3p/KkdKgq`"49Qs_Cs/fZC,"^e.d1"pHLH@3@&,7<NMV2ho*,4Tl
%`lN$&'^V7`4N8N9i+8B(-eduk9)Zmp\%4h"^<NR_d&h-9[]BKiDPia#+3YSAEF^e5KPoPH!kX3_C'?V-d=`#CKe.,T^u#n(3`4Hj
%Ht-T$@L6&K!*TP;3N1tma^"jX!t1H^MJK8faL42'5VaI3>rnL;U1<Y&qZ''&Z[17^+UF:%ET,Mjna8R,pp';<_2?n9(86NQO^Q^M
%,EbhX`DE/'!1^J61s1(#NbmnE0C?LpaeQ\cG8B1f>+(QPa&*tuWem9-q_oKd8[OIA[JtC]O*;O(gUi0`iX$nI)oMmL6*hZ:j<Q:f
%_</Ig^FnD:cqMQq&o8XcJ:&7tXk[9&p?1/TL;019a"4Pp;-r(T@E-4_+-Vjr"r7F\fdGgA]<a6<^63U'd)cgg',\kKVs/4]O?#9>
%=,uE9`(CPO"I5L,f(ZtrSg<am-lc`\X__h_I<(DI#tJNK1`Yk5eT/8#L-tK@Tu/Z=*[(QFH_-8E6VL2V"$^VN#YGIG%`bBoUJH5a
%'g+q]@tZjD^ebk(hiSMP,B&9bT&)"^)`&3F4$rF?TtkI6lmn^E#gqi>&P$?Q7PHu?]V46rU(-URZRfHC&=>(XSh-Kn=<\@iD5Cu3
%.O*iGCC;@]ipmX+TPe%C9qE"$9:[0uA?S"Fa%1RlWEon8%5La"b#VDZ0YQk`/5UQ_Q^s?p]J?Y._ge4s333@CTctYnX0)"3QE<1P
%>Cg:UhPjIY?Z;bj.L.CY%ubTr5rjnkn"Z4?7HP^/[PZ`Ea/SW0/QUa5+=N'LXLZgM?Jo3m=W+mA?PsVmW>dS&:1/47"]*6mStl'B
%">iTq+E]o,Jsi3'"+OM_\`ODEpR*%dC8rC71?)1,/T[[PWalM&Pg$kHFL#^TIZVI"r;of0\cj)MEs&cljDTWc>oFL0>h68WR7iu6
%5?jQT;-@!4,(7I'(@dNc-KO2l>*^*KFrRmj<7<`CcobHs!C'eI+QtdAM5BDC?B`HS%$kC0dLu@ZDGT/d,"CltpO%D'b'#)^J_cd8
%#TN*FDV`.H0s+C?^./![<GtWfl]e@nqJr\%J^Ih19jH-RF*4?;%5S6%.V??&/J]FMC.]H%$4GS<OLa.IiW>0_M"s/M(kCGJ"8<6/
%k,uO96FO%0%E9_u-oQ>se8<\*N+>Klc[I-bVD9WOPU1*j!.bqLm-CSoK0%*@YT7J/YXa2R&;g%2NKH0Y@M/c,02RC#[*Y'r+i:=7
%6jC5aW![Ik%+M+pgnc"#oMSCBU%gPd='RJ7m7ler==LY`jM"3!i.oI>J*aH\@"G4q(]6nK[`#m$"\D+R5PD-G31RdH[GO&4XVEnK
%MRO;@E_<`0A@^)s-Q.ti63X^lI=g#9=5VfLhn1>#DRn6:eX:[mV5O@G03SBT/aL83R`lra,1SW7?0$Snb]^Vn-.+3&%CatRi)2j,
%1l&Rp.JGIK7*%G\GqG<,Y9/tb97F!"SqkE'$<<.`lJS%)MN(=^!j7jXVEi6B]9MGAK?*MBhQZ#g"?u8-gg>&?PNKHR8@:l[l&9o@
%&YilWSukWWWf<2'BJsArgU1,A--T$?;;4P0YEE.>L#K!MV%Q!Ce&+e;*]OMd2"qogAIG`=bm(mjmKC/[<?@8TXd1Mqf*?a'Q#lFS
%DbmY+1+e9q6!mFm6c1"8`bGfK\@Mn5#>D<-J;b0HWfH!tCl.STd<UI2[/\GBan)c>g>5spb_=J]&F7AhM"RmRR=6#$aO7=Rs)lXN
%3IYiEm2-mCcZ(R0Y0MLLZao`91pK4A2u,JnpP6lEU0liAcn]K`5p[%SPM4_nht)&qm;Md#63"h6%`Ffc,I1%=@2^=?X"7B;L]@o'
%%<937&tfCj'Y.g`6V+>2)Y"<A1Z%BCnmG;:a5].CNTIC"n;'WY6RGdkM:cD0Gob7-7tnt1^r&.Z,Ld9AV$.O>GK)ZL>fd8"0FC=9
%li\pQba6m"jGVjmg(cW@^]SKTmC<]K4?]*tIV#<BnZ5\Z?T*\obTsnH?)B?M@dnNW1ZB'3Y0P4\dIFo%ol]1O`VY'3&*e>'3jq3B
%&\1HG"Z%na#U\'(!ZpI2%q$28687oq#hGGoR,B1aD%0I@%g4MqGl"\VJH8@qRP_$N2IKu3kl/_$7&/"QD_.O[@3k;:A,AaK?hn\%
%o%;_0*,U1A<9u/\rKEYCqnQTNKB;te"iu4]@%l?<$iK//;O+ZO_A7GWoHaN.e2%;*kd4l71aLR:[P1^ImiOn%.-s;k%`iA3Vsr6i
%N!nOQ2B:55o(A?kGW"OK3HQ<T0A9PqrZG=qs4D89;,s%n/LA2<0U6l%I4^CR_HBSO+'R`J3t4F/fCiR3iUNT*DsQON3@49NCKGYe
%)cV!mHZa#5B;CdJXBSba8YJu?5-e,Qmfr7u7O\/..IUD*0N>OU;8MqV#Mub(TruTKJ;2Pt!]ZF<6,758df^b`Im:k&!]X,#&BVit
%elm5n>6(A3pP^1Ae;.KSq?6g3^m$.D<VhT.;;'`1b%pm/+c@OV]8&rige(q?J[B)l&:!EA?q-^HCC@+GW:KqG/Lb2cQ]6\^XC/$3
%/7f]ZdVJmo6[l:5gi=cuZ?rKpY4h"rH01i#"FtPj\9Rd/0]S^))J/&5+fb6pg2PaA/AtQB\"VTlQ^`4!IKhAXp[slDoQ%E)`i1#W
%*$s$j*H`4\Ir*hOS%=;=pHg=[2)A@n.7r!?%5DV@bZ;?PG18lM"B4B8-D\NhM\?;&e.RT>ilO^,3R\JDKk,5roPs;B[Y..,.p16\
%Qa'c=&=+JSi@0n,UK1`n1em."nDfUM%$GAJr1F%][]jOa,?s%0(e9G#M_,T)Zs8u++Ro4al`VkE(*?m!.l)O\3%e`a7o>71gk6U#
%-8HQ>WSi`J+@&RI%7DLf!>_B8r3h>icbu"]C'9p2#+L.!_\+XRkGj/N+m[:B^+IK2-_SE3!n>Erks;1?J1<Q)%-&OK0XQ9@2EOB2
%F8Gc.f(dRb=t5A/Uh`TX!kc?<C'1W0@#=P=AQj"pqS(n[*r%.`QE5eU'pYgo"'=ji@l)HEgfqI4*1Q0%YOY<unbBDJbrV?NqT#/[
%E8CH^h*0kZ/#[o)!U[+)pn0,92>O$nZSu&Ga-iMb]?W3.&C)g+SjeIsFQ]U&Yp?<<>lmlbFE(0W0:=4;Yn@+lY6cTjs%jG9r'Qoq
%iZh::[D<%o!dn!9C3bkM3Ui-NNo=ee:.qG"/3#RS#%)[4l(IYZq]+H?r09RsStig\9H)N?%4*k:9M5CM]>6:9R[BIZ<NP:%R5\u$
%AtUE*D+dG1Qonfr@S?o"NAl?\hZ'9&ml'^rA+g;V^bO@-P*_oqnmocqbaH*b9\+_h1#&XF_l;M"1./$#4KNMW5T(k38T/8=?E[SO
%4Kp7+f"P[KZ_lWn40RddPUBo/0<3dWWNiqa8]t#kJENn1UI-KH3*TPCZWtfPIR<;"XC-9ks5beZUP.\-]KeISE(XU+_d`/*W=62E
%!Cl=TH$ERBRX94GL@tL1m[+ed]!q][)P.Gh]8TN/6d%b13\]'Bkr$i-1c5`F/gth)@]An1!:q12q`!f@RXfdSPFO)`Es3WYW@@Zd
%>_M1m.u%L6bs!TqD9+/,C3scq)BrflDA9MB&\kVO]%+YC78cE&a9&S60e4m#g/97N<!TIC"TaQ,Ack[`.gu-2ehU?.#E*5<k`=9`
%j$/=Z_V2-GjDf;nnY,X1$DKdVLP4gtXY5:ZRWp<I78VQ_?rl"M_h,Qp2U%6E#KkmnV8+M"Kfk8jL8%5BZG@=OIs=nbaEg`jo5Y,K
%;-5T^1:6N&O9htqEkugahU)mg&[fRI@5:M<?*.9]40#QH3rA;dh/F,ADH`)636H_4b(Y@T(6BsGW>rLL`a-6j=i$iKMZDKcjl%m>
%i1:g@a6Akc^#!93[7fdp2WQ:MaakK6@4:'@%V&^F39Y(NRjp$O5Z"iS@_r?E@:A#LO8N5r&K)NdcXEAJ!q$S=I9$QDRi[mfZT/0K
%9-5U0UoJSdK2u=sn!'eK?%_p[Erp4tH(6EP)/ZVj]0*"t98G\p#^fIFkLb$-X".4LaTbg]T"oDKV$E74NJ3:ACC#UO=Tod]6'Z!r
%!`$b&X^\nj)2p:MTDpE';@k:ZR5F'fWU`Fg(!P4CX>O(OOuWb#f2S_@8A<3%e8-;Q2.L5VJmIRq5:tHue:RVe@baJ&HAF]&\<EX0
%7V"tWhOtPPj,_$-g+B&59]-gqDKs$^\Ohp_5o>KS."t9=]R;Ke0Lc@YUp9-*chK\>q/*JP8Kr_u"=qMq)@YN6ne*3.S;)U6bY#Sf
%/MT5Tl68;-frU)a[Ia0=$"d^+E7g*iVo29ME&5i\YBZ\Er4"l5pdJMpKj#Ms4&du!_l.nDff@+]ZZ2]p7?Mu/kTUR,-!E6d"uL?M
%HgtXV>*BkO%AZWj*C;Z#V-'Zk>:('[Q*t7J7_t/uaO4lkAnd1G-RpJb-9OPl.]=$p!_OUg+_<*V?Udj;kg60'I52`gOsYXuLP.[+
%j?_ABOQaiqH=B)G>glc_mK&i6RC'4u")"s5*uhg@"#733Wj5t$-lSD=+#p?@CCuS=;H%H`0bG>c>C!=hE65H=fCo7IaPBX]!FW4?
%[XI`U@7/d_D)?]1n<gc^9Y$G,q#9<\I/tNOn<`Te'rcG2/E:h59P]NeR(+4b39E?F7h8t6H0q1;Uk_tILL;>^1@!hqQRXd\B,:b=
%-IL!h4EUMB$T-\ZKT09mTo9-cX["$_a4Xq'JC!9lGoMnq"]1CK`!&'WVD`D"/raXLE.:NGr'Y>Nh=+#]H'augi^W4.I;YRf!Ig/E
%$^d]C/4eJp:<BDafu;#7-me^(#eae9PY:2[RU^[F$_lp8>72CA/VEE>XAmo`F?tKcJ":q6aHIAf8V:sfpo@@:^CaqLC:ma6r4^f)
%)N5g70HmWaY[cgf0$4tR'.H(5SZIDC?q"f'*\EG0c1jX-@N&6S=09=7AU#o4^(bt=Ot7O`)\`T&Kdh`drRR2p]^/eB2"32!OJ1m0
%;c<ZLk.?7P"7fLo]A4i22MJ@8ML=f-Tajs-M5s\oXbpC$p#E+sJcL_IBE`Bbl]K&Nd6r#*R*snsoXW>A'AQpQ/*aiB)0OF!(Bu'#
%<krT+$NO?"&lO/3>6\O;(`nX#h4W_*K#7mD@'i!c6-IqVFp+Up8@G7mnJ/K1/>VuJ@GbqD_gZqZ:Vgq9<:!OYMg_JTomQbJgb(Wk
%`$,A&'IpQmVQ>r,a@dQ`pJ9&K*Q'fA?nd)af83Vs:.hlNh["8d.nuW?Sn&\^ap#u\o4923-qIRu^u)leXkZ+Kn2b>cEkL#$OY5_S
%gQ\09#(PC:l,`8uW'UJ,He1D;20IZNLLT5VS7rblFtdZmi6CPBZP68/J/9oU.&bH]!m1V/S[YnWIQ7#rqY[T6Fd-5PP/ON$3t]^1
%,.WO3i(;@Y2k^6`1q5bn#m2lSCb5l^M)=2:cZ.&`'48P-0PG9S:'d1t`1'^/(c-FNE7WfAe]@B%hcXm,n"Xa&B?+KfHErENEn#tj
%oha#W`.as(Xf"2R]H+DrpYIgnIPfBq^E(3J#7prUS*o#`25Vp'*B=Yd6H]pi7!%V&jJ1-bLk\E#Sc]JQ*c'k$VBUfFhSIMo1DnMe
%<o-=9m5W/8L[MepF*JH^.+r#mTgQ/Ya\'GOce2XGk6b&o;HlM[]<J9(T1i5Od&.+/!G/hjLidOOs$4Gh%mTr7CsPM;qns9*aj^jQ
%6AS8c[bH*P7'WTP$fUD)[AZ8?&?:?VG[F;Eh7&#`I$!)0>kA`KTDpXY>.>mnNEPOhiIE#6^K,po?*f3\>o-$OULW'pZk`dTgt(Ap
%o5;eBhhLIBVld/QQ9^3@bR@8i*4,M2L_m-&1ZTd3Fb\6-i%\3<8F-Q@GG8(APIf5jgiEq0[>EeuIe;GqjnuL[AS`B@@T'XOfN=_J
%4Lk+N"aTC7H3RTk>fko7,&ogg)dB,9@O*UL./X1tn4YTPWH`6K*u/Kl2\7$3-&M^e1+/hlJ&1SVpQ/0W<f)n+aUi-1FduII$;)oZ
%/kt@Fo&&u4cg55c?JcWG\EXQZ$eK1@<?u7IP!,&Y7OJG:?(Gld?@4Lo[$g/&QF_@3b[0YC9pHd<O.fChX=<t6`*jf9!DbJP86@^u
%<'Ln8"JX=M0%TtgZAjsY4+13^6%EN]q\ceAbr'p.,l8cD`#]'\DXqhPOp7'XVLFJ2*Q^X[&NLY1J8JuNWT(%c<%h]mo:XjA"]f_0
%A4S2,DSjWo*N4"FbenHX3BBY<S.QCL3BQtps7Uh'l3^S-%]"H&?Lg4<4WAVPNROFg?E6;T5=Rt)=<ef:4cN4\)-Q29*li/*f0^VT
%*np+g;E7VLHK<1<YW988*OXf=SIX1#9B/6_V0JGWB#e+0Y:T7d=T/l.ZAX"5'AfkCnqWHaj)^Je//HKjASt]i^JYhRZgZ9Q1haHl
%k3)@m0LmXR%sIt:q/;Vq\NYC6>16'>;aC.E<mI7WW<>@c?\@,b@Kj\sXK?clC$%]F/CEPAI_uas]%)qFU$t[rADEI(U=4aa1:'RV
%09u(N:9T8\oH?Z7T3LG]<k-n0Ep@$AJ0G0L4gKh2W5)p3Idb\YM.V'T@@U&OPImLuNJU)[4h4LqAl]?^m3fJM5>Cb([JY6P77\9n
%[c7^mbOYU"fV%G`4A$YuE$+L#4`'fV6;&`P<696>dnfADS:^C#W4$Ie'A@g#9A_I`jKL3H8W]:9@X?C_HXkq)TRdntSk7IcP-s2h
%Dt<.:h[])%"?k!P>YULk?o+Cumcp!E*Tn1&bWPaOcJ-Wn6U.o'f%V3'MGeK!dqQKFK]89Rf,]]GB<GQXGNqSu*EN!jmU0R5[D"I$
%hUul:7(0j9nH`H8I9d30#S;HO?"u#%!eDhReNl*Q@u:K(/eMhHLqM#cQcRTgB%G+]<t,FdjY\WlPR8(qV^;ddD[P&`Pc3mr9-HY2
%:S=N;'Y"H>Ei0%E$K"5hC0o&PJr&lRlh".(#=sYQJp('V;'D!aq%n9SD;k31XmC:=GkO>4lAS[icMaVTX8@^_EKD\W?,,)Mq12qK
%[$4I'rWCJg/:P<;$<)k<'5q'G:@Q8,jH<$]):?k>0<JMU)p3MJea%H,hB'IN.WF-j2t1RMp"<cc*_0'WM<f">?on++[r,QW]B?\3
%]<&Drg/@]j\K>If[]m,V.K]d@4KN#,it@9h1V]06U\BK1m?;RB[tq=@4MPGn+e%i.npmGm]C--aiWI6j_l\uJ7,Pe_-/_fp4PLri
%q<`KW6W72mWt:jt(6`'./oYPdRo53C108KT-$g\8Wns"Y]^eg!IQ.2Wc=PjtHMGuWh;jli!#'eo2m&CfJ7-6!Q@,Em4,%q<VA+Z"
%[BdsQVF1N)IPdD:N<b0nOJImH]QP@pV:3b`_Wkk<!%1.TVqHR3`;f>g0gCt-?h$=`Ekn=8op#Uh8rl!V)?YOXO%,>dTT/I13)cs;
%feR"<;OLKUJ]GL+E'"\YCoqdcZr.`//Mkg+M9X.rT_iBuI.APF;\hF0C:I*aBKJb".+H:am#,[5g@ClI"4kqe38!;f6YN&7$BprV
%HW(g+=BXK[VTe`phFQiSqD=K+2HP1,dAi+j`/RQR74I@.#<>=_XEiUBVSJk@jI=Fmgu)s-jGQNk<[X]T\,LOjc]j)*Mhi:2T[";4
%U-Khrape<>Ug,Q>F?[sBm*/Zc`u\9!KtBOWrcSRn7"X03,8)?SCd[]p8k*p\VI(R;aKZlrdFMB!M>M.'D#Wf=^;4Tjp:q4pKuFI'
%R=:D&8\VY3--rt]&_i=3r[_>?T3?_)KZDRO@1l4A:S][Z(*SSR4H>Q3C9XgLicA+3332g-H:`H>f?XgknSC)WetJH,kP*iG*V/g\
%.DlhVcU5]Na.ti!ac(N@5$"OF*Qlgcn`Dg!+n:_Yc1F6%C`?Q/P,iNsbpk4-.cYQ@FL\_Nq$I%!Ms>,Jpribd:40dU/6SV[DhC6H
%S4OK"?n.RHNHgL8hTM.B@09;N'QsZ5RtK"U6f(UW8*lo7!mC>F67.V3m`c8f.I+D15RWSAhYdI-<AH=I_o6]^FCmP**MHLNoer4I
%#l@N%aZl5V;P'5_)H)D=h,Y:KD>A.amf^V32uCn*.#Y:Dm'O7Vq,rf2hVB!Ff1JB\*KJCJfrUd\s,9T,?_:PP4+_*"qZ!sH4[4,>
%0_etRs2//hXH_V+*2+hpdRnK:N`K^kOOt=c$]+hSq)nYH]Jm1@Mo=.-RhmH4*BWt-]Hu\qaJcBE#>M6R"iJ5g(\\-[,F1u:7UNM.
%\O`?o4/&c?)8D/2@'^J$9X57mdeZ67#[2/ZdKB>s$.6@OX;ge!hDR8E*5J<[m=nOD+N2:di2)g2TndJ\,n>TQ6h?:>R2bQ0INK8O
%E`3</cjBtfg=W/mXS+fgRTPTXo<HaHU\kV[iI^9JXE?+mFc'c4@Wke^\i=Q`L(i[3]`tTogi(QG\OY``$B4(;HEOUWHAphm$M9:`
%l;9T68%Ur6>4DgDY$f3^LhK(e4K6SbhU+^6_,.Ws]_SZ$i*E5s<b9*?(<MYle648nUDG'hZo;SJbJCQ6YcW_OM2Qu-\e=&/?-TiD
%>eAJ0lpLq0Pg+-BB1CE0@EDOf`a0"AE&HK>C>t?k@1;dKX'qKUn5`"$4M/mW_HmKo[8[2gb%\uISg=bfI;2rJK<,o#ZflC',YF']
%#<gpi<fkVR2F+nIb+&R/#W2sP,p]EI&tLgT:InaM-;"HXr<o)Y.p6Mfjd\hd-DuJdM4O<nTuWUsl9\(s&'Pu6I"]&',<I+kdKA6S
%NV%@W%@^T6I<,5r1.3keE\boQ)2<-,f#^]?r+UV9h^oMI3%KEeg'Clq-)_k9#O\0Im[#.kiS5Ti.N71J?(rKq-Qa,h766YWDgfP$
%&V+HBm>.t!'g.7qn`U=WE?'c!2oTtI.%Dt"*lmgbq-L1`BQ1*##EkcM/7G,A#!fKF7hpT><=B(eoaQ#1IH@$%8a!3^YfESEl)QON
%?EZ/DAuJl:"TlK"2)H06Lip!Y0*eH<b%aWer;M&Ac/j`k*9<3*o3"4QB0Y.KO'#a;HZmfQ5&7mZ\3*c[8aI3kY*Ob<3S:B8JN/F=
%!EN\f:SoGt4oj3F>%#K5,!!a=OYL7aG8W*>e:j*'<DQPROIF\%[p]+T^hK2:&dS#rAbt0k6lgHuU+Js9<DYEcW*<S",_dhj\L+nh
%24:sF!*Mfp=Udj7*ds?.F"BJBC1-D1BYS*Rm:n[G/u^@f`Xk;EC?^.M=^u?LBA!)hpfSA-n,>9ndTCR3SJLV6RAHaHJV#j^c=L^+
%do3gpD9Q[Q'8%U&W>K1SX,B15C&#1m";t\5K3ul7P2B2*^SPc4hNS/NWY\PY6H<hT;&0b[];4$DUQBlM7HtbaG*H>*_;MX>S7BVA
%21Zo<T+t'S8W/A@,0E_"05@LGhD-a@;["M#Sf:YD2#I2knCdW0hB.i:*#6L*%ioh,!$79d\li8A8c#D?M'hokUDK-S^;U$LDY.'A
%cL!Q2YM8b-=4!.a*$AS!"l#-l>]!*[VMUtIdKSrCLKQI/CY^^P48EX`=Ur_3.FB5B_;,+E!).qkrU&/dW,5"S7Li*K$Aj#;lR9;W
%/.C/t[F;<LT4R!:AtmJnigI![AAZ&AGTrSFL%GOY!qitHC4VRpBc13;?"A2rZ)>Idpp3YaUNed"=Oc4\H(bO4DN`]1V:rcfIS[ki
%lPf@81clD+HcAc`k@$=I/.:X.<RS3A;5Jg->-mc"D,[qT3>8o>SSKRZ0UtM".k5Bn<Yt88fe(D?pp3Yaa7';P%E(.Mr(sFlcQhVg
%4P[b&i*i+S>b`$"[<&4GIPCaP'B`dde(r)\YXls1kdQGi\2+Q_3"83(0I0ZIL$fIAT4D??_)?Mn]rk\BI$,Ci4V10e)_hc0!RZos
%B6,aQ;DMc6n&M&3im^)OlFZ2\XGj/Z[69+*(4dHa",]T0&)EVG+?cX0ZORt(QA6Cf>Z]j>6rd\a%gjBi^FUTH%7EW@>5AhC:0&,M
%1Mr.AT4Qsc$eNq<AGP>'Wg2juV7T"%E%henX'qIKBMOXie!\jL5KgtS2Ql@gj9B%uFHOcWT[#:?`c\mj"]/fD#HCa]FB*]Or%&@;
%R(.#=,_*rpU?hK;*eF^n?jFX'BJs#")\#foc+^q6J!PpI,<$9P9]\rFs2hPpo\EI'.+&PCM%SQoKMn6;%?t@e&.?l'9lYZqD\20S
%gTl#Q(`V;&5P.8H0M(8#H)%\RE%N+"':<,FL#;*NkV/mPKW_M96J!'5QOQUk(@Z.,/p,[R$&/GQ8V"]i+9YTk.l9[>c&r=3IA)e]
%W-S_kWQPK#'-J`6rdI@2M?cA/&KU@OI&$l:<%hQ&*Nul5cnuPO`WN:cZ&"/'nbgPX[L7E8\e4>n1AC`p:s[DIbq")H!"BcH"dQ`P
%"$N_.B\7.(@.b;\Q?;MRfW3&h"n"ir<nL[1n/(`JIuPO/PeC3C23JM(Ud4)('b^gMP<0OS4-24kX)G"9C#:;O;5t<hRat_e68)jn
%cYR74SmU-aoC>Ee.n[E9INg6XV_fV1H@M=FRU*!iiGDsR#]\ut?:.bOi).oC1Bks7D'J5,-^_6R.05$!LiouH>;'j*KG\O9"D$Yc
%MKn`-,iHnc@\R592+))6\8OdmR&J]<husEa2)HEdD;<*#<\#_UAV=ldg5'cf-scunf@%Sm@/4XUY.%-iZ."EsCLT#-l9oJ00Bh!O
%@T/&Eq0cWWkLJKV`*uO/dg2MC9/>uBm9MQ'1XZ;]h[$VG/0S?!UWp"rG``(?#C7W.$+TZ<O*C_M9t-(N?Le;(nkR/\6@qh-8qel1
%[@"9?2dqdf<IVSO@l=qKDP7hhESK^RoRHCNo^RI!I4$LteTNccDT2>PlkS@U@NQ,@dbMebVGhC55N:o=b-c_W;F$Sf;#+]C>jJsS
%\\tfe*3mrmOqmA4;#8o'^G,X<';lGSEO%j86N`Z&qsfC1+4jWS5>5,=Gc<de:l41[BDQrP=XHlOd:X)]e!YRQIp`_D*4O&j8P0-:
%P(j+"!KY/GCX>R?0?a^mE:":M3XQLmh;Eghd!1)-8E0r$>R5Z5QiRZ-.ur0!!r]aY='qn.Xg9j2\Y]HdeaV"U@meNlV:iW(SZ*Zh
%Z^L>p2]o,bDnG7$M7/RklrLLL>hX(<,ksZ-]4!;M?+3+\EUE)=ct;&`d$Z7,-QmZWTjU^E",90_YHE!X^L-^nQ;Vqe;\it@^mR,A
%#7QTWb;igHn?fq:\(D1.Y^WXq\:7qW=jG<?bc+R'Rqif-^Kh0'I%Pn;s65mILOUA;hnEA&Dgm*/q"W>0_f*:S5/2R>n]SgWO*;,,
%5(3G,nFc=4ohTcRT-(gqrVZS<pZ:#QItN?&Z@@,jk5>hJ]mfW-N<Bcm~>
%AI9_PrivateDataEnd
